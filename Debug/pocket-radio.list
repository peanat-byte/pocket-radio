
pocket-radio.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002d3c  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08002dfc  08002dfc  00003dfc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002e2c  08002e2c  00004010  2**0
                  CONTENTS
  4 .ARM          00000000  08002e2c  08002e2c  00004010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002e2c  08002e2c  00004010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002e2c  08002e2c  00003e2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002e30  08002e30  00003e30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  08002e34  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000074  20000010  08002e44  00004010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000084  08002e44  00004084  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00004010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00005ce2  00000000  00000000  00004038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001230  00000000  00000000  00009d1a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000760  00000000  00000000  0000af50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000005b8  00000000  00000000  0000b6b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000eaea  00000000  00000000  0000bc68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000849b  00000000  00000000  0001a752  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0005bb03  00000000  00000000  00022bed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0007e6f0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001bcc  00000000  00000000  0007e734  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  00080300  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000010 	.word	0x20000010
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08002de4 	.word	0x08002de4

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000014 	.word	0x20000014
 8000104:	08002de4 	.word	0x08002de4

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			@ (mov r8, r8)

08000220 <__aeabi_cfrcmple>:
 8000220:	4684      	mov	ip, r0
 8000222:	0008      	movs	r0, r1
 8000224:	4661      	mov	r1, ip
 8000226:	e7ff      	b.n	8000228 <__aeabi_cfcmpeq>

08000228 <__aeabi_cfcmpeq>:
 8000228:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800022a:	f000 f8ab 	bl	8000384 <__lesf2>
 800022e:	2800      	cmp	r0, #0
 8000230:	d401      	bmi.n	8000236 <__aeabi_cfcmpeq+0xe>
 8000232:	2100      	movs	r1, #0
 8000234:	42c8      	cmn	r0, r1
 8000236:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000238 <__aeabi_fcmpeq>:
 8000238:	b510      	push	{r4, lr}
 800023a:	f000 f82b 	bl	8000294 <__eqsf2>
 800023e:	4240      	negs	r0, r0
 8000240:	3001      	adds	r0, #1
 8000242:	bd10      	pop	{r4, pc}

08000244 <__aeabi_fcmplt>:
 8000244:	b510      	push	{r4, lr}
 8000246:	f000 f89d 	bl	8000384 <__lesf2>
 800024a:	2800      	cmp	r0, #0
 800024c:	db01      	blt.n	8000252 <__aeabi_fcmplt+0xe>
 800024e:	2000      	movs	r0, #0
 8000250:	bd10      	pop	{r4, pc}
 8000252:	2001      	movs	r0, #1
 8000254:	bd10      	pop	{r4, pc}
 8000256:	46c0      	nop			@ (mov r8, r8)

08000258 <__aeabi_fcmple>:
 8000258:	b510      	push	{r4, lr}
 800025a:	f000 f893 	bl	8000384 <__lesf2>
 800025e:	2800      	cmp	r0, #0
 8000260:	dd01      	ble.n	8000266 <__aeabi_fcmple+0xe>
 8000262:	2000      	movs	r0, #0
 8000264:	bd10      	pop	{r4, pc}
 8000266:	2001      	movs	r0, #1
 8000268:	bd10      	pop	{r4, pc}
 800026a:	46c0      	nop			@ (mov r8, r8)

0800026c <__aeabi_fcmpgt>:
 800026c:	b510      	push	{r4, lr}
 800026e:	f000 f839 	bl	80002e4 <__gesf2>
 8000272:	2800      	cmp	r0, #0
 8000274:	dc01      	bgt.n	800027a <__aeabi_fcmpgt+0xe>
 8000276:	2000      	movs	r0, #0
 8000278:	bd10      	pop	{r4, pc}
 800027a:	2001      	movs	r0, #1
 800027c:	bd10      	pop	{r4, pc}
 800027e:	46c0      	nop			@ (mov r8, r8)

08000280 <__aeabi_fcmpge>:
 8000280:	b510      	push	{r4, lr}
 8000282:	f000 f82f 	bl	80002e4 <__gesf2>
 8000286:	2800      	cmp	r0, #0
 8000288:	da01      	bge.n	800028e <__aeabi_fcmpge+0xe>
 800028a:	2000      	movs	r0, #0
 800028c:	bd10      	pop	{r4, pc}
 800028e:	2001      	movs	r0, #1
 8000290:	bd10      	pop	{r4, pc}
 8000292:	46c0      	nop			@ (mov r8, r8)

08000294 <__eqsf2>:
 8000294:	b570      	push	{r4, r5, r6, lr}
 8000296:	0042      	lsls	r2, r0, #1
 8000298:	024e      	lsls	r6, r1, #9
 800029a:	004c      	lsls	r4, r1, #1
 800029c:	0245      	lsls	r5, r0, #9
 800029e:	0a6d      	lsrs	r5, r5, #9
 80002a0:	0e12      	lsrs	r2, r2, #24
 80002a2:	0fc3      	lsrs	r3, r0, #31
 80002a4:	0a76      	lsrs	r6, r6, #9
 80002a6:	0e24      	lsrs	r4, r4, #24
 80002a8:	0fc9      	lsrs	r1, r1, #31
 80002aa:	2aff      	cmp	r2, #255	@ 0xff
 80002ac:	d010      	beq.n	80002d0 <__eqsf2+0x3c>
 80002ae:	2cff      	cmp	r4, #255	@ 0xff
 80002b0:	d00c      	beq.n	80002cc <__eqsf2+0x38>
 80002b2:	2001      	movs	r0, #1
 80002b4:	42a2      	cmp	r2, r4
 80002b6:	d10a      	bne.n	80002ce <__eqsf2+0x3a>
 80002b8:	42b5      	cmp	r5, r6
 80002ba:	d108      	bne.n	80002ce <__eqsf2+0x3a>
 80002bc:	428b      	cmp	r3, r1
 80002be:	d00f      	beq.n	80002e0 <__eqsf2+0x4c>
 80002c0:	2a00      	cmp	r2, #0
 80002c2:	d104      	bne.n	80002ce <__eqsf2+0x3a>
 80002c4:	0028      	movs	r0, r5
 80002c6:	1e43      	subs	r3, r0, #1
 80002c8:	4198      	sbcs	r0, r3
 80002ca:	e000      	b.n	80002ce <__eqsf2+0x3a>
 80002cc:	2001      	movs	r0, #1
 80002ce:	bd70      	pop	{r4, r5, r6, pc}
 80002d0:	2001      	movs	r0, #1
 80002d2:	2cff      	cmp	r4, #255	@ 0xff
 80002d4:	d1fb      	bne.n	80002ce <__eqsf2+0x3a>
 80002d6:	4335      	orrs	r5, r6
 80002d8:	d1f9      	bne.n	80002ce <__eqsf2+0x3a>
 80002da:	404b      	eors	r3, r1
 80002dc:	0018      	movs	r0, r3
 80002de:	e7f6      	b.n	80002ce <__eqsf2+0x3a>
 80002e0:	2000      	movs	r0, #0
 80002e2:	e7f4      	b.n	80002ce <__eqsf2+0x3a>

080002e4 <__gesf2>:
 80002e4:	b530      	push	{r4, r5, lr}
 80002e6:	0042      	lsls	r2, r0, #1
 80002e8:	0244      	lsls	r4, r0, #9
 80002ea:	024d      	lsls	r5, r1, #9
 80002ec:	0fc3      	lsrs	r3, r0, #31
 80002ee:	0048      	lsls	r0, r1, #1
 80002f0:	0a64      	lsrs	r4, r4, #9
 80002f2:	0e12      	lsrs	r2, r2, #24
 80002f4:	0a6d      	lsrs	r5, r5, #9
 80002f6:	0e00      	lsrs	r0, r0, #24
 80002f8:	0fc9      	lsrs	r1, r1, #31
 80002fa:	2aff      	cmp	r2, #255	@ 0xff
 80002fc:	d019      	beq.n	8000332 <__gesf2+0x4e>
 80002fe:	28ff      	cmp	r0, #255	@ 0xff
 8000300:	d00b      	beq.n	800031a <__gesf2+0x36>
 8000302:	2a00      	cmp	r2, #0
 8000304:	d11e      	bne.n	8000344 <__gesf2+0x60>
 8000306:	2800      	cmp	r0, #0
 8000308:	d10b      	bne.n	8000322 <__gesf2+0x3e>
 800030a:	2d00      	cmp	r5, #0
 800030c:	d027      	beq.n	800035e <__gesf2+0x7a>
 800030e:	2c00      	cmp	r4, #0
 8000310:	d134      	bne.n	800037c <__gesf2+0x98>
 8000312:	2900      	cmp	r1, #0
 8000314:	d02f      	beq.n	8000376 <__gesf2+0x92>
 8000316:	0008      	movs	r0, r1
 8000318:	bd30      	pop	{r4, r5, pc}
 800031a:	2d00      	cmp	r5, #0
 800031c:	d128      	bne.n	8000370 <__gesf2+0x8c>
 800031e:	2a00      	cmp	r2, #0
 8000320:	d101      	bne.n	8000326 <__gesf2+0x42>
 8000322:	2c00      	cmp	r4, #0
 8000324:	d0f5      	beq.n	8000312 <__gesf2+0x2e>
 8000326:	428b      	cmp	r3, r1
 8000328:	d107      	bne.n	800033a <__gesf2+0x56>
 800032a:	2b00      	cmp	r3, #0
 800032c:	d023      	beq.n	8000376 <__gesf2+0x92>
 800032e:	0018      	movs	r0, r3
 8000330:	e7f2      	b.n	8000318 <__gesf2+0x34>
 8000332:	2c00      	cmp	r4, #0
 8000334:	d11c      	bne.n	8000370 <__gesf2+0x8c>
 8000336:	28ff      	cmp	r0, #255	@ 0xff
 8000338:	d014      	beq.n	8000364 <__gesf2+0x80>
 800033a:	1e58      	subs	r0, r3, #1
 800033c:	2302      	movs	r3, #2
 800033e:	4018      	ands	r0, r3
 8000340:	3801      	subs	r0, #1
 8000342:	e7e9      	b.n	8000318 <__gesf2+0x34>
 8000344:	2800      	cmp	r0, #0
 8000346:	d0f8      	beq.n	800033a <__gesf2+0x56>
 8000348:	428b      	cmp	r3, r1
 800034a:	d1f6      	bne.n	800033a <__gesf2+0x56>
 800034c:	4282      	cmp	r2, r0
 800034e:	dcf4      	bgt.n	800033a <__gesf2+0x56>
 8000350:	dbeb      	blt.n	800032a <__gesf2+0x46>
 8000352:	42ac      	cmp	r4, r5
 8000354:	d8f1      	bhi.n	800033a <__gesf2+0x56>
 8000356:	2000      	movs	r0, #0
 8000358:	42ac      	cmp	r4, r5
 800035a:	d2dd      	bcs.n	8000318 <__gesf2+0x34>
 800035c:	e7e5      	b.n	800032a <__gesf2+0x46>
 800035e:	2c00      	cmp	r4, #0
 8000360:	d0da      	beq.n	8000318 <__gesf2+0x34>
 8000362:	e7ea      	b.n	800033a <__gesf2+0x56>
 8000364:	2d00      	cmp	r5, #0
 8000366:	d103      	bne.n	8000370 <__gesf2+0x8c>
 8000368:	428b      	cmp	r3, r1
 800036a:	d1e6      	bne.n	800033a <__gesf2+0x56>
 800036c:	2000      	movs	r0, #0
 800036e:	e7d3      	b.n	8000318 <__gesf2+0x34>
 8000370:	2002      	movs	r0, #2
 8000372:	4240      	negs	r0, r0
 8000374:	e7d0      	b.n	8000318 <__gesf2+0x34>
 8000376:	2001      	movs	r0, #1
 8000378:	4240      	negs	r0, r0
 800037a:	e7cd      	b.n	8000318 <__gesf2+0x34>
 800037c:	428b      	cmp	r3, r1
 800037e:	d0e8      	beq.n	8000352 <__gesf2+0x6e>
 8000380:	e7db      	b.n	800033a <__gesf2+0x56>
 8000382:	46c0      	nop			@ (mov r8, r8)

08000384 <__lesf2>:
 8000384:	b530      	push	{r4, r5, lr}
 8000386:	0042      	lsls	r2, r0, #1
 8000388:	0244      	lsls	r4, r0, #9
 800038a:	024d      	lsls	r5, r1, #9
 800038c:	0fc3      	lsrs	r3, r0, #31
 800038e:	0048      	lsls	r0, r1, #1
 8000390:	0a64      	lsrs	r4, r4, #9
 8000392:	0e12      	lsrs	r2, r2, #24
 8000394:	0a6d      	lsrs	r5, r5, #9
 8000396:	0e00      	lsrs	r0, r0, #24
 8000398:	0fc9      	lsrs	r1, r1, #31
 800039a:	2aff      	cmp	r2, #255	@ 0xff
 800039c:	d01a      	beq.n	80003d4 <__lesf2+0x50>
 800039e:	28ff      	cmp	r0, #255	@ 0xff
 80003a0:	d00e      	beq.n	80003c0 <__lesf2+0x3c>
 80003a2:	2a00      	cmp	r2, #0
 80003a4:	d11e      	bne.n	80003e4 <__lesf2+0x60>
 80003a6:	2800      	cmp	r0, #0
 80003a8:	d10e      	bne.n	80003c8 <__lesf2+0x44>
 80003aa:	2d00      	cmp	r5, #0
 80003ac:	d02a      	beq.n	8000404 <__lesf2+0x80>
 80003ae:	2c00      	cmp	r4, #0
 80003b0:	d00c      	beq.n	80003cc <__lesf2+0x48>
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d01d      	beq.n	80003f2 <__lesf2+0x6e>
 80003b6:	1e58      	subs	r0, r3, #1
 80003b8:	2302      	movs	r3, #2
 80003ba:	4018      	ands	r0, r3
 80003bc:	3801      	subs	r0, #1
 80003be:	e010      	b.n	80003e2 <__lesf2+0x5e>
 80003c0:	2d00      	cmp	r5, #0
 80003c2:	d10d      	bne.n	80003e0 <__lesf2+0x5c>
 80003c4:	2a00      	cmp	r2, #0
 80003c6:	d120      	bne.n	800040a <__lesf2+0x86>
 80003c8:	2c00      	cmp	r4, #0
 80003ca:	d11e      	bne.n	800040a <__lesf2+0x86>
 80003cc:	2900      	cmp	r1, #0
 80003ce:	d023      	beq.n	8000418 <__lesf2+0x94>
 80003d0:	0008      	movs	r0, r1
 80003d2:	e006      	b.n	80003e2 <__lesf2+0x5e>
 80003d4:	2c00      	cmp	r4, #0
 80003d6:	d103      	bne.n	80003e0 <__lesf2+0x5c>
 80003d8:	28ff      	cmp	r0, #255	@ 0xff
 80003da:	d1ec      	bne.n	80003b6 <__lesf2+0x32>
 80003dc:	2d00      	cmp	r5, #0
 80003de:	d017      	beq.n	8000410 <__lesf2+0x8c>
 80003e0:	2002      	movs	r0, #2
 80003e2:	bd30      	pop	{r4, r5, pc}
 80003e4:	2800      	cmp	r0, #0
 80003e6:	d0e6      	beq.n	80003b6 <__lesf2+0x32>
 80003e8:	428b      	cmp	r3, r1
 80003ea:	d1e4      	bne.n	80003b6 <__lesf2+0x32>
 80003ec:	4282      	cmp	r2, r0
 80003ee:	dce2      	bgt.n	80003b6 <__lesf2+0x32>
 80003f0:	db04      	blt.n	80003fc <__lesf2+0x78>
 80003f2:	42ac      	cmp	r4, r5
 80003f4:	d8df      	bhi.n	80003b6 <__lesf2+0x32>
 80003f6:	2000      	movs	r0, #0
 80003f8:	42ac      	cmp	r4, r5
 80003fa:	d2f2      	bcs.n	80003e2 <__lesf2+0x5e>
 80003fc:	2b00      	cmp	r3, #0
 80003fe:	d00b      	beq.n	8000418 <__lesf2+0x94>
 8000400:	0018      	movs	r0, r3
 8000402:	e7ee      	b.n	80003e2 <__lesf2+0x5e>
 8000404:	2c00      	cmp	r4, #0
 8000406:	d0ec      	beq.n	80003e2 <__lesf2+0x5e>
 8000408:	e7d5      	b.n	80003b6 <__lesf2+0x32>
 800040a:	428b      	cmp	r3, r1
 800040c:	d1d3      	bne.n	80003b6 <__lesf2+0x32>
 800040e:	e7f5      	b.n	80003fc <__lesf2+0x78>
 8000410:	2000      	movs	r0, #0
 8000412:	428b      	cmp	r3, r1
 8000414:	d0e5      	beq.n	80003e2 <__lesf2+0x5e>
 8000416:	e7ce      	b.n	80003b6 <__lesf2+0x32>
 8000418:	2001      	movs	r0, #1
 800041a:	4240      	negs	r0, r0
 800041c:	e7e1      	b.n	80003e2 <__lesf2+0x5e>
 800041e:	46c0      	nop			@ (mov r8, r8)

08000420 <__aeabi_fmul>:
 8000420:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000422:	464f      	mov	r7, r9
 8000424:	4646      	mov	r6, r8
 8000426:	46d6      	mov	lr, sl
 8000428:	0243      	lsls	r3, r0, #9
 800042a:	0a5b      	lsrs	r3, r3, #9
 800042c:	0045      	lsls	r5, r0, #1
 800042e:	b5c0      	push	{r6, r7, lr}
 8000430:	4699      	mov	r9, r3
 8000432:	1c0f      	adds	r7, r1, #0
 8000434:	0e2d      	lsrs	r5, r5, #24
 8000436:	0fc6      	lsrs	r6, r0, #31
 8000438:	2d00      	cmp	r5, #0
 800043a:	d100      	bne.n	800043e <__aeabi_fmul+0x1e>
 800043c:	e088      	b.n	8000550 <__aeabi_fmul+0x130>
 800043e:	2dff      	cmp	r5, #255	@ 0xff
 8000440:	d100      	bne.n	8000444 <__aeabi_fmul+0x24>
 8000442:	e08d      	b.n	8000560 <__aeabi_fmul+0x140>
 8000444:	2280      	movs	r2, #128	@ 0x80
 8000446:	00db      	lsls	r3, r3, #3
 8000448:	04d2      	lsls	r2, r2, #19
 800044a:	431a      	orrs	r2, r3
 800044c:	2300      	movs	r3, #0
 800044e:	4691      	mov	r9, r2
 8000450:	4698      	mov	r8, r3
 8000452:	469a      	mov	sl, r3
 8000454:	3d7f      	subs	r5, #127	@ 0x7f
 8000456:	027c      	lsls	r4, r7, #9
 8000458:	007b      	lsls	r3, r7, #1
 800045a:	0a64      	lsrs	r4, r4, #9
 800045c:	0e1b      	lsrs	r3, r3, #24
 800045e:	0fff      	lsrs	r7, r7, #31
 8000460:	2b00      	cmp	r3, #0
 8000462:	d068      	beq.n	8000536 <__aeabi_fmul+0x116>
 8000464:	2bff      	cmp	r3, #255	@ 0xff
 8000466:	d021      	beq.n	80004ac <__aeabi_fmul+0x8c>
 8000468:	2280      	movs	r2, #128	@ 0x80
 800046a:	00e4      	lsls	r4, r4, #3
 800046c:	04d2      	lsls	r2, r2, #19
 800046e:	4314      	orrs	r4, r2
 8000470:	4642      	mov	r2, r8
 8000472:	3b7f      	subs	r3, #127	@ 0x7f
 8000474:	195b      	adds	r3, r3, r5
 8000476:	2100      	movs	r1, #0
 8000478:	1c5d      	adds	r5, r3, #1
 800047a:	2a0a      	cmp	r2, #10
 800047c:	dc2e      	bgt.n	80004dc <__aeabi_fmul+0xbc>
 800047e:	407e      	eors	r6, r7
 8000480:	4642      	mov	r2, r8
 8000482:	2a02      	cmp	r2, #2
 8000484:	dc23      	bgt.n	80004ce <__aeabi_fmul+0xae>
 8000486:	3a01      	subs	r2, #1
 8000488:	2a01      	cmp	r2, #1
 800048a:	d900      	bls.n	800048e <__aeabi_fmul+0x6e>
 800048c:	e0bd      	b.n	800060a <__aeabi_fmul+0x1ea>
 800048e:	2902      	cmp	r1, #2
 8000490:	d06e      	beq.n	8000570 <__aeabi_fmul+0x150>
 8000492:	2901      	cmp	r1, #1
 8000494:	d12c      	bne.n	80004f0 <__aeabi_fmul+0xd0>
 8000496:	2000      	movs	r0, #0
 8000498:	2200      	movs	r2, #0
 800049a:	05c0      	lsls	r0, r0, #23
 800049c:	07f6      	lsls	r6, r6, #31
 800049e:	4310      	orrs	r0, r2
 80004a0:	4330      	orrs	r0, r6
 80004a2:	bce0      	pop	{r5, r6, r7}
 80004a4:	46ba      	mov	sl, r7
 80004a6:	46b1      	mov	r9, r6
 80004a8:	46a8      	mov	r8, r5
 80004aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004ac:	002b      	movs	r3, r5
 80004ae:	33ff      	adds	r3, #255	@ 0xff
 80004b0:	2c00      	cmp	r4, #0
 80004b2:	d065      	beq.n	8000580 <__aeabi_fmul+0x160>
 80004b4:	2203      	movs	r2, #3
 80004b6:	4641      	mov	r1, r8
 80004b8:	4311      	orrs	r1, r2
 80004ba:	0032      	movs	r2, r6
 80004bc:	3501      	adds	r5, #1
 80004be:	4688      	mov	r8, r1
 80004c0:	407a      	eors	r2, r7
 80004c2:	35ff      	adds	r5, #255	@ 0xff
 80004c4:	290a      	cmp	r1, #10
 80004c6:	dd00      	ble.n	80004ca <__aeabi_fmul+0xaa>
 80004c8:	e0d8      	b.n	800067c <__aeabi_fmul+0x25c>
 80004ca:	0016      	movs	r6, r2
 80004cc:	2103      	movs	r1, #3
 80004ce:	4640      	mov	r0, r8
 80004d0:	2201      	movs	r2, #1
 80004d2:	4082      	lsls	r2, r0
 80004d4:	20a6      	movs	r0, #166	@ 0xa6
 80004d6:	00c0      	lsls	r0, r0, #3
 80004d8:	4202      	tst	r2, r0
 80004da:	d020      	beq.n	800051e <__aeabi_fmul+0xfe>
 80004dc:	4653      	mov	r3, sl
 80004de:	2b02      	cmp	r3, #2
 80004e0:	d046      	beq.n	8000570 <__aeabi_fmul+0x150>
 80004e2:	2b03      	cmp	r3, #3
 80004e4:	d100      	bne.n	80004e8 <__aeabi_fmul+0xc8>
 80004e6:	e0bb      	b.n	8000660 <__aeabi_fmul+0x240>
 80004e8:	4651      	mov	r1, sl
 80004ea:	464c      	mov	r4, r9
 80004ec:	2901      	cmp	r1, #1
 80004ee:	d0d2      	beq.n	8000496 <__aeabi_fmul+0x76>
 80004f0:	002b      	movs	r3, r5
 80004f2:	337f      	adds	r3, #127	@ 0x7f
 80004f4:	2b00      	cmp	r3, #0
 80004f6:	dd70      	ble.n	80005da <__aeabi_fmul+0x1ba>
 80004f8:	0762      	lsls	r2, r4, #29
 80004fa:	d004      	beq.n	8000506 <__aeabi_fmul+0xe6>
 80004fc:	220f      	movs	r2, #15
 80004fe:	4022      	ands	r2, r4
 8000500:	2a04      	cmp	r2, #4
 8000502:	d000      	beq.n	8000506 <__aeabi_fmul+0xe6>
 8000504:	3404      	adds	r4, #4
 8000506:	0122      	lsls	r2, r4, #4
 8000508:	d503      	bpl.n	8000512 <__aeabi_fmul+0xf2>
 800050a:	4b63      	ldr	r3, [pc, #396]	@ (8000698 <__aeabi_fmul+0x278>)
 800050c:	401c      	ands	r4, r3
 800050e:	002b      	movs	r3, r5
 8000510:	3380      	adds	r3, #128	@ 0x80
 8000512:	2bfe      	cmp	r3, #254	@ 0xfe
 8000514:	dc2c      	bgt.n	8000570 <__aeabi_fmul+0x150>
 8000516:	01a2      	lsls	r2, r4, #6
 8000518:	0a52      	lsrs	r2, r2, #9
 800051a:	b2d8      	uxtb	r0, r3
 800051c:	e7bd      	b.n	800049a <__aeabi_fmul+0x7a>
 800051e:	2090      	movs	r0, #144	@ 0x90
 8000520:	0080      	lsls	r0, r0, #2
 8000522:	4202      	tst	r2, r0
 8000524:	d127      	bne.n	8000576 <__aeabi_fmul+0x156>
 8000526:	38b9      	subs	r0, #185	@ 0xb9
 8000528:	38ff      	subs	r0, #255	@ 0xff
 800052a:	4210      	tst	r0, r2
 800052c:	d06d      	beq.n	800060a <__aeabi_fmul+0x1ea>
 800052e:	003e      	movs	r6, r7
 8000530:	46a1      	mov	r9, r4
 8000532:	468a      	mov	sl, r1
 8000534:	e7d2      	b.n	80004dc <__aeabi_fmul+0xbc>
 8000536:	2c00      	cmp	r4, #0
 8000538:	d141      	bne.n	80005be <__aeabi_fmul+0x19e>
 800053a:	2301      	movs	r3, #1
 800053c:	4642      	mov	r2, r8
 800053e:	431a      	orrs	r2, r3
 8000540:	4690      	mov	r8, r2
 8000542:	002b      	movs	r3, r5
 8000544:	4642      	mov	r2, r8
 8000546:	2101      	movs	r1, #1
 8000548:	1c5d      	adds	r5, r3, #1
 800054a:	2a0a      	cmp	r2, #10
 800054c:	dd97      	ble.n	800047e <__aeabi_fmul+0x5e>
 800054e:	e7c5      	b.n	80004dc <__aeabi_fmul+0xbc>
 8000550:	2b00      	cmp	r3, #0
 8000552:	d126      	bne.n	80005a2 <__aeabi_fmul+0x182>
 8000554:	2304      	movs	r3, #4
 8000556:	4698      	mov	r8, r3
 8000558:	3b03      	subs	r3, #3
 800055a:	2500      	movs	r5, #0
 800055c:	469a      	mov	sl, r3
 800055e:	e77a      	b.n	8000456 <__aeabi_fmul+0x36>
 8000560:	2b00      	cmp	r3, #0
 8000562:	d118      	bne.n	8000596 <__aeabi_fmul+0x176>
 8000564:	2308      	movs	r3, #8
 8000566:	4698      	mov	r8, r3
 8000568:	3b06      	subs	r3, #6
 800056a:	25ff      	movs	r5, #255	@ 0xff
 800056c:	469a      	mov	sl, r3
 800056e:	e772      	b.n	8000456 <__aeabi_fmul+0x36>
 8000570:	20ff      	movs	r0, #255	@ 0xff
 8000572:	2200      	movs	r2, #0
 8000574:	e791      	b.n	800049a <__aeabi_fmul+0x7a>
 8000576:	2280      	movs	r2, #128	@ 0x80
 8000578:	2600      	movs	r6, #0
 800057a:	20ff      	movs	r0, #255	@ 0xff
 800057c:	03d2      	lsls	r2, r2, #15
 800057e:	e78c      	b.n	800049a <__aeabi_fmul+0x7a>
 8000580:	4641      	mov	r1, r8
 8000582:	2202      	movs	r2, #2
 8000584:	3501      	adds	r5, #1
 8000586:	4311      	orrs	r1, r2
 8000588:	4688      	mov	r8, r1
 800058a:	35ff      	adds	r5, #255	@ 0xff
 800058c:	290a      	cmp	r1, #10
 800058e:	dca5      	bgt.n	80004dc <__aeabi_fmul+0xbc>
 8000590:	2102      	movs	r1, #2
 8000592:	407e      	eors	r6, r7
 8000594:	e774      	b.n	8000480 <__aeabi_fmul+0x60>
 8000596:	230c      	movs	r3, #12
 8000598:	4698      	mov	r8, r3
 800059a:	3b09      	subs	r3, #9
 800059c:	25ff      	movs	r5, #255	@ 0xff
 800059e:	469a      	mov	sl, r3
 80005a0:	e759      	b.n	8000456 <__aeabi_fmul+0x36>
 80005a2:	0018      	movs	r0, r3
 80005a4:	f000 ffde 	bl	8001564 <__clzsi2>
 80005a8:	464a      	mov	r2, r9
 80005aa:	1f43      	subs	r3, r0, #5
 80005ac:	2576      	movs	r5, #118	@ 0x76
 80005ae:	409a      	lsls	r2, r3
 80005b0:	2300      	movs	r3, #0
 80005b2:	426d      	negs	r5, r5
 80005b4:	4691      	mov	r9, r2
 80005b6:	4698      	mov	r8, r3
 80005b8:	469a      	mov	sl, r3
 80005ba:	1a2d      	subs	r5, r5, r0
 80005bc:	e74b      	b.n	8000456 <__aeabi_fmul+0x36>
 80005be:	0020      	movs	r0, r4
 80005c0:	f000 ffd0 	bl	8001564 <__clzsi2>
 80005c4:	4642      	mov	r2, r8
 80005c6:	1f43      	subs	r3, r0, #5
 80005c8:	409c      	lsls	r4, r3
 80005ca:	1a2b      	subs	r3, r5, r0
 80005cc:	3b76      	subs	r3, #118	@ 0x76
 80005ce:	2100      	movs	r1, #0
 80005d0:	1c5d      	adds	r5, r3, #1
 80005d2:	2a0a      	cmp	r2, #10
 80005d4:	dc00      	bgt.n	80005d8 <__aeabi_fmul+0x1b8>
 80005d6:	e752      	b.n	800047e <__aeabi_fmul+0x5e>
 80005d8:	e780      	b.n	80004dc <__aeabi_fmul+0xbc>
 80005da:	2201      	movs	r2, #1
 80005dc:	1ad3      	subs	r3, r2, r3
 80005de:	2b1b      	cmp	r3, #27
 80005e0:	dd00      	ble.n	80005e4 <__aeabi_fmul+0x1c4>
 80005e2:	e758      	b.n	8000496 <__aeabi_fmul+0x76>
 80005e4:	359e      	adds	r5, #158	@ 0x9e
 80005e6:	0022      	movs	r2, r4
 80005e8:	40ac      	lsls	r4, r5
 80005ea:	40da      	lsrs	r2, r3
 80005ec:	1e63      	subs	r3, r4, #1
 80005ee:	419c      	sbcs	r4, r3
 80005f0:	4322      	orrs	r2, r4
 80005f2:	0753      	lsls	r3, r2, #29
 80005f4:	d004      	beq.n	8000600 <__aeabi_fmul+0x1e0>
 80005f6:	230f      	movs	r3, #15
 80005f8:	4013      	ands	r3, r2
 80005fa:	2b04      	cmp	r3, #4
 80005fc:	d000      	beq.n	8000600 <__aeabi_fmul+0x1e0>
 80005fe:	3204      	adds	r2, #4
 8000600:	0153      	lsls	r3, r2, #5
 8000602:	d537      	bpl.n	8000674 <__aeabi_fmul+0x254>
 8000604:	2001      	movs	r0, #1
 8000606:	2200      	movs	r2, #0
 8000608:	e747      	b.n	800049a <__aeabi_fmul+0x7a>
 800060a:	0c21      	lsrs	r1, r4, #16
 800060c:	464a      	mov	r2, r9
 800060e:	0424      	lsls	r4, r4, #16
 8000610:	0c24      	lsrs	r4, r4, #16
 8000612:	0027      	movs	r7, r4
 8000614:	0c10      	lsrs	r0, r2, #16
 8000616:	0412      	lsls	r2, r2, #16
 8000618:	0c12      	lsrs	r2, r2, #16
 800061a:	4344      	muls	r4, r0
 800061c:	4357      	muls	r7, r2
 800061e:	4348      	muls	r0, r1
 8000620:	4351      	muls	r1, r2
 8000622:	0c3a      	lsrs	r2, r7, #16
 8000624:	1909      	adds	r1, r1, r4
 8000626:	1852      	adds	r2, r2, r1
 8000628:	4294      	cmp	r4, r2
 800062a:	d903      	bls.n	8000634 <__aeabi_fmul+0x214>
 800062c:	2180      	movs	r1, #128	@ 0x80
 800062e:	0249      	lsls	r1, r1, #9
 8000630:	468c      	mov	ip, r1
 8000632:	4460      	add	r0, ip
 8000634:	043f      	lsls	r7, r7, #16
 8000636:	0411      	lsls	r1, r2, #16
 8000638:	0c3f      	lsrs	r7, r7, #16
 800063a:	19c9      	adds	r1, r1, r7
 800063c:	018c      	lsls	r4, r1, #6
 800063e:	1e67      	subs	r7, r4, #1
 8000640:	41bc      	sbcs	r4, r7
 8000642:	0c12      	lsrs	r2, r2, #16
 8000644:	0e89      	lsrs	r1, r1, #26
 8000646:	1812      	adds	r2, r2, r0
 8000648:	430c      	orrs	r4, r1
 800064a:	0192      	lsls	r2, r2, #6
 800064c:	4314      	orrs	r4, r2
 800064e:	0112      	lsls	r2, r2, #4
 8000650:	d50e      	bpl.n	8000670 <__aeabi_fmul+0x250>
 8000652:	2301      	movs	r3, #1
 8000654:	0862      	lsrs	r2, r4, #1
 8000656:	401c      	ands	r4, r3
 8000658:	4314      	orrs	r4, r2
 800065a:	e749      	b.n	80004f0 <__aeabi_fmul+0xd0>
 800065c:	003e      	movs	r6, r7
 800065e:	46a1      	mov	r9, r4
 8000660:	2280      	movs	r2, #128	@ 0x80
 8000662:	464b      	mov	r3, r9
 8000664:	03d2      	lsls	r2, r2, #15
 8000666:	431a      	orrs	r2, r3
 8000668:	0252      	lsls	r2, r2, #9
 800066a:	20ff      	movs	r0, #255	@ 0xff
 800066c:	0a52      	lsrs	r2, r2, #9
 800066e:	e714      	b.n	800049a <__aeabi_fmul+0x7a>
 8000670:	001d      	movs	r5, r3
 8000672:	e73d      	b.n	80004f0 <__aeabi_fmul+0xd0>
 8000674:	0192      	lsls	r2, r2, #6
 8000676:	2000      	movs	r0, #0
 8000678:	0a52      	lsrs	r2, r2, #9
 800067a:	e70e      	b.n	800049a <__aeabi_fmul+0x7a>
 800067c:	290f      	cmp	r1, #15
 800067e:	d1ed      	bne.n	800065c <__aeabi_fmul+0x23c>
 8000680:	2280      	movs	r2, #128	@ 0x80
 8000682:	464b      	mov	r3, r9
 8000684:	03d2      	lsls	r2, r2, #15
 8000686:	4213      	tst	r3, r2
 8000688:	d0ea      	beq.n	8000660 <__aeabi_fmul+0x240>
 800068a:	4214      	tst	r4, r2
 800068c:	d1e8      	bne.n	8000660 <__aeabi_fmul+0x240>
 800068e:	003e      	movs	r6, r7
 8000690:	20ff      	movs	r0, #255	@ 0xff
 8000692:	4322      	orrs	r2, r4
 8000694:	e701      	b.n	800049a <__aeabi_fmul+0x7a>
 8000696:	46c0      	nop			@ (mov r8, r8)
 8000698:	f7ffffff 	.word	0xf7ffffff

0800069c <__aeabi_f2iz>:
 800069c:	0241      	lsls	r1, r0, #9
 800069e:	0042      	lsls	r2, r0, #1
 80006a0:	0fc3      	lsrs	r3, r0, #31
 80006a2:	0a49      	lsrs	r1, r1, #9
 80006a4:	2000      	movs	r0, #0
 80006a6:	0e12      	lsrs	r2, r2, #24
 80006a8:	2a7e      	cmp	r2, #126	@ 0x7e
 80006aa:	dd03      	ble.n	80006b4 <__aeabi_f2iz+0x18>
 80006ac:	2a9d      	cmp	r2, #157	@ 0x9d
 80006ae:	dd02      	ble.n	80006b6 <__aeabi_f2iz+0x1a>
 80006b0:	4a09      	ldr	r2, [pc, #36]	@ (80006d8 <__aeabi_f2iz+0x3c>)
 80006b2:	1898      	adds	r0, r3, r2
 80006b4:	4770      	bx	lr
 80006b6:	2080      	movs	r0, #128	@ 0x80
 80006b8:	0400      	lsls	r0, r0, #16
 80006ba:	4301      	orrs	r1, r0
 80006bc:	2a95      	cmp	r2, #149	@ 0x95
 80006be:	dc07      	bgt.n	80006d0 <__aeabi_f2iz+0x34>
 80006c0:	2096      	movs	r0, #150	@ 0x96
 80006c2:	1a82      	subs	r2, r0, r2
 80006c4:	40d1      	lsrs	r1, r2
 80006c6:	4248      	negs	r0, r1
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d1f3      	bne.n	80006b4 <__aeabi_f2iz+0x18>
 80006cc:	0008      	movs	r0, r1
 80006ce:	e7f1      	b.n	80006b4 <__aeabi_f2iz+0x18>
 80006d0:	3a96      	subs	r2, #150	@ 0x96
 80006d2:	4091      	lsls	r1, r2
 80006d4:	e7f7      	b.n	80006c6 <__aeabi_f2iz+0x2a>
 80006d6:	46c0      	nop			@ (mov r8, r8)
 80006d8:	7fffffff 	.word	0x7fffffff

080006dc <__aeabi_i2f>:
 80006dc:	b570      	push	{r4, r5, r6, lr}
 80006de:	2800      	cmp	r0, #0
 80006e0:	d013      	beq.n	800070a <__aeabi_i2f+0x2e>
 80006e2:	17c3      	asrs	r3, r0, #31
 80006e4:	18c5      	adds	r5, r0, r3
 80006e6:	405d      	eors	r5, r3
 80006e8:	0fc4      	lsrs	r4, r0, #31
 80006ea:	0028      	movs	r0, r5
 80006ec:	f000 ff3a 	bl	8001564 <__clzsi2>
 80006f0:	239e      	movs	r3, #158	@ 0x9e
 80006f2:	0001      	movs	r1, r0
 80006f4:	1a1b      	subs	r3, r3, r0
 80006f6:	2b96      	cmp	r3, #150	@ 0x96
 80006f8:	dc0f      	bgt.n	800071a <__aeabi_i2f+0x3e>
 80006fa:	2808      	cmp	r0, #8
 80006fc:	d034      	beq.n	8000768 <__aeabi_i2f+0x8c>
 80006fe:	3908      	subs	r1, #8
 8000700:	408d      	lsls	r5, r1
 8000702:	026d      	lsls	r5, r5, #9
 8000704:	0a6d      	lsrs	r5, r5, #9
 8000706:	b2d8      	uxtb	r0, r3
 8000708:	e002      	b.n	8000710 <__aeabi_i2f+0x34>
 800070a:	2400      	movs	r4, #0
 800070c:	2000      	movs	r0, #0
 800070e:	2500      	movs	r5, #0
 8000710:	05c0      	lsls	r0, r0, #23
 8000712:	4328      	orrs	r0, r5
 8000714:	07e4      	lsls	r4, r4, #31
 8000716:	4320      	orrs	r0, r4
 8000718:	bd70      	pop	{r4, r5, r6, pc}
 800071a:	2b99      	cmp	r3, #153	@ 0x99
 800071c:	dc16      	bgt.n	800074c <__aeabi_i2f+0x70>
 800071e:	1f42      	subs	r2, r0, #5
 8000720:	2805      	cmp	r0, #5
 8000722:	d000      	beq.n	8000726 <__aeabi_i2f+0x4a>
 8000724:	4095      	lsls	r5, r2
 8000726:	002a      	movs	r2, r5
 8000728:	4811      	ldr	r0, [pc, #68]	@ (8000770 <__aeabi_i2f+0x94>)
 800072a:	4002      	ands	r2, r0
 800072c:	076e      	lsls	r6, r5, #29
 800072e:	d009      	beq.n	8000744 <__aeabi_i2f+0x68>
 8000730:	260f      	movs	r6, #15
 8000732:	4035      	ands	r5, r6
 8000734:	2d04      	cmp	r5, #4
 8000736:	d005      	beq.n	8000744 <__aeabi_i2f+0x68>
 8000738:	3204      	adds	r2, #4
 800073a:	0155      	lsls	r5, r2, #5
 800073c:	d502      	bpl.n	8000744 <__aeabi_i2f+0x68>
 800073e:	239f      	movs	r3, #159	@ 0x9f
 8000740:	4002      	ands	r2, r0
 8000742:	1a5b      	subs	r3, r3, r1
 8000744:	0192      	lsls	r2, r2, #6
 8000746:	0a55      	lsrs	r5, r2, #9
 8000748:	b2d8      	uxtb	r0, r3
 800074a:	e7e1      	b.n	8000710 <__aeabi_i2f+0x34>
 800074c:	2205      	movs	r2, #5
 800074e:	1a12      	subs	r2, r2, r0
 8000750:	0028      	movs	r0, r5
 8000752:	40d0      	lsrs	r0, r2
 8000754:	0002      	movs	r2, r0
 8000756:	0008      	movs	r0, r1
 8000758:	301b      	adds	r0, #27
 800075a:	4085      	lsls	r5, r0
 800075c:	0028      	movs	r0, r5
 800075e:	1e45      	subs	r5, r0, #1
 8000760:	41a8      	sbcs	r0, r5
 8000762:	4302      	orrs	r2, r0
 8000764:	0015      	movs	r5, r2
 8000766:	e7de      	b.n	8000726 <__aeabi_i2f+0x4a>
 8000768:	026d      	lsls	r5, r5, #9
 800076a:	2096      	movs	r0, #150	@ 0x96
 800076c:	0a6d      	lsrs	r5, r5, #9
 800076e:	e7cf      	b.n	8000710 <__aeabi_i2f+0x34>
 8000770:	fbffffff 	.word	0xfbffffff

08000774 <__aeabi_dadd>:
 8000774:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000776:	4657      	mov	r7, sl
 8000778:	464e      	mov	r6, r9
 800077a:	4645      	mov	r5, r8
 800077c:	46de      	mov	lr, fp
 800077e:	b5e0      	push	{r5, r6, r7, lr}
 8000780:	b083      	sub	sp, #12
 8000782:	9000      	str	r0, [sp, #0]
 8000784:	9101      	str	r1, [sp, #4]
 8000786:	030c      	lsls	r4, r1, #12
 8000788:	004f      	lsls	r7, r1, #1
 800078a:	0fce      	lsrs	r6, r1, #31
 800078c:	0a61      	lsrs	r1, r4, #9
 800078e:	9c00      	ldr	r4, [sp, #0]
 8000790:	031d      	lsls	r5, r3, #12
 8000792:	0f64      	lsrs	r4, r4, #29
 8000794:	430c      	orrs	r4, r1
 8000796:	9900      	ldr	r1, [sp, #0]
 8000798:	9200      	str	r2, [sp, #0]
 800079a:	9301      	str	r3, [sp, #4]
 800079c:	00c8      	lsls	r0, r1, #3
 800079e:	0059      	lsls	r1, r3, #1
 80007a0:	0d4b      	lsrs	r3, r1, #21
 80007a2:	4699      	mov	r9, r3
 80007a4:	9a00      	ldr	r2, [sp, #0]
 80007a6:	9b01      	ldr	r3, [sp, #4]
 80007a8:	0a6d      	lsrs	r5, r5, #9
 80007aa:	0fd9      	lsrs	r1, r3, #31
 80007ac:	0f53      	lsrs	r3, r2, #29
 80007ae:	432b      	orrs	r3, r5
 80007b0:	469a      	mov	sl, r3
 80007b2:	9b00      	ldr	r3, [sp, #0]
 80007b4:	0d7f      	lsrs	r7, r7, #21
 80007b6:	00da      	lsls	r2, r3, #3
 80007b8:	4694      	mov	ip, r2
 80007ba:	464a      	mov	r2, r9
 80007bc:	46b0      	mov	r8, r6
 80007be:	1aba      	subs	r2, r7, r2
 80007c0:	428e      	cmp	r6, r1
 80007c2:	d100      	bne.n	80007c6 <__aeabi_dadd+0x52>
 80007c4:	e0b0      	b.n	8000928 <__aeabi_dadd+0x1b4>
 80007c6:	2a00      	cmp	r2, #0
 80007c8:	dc00      	bgt.n	80007cc <__aeabi_dadd+0x58>
 80007ca:	e078      	b.n	80008be <__aeabi_dadd+0x14a>
 80007cc:	4649      	mov	r1, r9
 80007ce:	2900      	cmp	r1, #0
 80007d0:	d100      	bne.n	80007d4 <__aeabi_dadd+0x60>
 80007d2:	e0e9      	b.n	80009a8 <__aeabi_dadd+0x234>
 80007d4:	49c9      	ldr	r1, [pc, #804]	@ (8000afc <__aeabi_dadd+0x388>)
 80007d6:	428f      	cmp	r7, r1
 80007d8:	d100      	bne.n	80007dc <__aeabi_dadd+0x68>
 80007da:	e195      	b.n	8000b08 <__aeabi_dadd+0x394>
 80007dc:	2501      	movs	r5, #1
 80007de:	2a38      	cmp	r2, #56	@ 0x38
 80007e0:	dc16      	bgt.n	8000810 <__aeabi_dadd+0x9c>
 80007e2:	2180      	movs	r1, #128	@ 0x80
 80007e4:	4653      	mov	r3, sl
 80007e6:	0409      	lsls	r1, r1, #16
 80007e8:	430b      	orrs	r3, r1
 80007ea:	469a      	mov	sl, r3
 80007ec:	2a1f      	cmp	r2, #31
 80007ee:	dd00      	ble.n	80007f2 <__aeabi_dadd+0x7e>
 80007f0:	e1e7      	b.n	8000bc2 <__aeabi_dadd+0x44e>
 80007f2:	2120      	movs	r1, #32
 80007f4:	4655      	mov	r5, sl
 80007f6:	1a8b      	subs	r3, r1, r2
 80007f8:	4661      	mov	r1, ip
 80007fa:	409d      	lsls	r5, r3
 80007fc:	40d1      	lsrs	r1, r2
 80007fe:	430d      	orrs	r5, r1
 8000800:	4661      	mov	r1, ip
 8000802:	4099      	lsls	r1, r3
 8000804:	1e4b      	subs	r3, r1, #1
 8000806:	4199      	sbcs	r1, r3
 8000808:	4653      	mov	r3, sl
 800080a:	40d3      	lsrs	r3, r2
 800080c:	430d      	orrs	r5, r1
 800080e:	1ae4      	subs	r4, r4, r3
 8000810:	1b45      	subs	r5, r0, r5
 8000812:	42a8      	cmp	r0, r5
 8000814:	4180      	sbcs	r0, r0
 8000816:	4240      	negs	r0, r0
 8000818:	1a24      	subs	r4, r4, r0
 800081a:	0223      	lsls	r3, r4, #8
 800081c:	d400      	bmi.n	8000820 <__aeabi_dadd+0xac>
 800081e:	e10f      	b.n	8000a40 <__aeabi_dadd+0x2cc>
 8000820:	0264      	lsls	r4, r4, #9
 8000822:	0a64      	lsrs	r4, r4, #9
 8000824:	2c00      	cmp	r4, #0
 8000826:	d100      	bne.n	800082a <__aeabi_dadd+0xb6>
 8000828:	e139      	b.n	8000a9e <__aeabi_dadd+0x32a>
 800082a:	0020      	movs	r0, r4
 800082c:	f000 fe9a 	bl	8001564 <__clzsi2>
 8000830:	0003      	movs	r3, r0
 8000832:	3b08      	subs	r3, #8
 8000834:	2120      	movs	r1, #32
 8000836:	0028      	movs	r0, r5
 8000838:	1aca      	subs	r2, r1, r3
 800083a:	40d0      	lsrs	r0, r2
 800083c:	409c      	lsls	r4, r3
 800083e:	0002      	movs	r2, r0
 8000840:	409d      	lsls	r5, r3
 8000842:	4322      	orrs	r2, r4
 8000844:	429f      	cmp	r7, r3
 8000846:	dd00      	ble.n	800084a <__aeabi_dadd+0xd6>
 8000848:	e173      	b.n	8000b32 <__aeabi_dadd+0x3be>
 800084a:	1bd8      	subs	r0, r3, r7
 800084c:	3001      	adds	r0, #1
 800084e:	1a09      	subs	r1, r1, r0
 8000850:	002c      	movs	r4, r5
 8000852:	408d      	lsls	r5, r1
 8000854:	40c4      	lsrs	r4, r0
 8000856:	1e6b      	subs	r3, r5, #1
 8000858:	419d      	sbcs	r5, r3
 800085a:	0013      	movs	r3, r2
 800085c:	40c2      	lsrs	r2, r0
 800085e:	408b      	lsls	r3, r1
 8000860:	4325      	orrs	r5, r4
 8000862:	2700      	movs	r7, #0
 8000864:	0014      	movs	r4, r2
 8000866:	431d      	orrs	r5, r3
 8000868:	076b      	lsls	r3, r5, #29
 800086a:	d009      	beq.n	8000880 <__aeabi_dadd+0x10c>
 800086c:	230f      	movs	r3, #15
 800086e:	402b      	ands	r3, r5
 8000870:	2b04      	cmp	r3, #4
 8000872:	d005      	beq.n	8000880 <__aeabi_dadd+0x10c>
 8000874:	1d2b      	adds	r3, r5, #4
 8000876:	42ab      	cmp	r3, r5
 8000878:	41ad      	sbcs	r5, r5
 800087a:	426d      	negs	r5, r5
 800087c:	1964      	adds	r4, r4, r5
 800087e:	001d      	movs	r5, r3
 8000880:	0223      	lsls	r3, r4, #8
 8000882:	d400      	bmi.n	8000886 <__aeabi_dadd+0x112>
 8000884:	e12d      	b.n	8000ae2 <__aeabi_dadd+0x36e>
 8000886:	4a9d      	ldr	r2, [pc, #628]	@ (8000afc <__aeabi_dadd+0x388>)
 8000888:	3701      	adds	r7, #1
 800088a:	4297      	cmp	r7, r2
 800088c:	d100      	bne.n	8000890 <__aeabi_dadd+0x11c>
 800088e:	e0d3      	b.n	8000a38 <__aeabi_dadd+0x2c4>
 8000890:	4646      	mov	r6, r8
 8000892:	499b      	ldr	r1, [pc, #620]	@ (8000b00 <__aeabi_dadd+0x38c>)
 8000894:	08ed      	lsrs	r5, r5, #3
 8000896:	4021      	ands	r1, r4
 8000898:	074a      	lsls	r2, r1, #29
 800089a:	432a      	orrs	r2, r5
 800089c:	057c      	lsls	r4, r7, #21
 800089e:	024d      	lsls	r5, r1, #9
 80008a0:	0b2d      	lsrs	r5, r5, #12
 80008a2:	0d64      	lsrs	r4, r4, #21
 80008a4:	0524      	lsls	r4, r4, #20
 80008a6:	432c      	orrs	r4, r5
 80008a8:	07f6      	lsls	r6, r6, #31
 80008aa:	4334      	orrs	r4, r6
 80008ac:	0010      	movs	r0, r2
 80008ae:	0021      	movs	r1, r4
 80008b0:	b003      	add	sp, #12
 80008b2:	bcf0      	pop	{r4, r5, r6, r7}
 80008b4:	46bb      	mov	fp, r7
 80008b6:	46b2      	mov	sl, r6
 80008b8:	46a9      	mov	r9, r5
 80008ba:	46a0      	mov	r8, r4
 80008bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80008be:	2a00      	cmp	r2, #0
 80008c0:	d100      	bne.n	80008c4 <__aeabi_dadd+0x150>
 80008c2:	e084      	b.n	80009ce <__aeabi_dadd+0x25a>
 80008c4:	464a      	mov	r2, r9
 80008c6:	1bd2      	subs	r2, r2, r7
 80008c8:	2f00      	cmp	r7, #0
 80008ca:	d000      	beq.n	80008ce <__aeabi_dadd+0x15a>
 80008cc:	e16d      	b.n	8000baa <__aeabi_dadd+0x436>
 80008ce:	0025      	movs	r5, r4
 80008d0:	4305      	orrs	r5, r0
 80008d2:	d100      	bne.n	80008d6 <__aeabi_dadd+0x162>
 80008d4:	e127      	b.n	8000b26 <__aeabi_dadd+0x3b2>
 80008d6:	1e56      	subs	r6, r2, #1
 80008d8:	2a01      	cmp	r2, #1
 80008da:	d100      	bne.n	80008de <__aeabi_dadd+0x16a>
 80008dc:	e23b      	b.n	8000d56 <__aeabi_dadd+0x5e2>
 80008de:	4d87      	ldr	r5, [pc, #540]	@ (8000afc <__aeabi_dadd+0x388>)
 80008e0:	42aa      	cmp	r2, r5
 80008e2:	d100      	bne.n	80008e6 <__aeabi_dadd+0x172>
 80008e4:	e26a      	b.n	8000dbc <__aeabi_dadd+0x648>
 80008e6:	2501      	movs	r5, #1
 80008e8:	2e38      	cmp	r6, #56	@ 0x38
 80008ea:	dc12      	bgt.n	8000912 <__aeabi_dadd+0x19e>
 80008ec:	0032      	movs	r2, r6
 80008ee:	2a1f      	cmp	r2, #31
 80008f0:	dd00      	ble.n	80008f4 <__aeabi_dadd+0x180>
 80008f2:	e1f8      	b.n	8000ce6 <__aeabi_dadd+0x572>
 80008f4:	2620      	movs	r6, #32
 80008f6:	0025      	movs	r5, r4
 80008f8:	1ab6      	subs	r6, r6, r2
 80008fa:	0007      	movs	r7, r0
 80008fc:	4653      	mov	r3, sl
 80008fe:	40b0      	lsls	r0, r6
 8000900:	40d4      	lsrs	r4, r2
 8000902:	40b5      	lsls	r5, r6
 8000904:	40d7      	lsrs	r7, r2
 8000906:	1e46      	subs	r6, r0, #1
 8000908:	41b0      	sbcs	r0, r6
 800090a:	1b1b      	subs	r3, r3, r4
 800090c:	469a      	mov	sl, r3
 800090e:	433d      	orrs	r5, r7
 8000910:	4305      	orrs	r5, r0
 8000912:	4662      	mov	r2, ip
 8000914:	1b55      	subs	r5, r2, r5
 8000916:	45ac      	cmp	ip, r5
 8000918:	4192      	sbcs	r2, r2
 800091a:	4653      	mov	r3, sl
 800091c:	4252      	negs	r2, r2
 800091e:	000e      	movs	r6, r1
 8000920:	464f      	mov	r7, r9
 8000922:	4688      	mov	r8, r1
 8000924:	1a9c      	subs	r4, r3, r2
 8000926:	e778      	b.n	800081a <__aeabi_dadd+0xa6>
 8000928:	2a00      	cmp	r2, #0
 800092a:	dc00      	bgt.n	800092e <__aeabi_dadd+0x1ba>
 800092c:	e08e      	b.n	8000a4c <__aeabi_dadd+0x2d8>
 800092e:	4649      	mov	r1, r9
 8000930:	2900      	cmp	r1, #0
 8000932:	d175      	bne.n	8000a20 <__aeabi_dadd+0x2ac>
 8000934:	4661      	mov	r1, ip
 8000936:	4653      	mov	r3, sl
 8000938:	4319      	orrs	r1, r3
 800093a:	d100      	bne.n	800093e <__aeabi_dadd+0x1ca>
 800093c:	e0f6      	b.n	8000b2c <__aeabi_dadd+0x3b8>
 800093e:	1e51      	subs	r1, r2, #1
 8000940:	2a01      	cmp	r2, #1
 8000942:	d100      	bne.n	8000946 <__aeabi_dadd+0x1d2>
 8000944:	e191      	b.n	8000c6a <__aeabi_dadd+0x4f6>
 8000946:	4d6d      	ldr	r5, [pc, #436]	@ (8000afc <__aeabi_dadd+0x388>)
 8000948:	42aa      	cmp	r2, r5
 800094a:	d100      	bne.n	800094e <__aeabi_dadd+0x1da>
 800094c:	e0dc      	b.n	8000b08 <__aeabi_dadd+0x394>
 800094e:	2501      	movs	r5, #1
 8000950:	2938      	cmp	r1, #56	@ 0x38
 8000952:	dc14      	bgt.n	800097e <__aeabi_dadd+0x20a>
 8000954:	000a      	movs	r2, r1
 8000956:	2a1f      	cmp	r2, #31
 8000958:	dd00      	ble.n	800095c <__aeabi_dadd+0x1e8>
 800095a:	e1a2      	b.n	8000ca2 <__aeabi_dadd+0x52e>
 800095c:	2120      	movs	r1, #32
 800095e:	4653      	mov	r3, sl
 8000960:	1a89      	subs	r1, r1, r2
 8000962:	408b      	lsls	r3, r1
 8000964:	001d      	movs	r5, r3
 8000966:	4663      	mov	r3, ip
 8000968:	40d3      	lsrs	r3, r2
 800096a:	431d      	orrs	r5, r3
 800096c:	4663      	mov	r3, ip
 800096e:	408b      	lsls	r3, r1
 8000970:	0019      	movs	r1, r3
 8000972:	1e4b      	subs	r3, r1, #1
 8000974:	4199      	sbcs	r1, r3
 8000976:	4653      	mov	r3, sl
 8000978:	40d3      	lsrs	r3, r2
 800097a:	430d      	orrs	r5, r1
 800097c:	18e4      	adds	r4, r4, r3
 800097e:	182d      	adds	r5, r5, r0
 8000980:	4285      	cmp	r5, r0
 8000982:	4180      	sbcs	r0, r0
 8000984:	4240      	negs	r0, r0
 8000986:	1824      	adds	r4, r4, r0
 8000988:	0223      	lsls	r3, r4, #8
 800098a:	d559      	bpl.n	8000a40 <__aeabi_dadd+0x2cc>
 800098c:	4b5b      	ldr	r3, [pc, #364]	@ (8000afc <__aeabi_dadd+0x388>)
 800098e:	3701      	adds	r7, #1
 8000990:	429f      	cmp	r7, r3
 8000992:	d051      	beq.n	8000a38 <__aeabi_dadd+0x2c4>
 8000994:	2101      	movs	r1, #1
 8000996:	4b5a      	ldr	r3, [pc, #360]	@ (8000b00 <__aeabi_dadd+0x38c>)
 8000998:	086a      	lsrs	r2, r5, #1
 800099a:	401c      	ands	r4, r3
 800099c:	4029      	ands	r1, r5
 800099e:	430a      	orrs	r2, r1
 80009a0:	07e5      	lsls	r5, r4, #31
 80009a2:	4315      	orrs	r5, r2
 80009a4:	0864      	lsrs	r4, r4, #1
 80009a6:	e75f      	b.n	8000868 <__aeabi_dadd+0xf4>
 80009a8:	4661      	mov	r1, ip
 80009aa:	4653      	mov	r3, sl
 80009ac:	4319      	orrs	r1, r3
 80009ae:	d100      	bne.n	80009b2 <__aeabi_dadd+0x23e>
 80009b0:	e0bc      	b.n	8000b2c <__aeabi_dadd+0x3b8>
 80009b2:	1e51      	subs	r1, r2, #1
 80009b4:	2a01      	cmp	r2, #1
 80009b6:	d100      	bne.n	80009ba <__aeabi_dadd+0x246>
 80009b8:	e164      	b.n	8000c84 <__aeabi_dadd+0x510>
 80009ba:	4d50      	ldr	r5, [pc, #320]	@ (8000afc <__aeabi_dadd+0x388>)
 80009bc:	42aa      	cmp	r2, r5
 80009be:	d100      	bne.n	80009c2 <__aeabi_dadd+0x24e>
 80009c0:	e16a      	b.n	8000c98 <__aeabi_dadd+0x524>
 80009c2:	2501      	movs	r5, #1
 80009c4:	2938      	cmp	r1, #56	@ 0x38
 80009c6:	dd00      	ble.n	80009ca <__aeabi_dadd+0x256>
 80009c8:	e722      	b.n	8000810 <__aeabi_dadd+0x9c>
 80009ca:	000a      	movs	r2, r1
 80009cc:	e70e      	b.n	80007ec <__aeabi_dadd+0x78>
 80009ce:	4a4d      	ldr	r2, [pc, #308]	@ (8000b04 <__aeabi_dadd+0x390>)
 80009d0:	1c7d      	adds	r5, r7, #1
 80009d2:	4215      	tst	r5, r2
 80009d4:	d000      	beq.n	80009d8 <__aeabi_dadd+0x264>
 80009d6:	e0d0      	b.n	8000b7a <__aeabi_dadd+0x406>
 80009d8:	0025      	movs	r5, r4
 80009da:	4662      	mov	r2, ip
 80009dc:	4653      	mov	r3, sl
 80009de:	4305      	orrs	r5, r0
 80009e0:	431a      	orrs	r2, r3
 80009e2:	2f00      	cmp	r7, #0
 80009e4:	d000      	beq.n	80009e8 <__aeabi_dadd+0x274>
 80009e6:	e137      	b.n	8000c58 <__aeabi_dadd+0x4e4>
 80009e8:	2d00      	cmp	r5, #0
 80009ea:	d100      	bne.n	80009ee <__aeabi_dadd+0x27a>
 80009ec:	e1a8      	b.n	8000d40 <__aeabi_dadd+0x5cc>
 80009ee:	2a00      	cmp	r2, #0
 80009f0:	d100      	bne.n	80009f4 <__aeabi_dadd+0x280>
 80009f2:	e16a      	b.n	8000cca <__aeabi_dadd+0x556>
 80009f4:	4663      	mov	r3, ip
 80009f6:	1ac5      	subs	r5, r0, r3
 80009f8:	4653      	mov	r3, sl
 80009fa:	1ae2      	subs	r2, r4, r3
 80009fc:	42a8      	cmp	r0, r5
 80009fe:	419b      	sbcs	r3, r3
 8000a00:	425b      	negs	r3, r3
 8000a02:	1ad3      	subs	r3, r2, r3
 8000a04:	021a      	lsls	r2, r3, #8
 8000a06:	d400      	bmi.n	8000a0a <__aeabi_dadd+0x296>
 8000a08:	e203      	b.n	8000e12 <__aeabi_dadd+0x69e>
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	1a1d      	subs	r5, r3, r0
 8000a0e:	45ac      	cmp	ip, r5
 8000a10:	4192      	sbcs	r2, r2
 8000a12:	4653      	mov	r3, sl
 8000a14:	4252      	negs	r2, r2
 8000a16:	1b1c      	subs	r4, r3, r4
 8000a18:	000e      	movs	r6, r1
 8000a1a:	4688      	mov	r8, r1
 8000a1c:	1aa4      	subs	r4, r4, r2
 8000a1e:	e723      	b.n	8000868 <__aeabi_dadd+0xf4>
 8000a20:	4936      	ldr	r1, [pc, #216]	@ (8000afc <__aeabi_dadd+0x388>)
 8000a22:	428f      	cmp	r7, r1
 8000a24:	d070      	beq.n	8000b08 <__aeabi_dadd+0x394>
 8000a26:	2501      	movs	r5, #1
 8000a28:	2a38      	cmp	r2, #56	@ 0x38
 8000a2a:	dca8      	bgt.n	800097e <__aeabi_dadd+0x20a>
 8000a2c:	2180      	movs	r1, #128	@ 0x80
 8000a2e:	4653      	mov	r3, sl
 8000a30:	0409      	lsls	r1, r1, #16
 8000a32:	430b      	orrs	r3, r1
 8000a34:	469a      	mov	sl, r3
 8000a36:	e78e      	b.n	8000956 <__aeabi_dadd+0x1e2>
 8000a38:	003c      	movs	r4, r7
 8000a3a:	2500      	movs	r5, #0
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	e731      	b.n	80008a4 <__aeabi_dadd+0x130>
 8000a40:	2307      	movs	r3, #7
 8000a42:	402b      	ands	r3, r5
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d000      	beq.n	8000a4a <__aeabi_dadd+0x2d6>
 8000a48:	e710      	b.n	800086c <__aeabi_dadd+0xf8>
 8000a4a:	e093      	b.n	8000b74 <__aeabi_dadd+0x400>
 8000a4c:	2a00      	cmp	r2, #0
 8000a4e:	d074      	beq.n	8000b3a <__aeabi_dadd+0x3c6>
 8000a50:	464a      	mov	r2, r9
 8000a52:	1bd2      	subs	r2, r2, r7
 8000a54:	2f00      	cmp	r7, #0
 8000a56:	d100      	bne.n	8000a5a <__aeabi_dadd+0x2e6>
 8000a58:	e0c7      	b.n	8000bea <__aeabi_dadd+0x476>
 8000a5a:	4928      	ldr	r1, [pc, #160]	@ (8000afc <__aeabi_dadd+0x388>)
 8000a5c:	4589      	cmp	r9, r1
 8000a5e:	d100      	bne.n	8000a62 <__aeabi_dadd+0x2ee>
 8000a60:	e185      	b.n	8000d6e <__aeabi_dadd+0x5fa>
 8000a62:	2501      	movs	r5, #1
 8000a64:	2a38      	cmp	r2, #56	@ 0x38
 8000a66:	dc12      	bgt.n	8000a8e <__aeabi_dadd+0x31a>
 8000a68:	2180      	movs	r1, #128	@ 0x80
 8000a6a:	0409      	lsls	r1, r1, #16
 8000a6c:	430c      	orrs	r4, r1
 8000a6e:	2a1f      	cmp	r2, #31
 8000a70:	dd00      	ble.n	8000a74 <__aeabi_dadd+0x300>
 8000a72:	e1ab      	b.n	8000dcc <__aeabi_dadd+0x658>
 8000a74:	2120      	movs	r1, #32
 8000a76:	0025      	movs	r5, r4
 8000a78:	1a89      	subs	r1, r1, r2
 8000a7a:	0007      	movs	r7, r0
 8000a7c:	4088      	lsls	r0, r1
 8000a7e:	408d      	lsls	r5, r1
 8000a80:	40d7      	lsrs	r7, r2
 8000a82:	1e41      	subs	r1, r0, #1
 8000a84:	4188      	sbcs	r0, r1
 8000a86:	40d4      	lsrs	r4, r2
 8000a88:	433d      	orrs	r5, r7
 8000a8a:	4305      	orrs	r5, r0
 8000a8c:	44a2      	add	sl, r4
 8000a8e:	4465      	add	r5, ip
 8000a90:	4565      	cmp	r5, ip
 8000a92:	4192      	sbcs	r2, r2
 8000a94:	4252      	negs	r2, r2
 8000a96:	4452      	add	r2, sl
 8000a98:	0014      	movs	r4, r2
 8000a9a:	464f      	mov	r7, r9
 8000a9c:	e774      	b.n	8000988 <__aeabi_dadd+0x214>
 8000a9e:	0028      	movs	r0, r5
 8000aa0:	f000 fd60 	bl	8001564 <__clzsi2>
 8000aa4:	0003      	movs	r3, r0
 8000aa6:	3318      	adds	r3, #24
 8000aa8:	2b1f      	cmp	r3, #31
 8000aaa:	dc00      	bgt.n	8000aae <__aeabi_dadd+0x33a>
 8000aac:	e6c2      	b.n	8000834 <__aeabi_dadd+0xc0>
 8000aae:	002a      	movs	r2, r5
 8000ab0:	3808      	subs	r0, #8
 8000ab2:	4082      	lsls	r2, r0
 8000ab4:	429f      	cmp	r7, r3
 8000ab6:	dd00      	ble.n	8000aba <__aeabi_dadd+0x346>
 8000ab8:	e0a9      	b.n	8000c0e <__aeabi_dadd+0x49a>
 8000aba:	1bdb      	subs	r3, r3, r7
 8000abc:	1c58      	adds	r0, r3, #1
 8000abe:	281f      	cmp	r0, #31
 8000ac0:	dc00      	bgt.n	8000ac4 <__aeabi_dadd+0x350>
 8000ac2:	e1ac      	b.n	8000e1e <__aeabi_dadd+0x6aa>
 8000ac4:	0015      	movs	r5, r2
 8000ac6:	3b1f      	subs	r3, #31
 8000ac8:	40dd      	lsrs	r5, r3
 8000aca:	2820      	cmp	r0, #32
 8000acc:	d005      	beq.n	8000ada <__aeabi_dadd+0x366>
 8000ace:	2340      	movs	r3, #64	@ 0x40
 8000ad0:	1a1b      	subs	r3, r3, r0
 8000ad2:	409a      	lsls	r2, r3
 8000ad4:	1e53      	subs	r3, r2, #1
 8000ad6:	419a      	sbcs	r2, r3
 8000ad8:	4315      	orrs	r5, r2
 8000ada:	2307      	movs	r3, #7
 8000adc:	2700      	movs	r7, #0
 8000ade:	402b      	ands	r3, r5
 8000ae0:	e7b0      	b.n	8000a44 <__aeabi_dadd+0x2d0>
 8000ae2:	08ed      	lsrs	r5, r5, #3
 8000ae4:	4b05      	ldr	r3, [pc, #20]	@ (8000afc <__aeabi_dadd+0x388>)
 8000ae6:	0762      	lsls	r2, r4, #29
 8000ae8:	432a      	orrs	r2, r5
 8000aea:	08e4      	lsrs	r4, r4, #3
 8000aec:	429f      	cmp	r7, r3
 8000aee:	d00f      	beq.n	8000b10 <__aeabi_dadd+0x39c>
 8000af0:	0324      	lsls	r4, r4, #12
 8000af2:	0b25      	lsrs	r5, r4, #12
 8000af4:	057c      	lsls	r4, r7, #21
 8000af6:	0d64      	lsrs	r4, r4, #21
 8000af8:	e6d4      	b.n	80008a4 <__aeabi_dadd+0x130>
 8000afa:	46c0      	nop			@ (mov r8, r8)
 8000afc:	000007ff 	.word	0x000007ff
 8000b00:	ff7fffff 	.word	0xff7fffff
 8000b04:	000007fe 	.word	0x000007fe
 8000b08:	08c0      	lsrs	r0, r0, #3
 8000b0a:	0762      	lsls	r2, r4, #29
 8000b0c:	4302      	orrs	r2, r0
 8000b0e:	08e4      	lsrs	r4, r4, #3
 8000b10:	0013      	movs	r3, r2
 8000b12:	4323      	orrs	r3, r4
 8000b14:	d100      	bne.n	8000b18 <__aeabi_dadd+0x3a4>
 8000b16:	e186      	b.n	8000e26 <__aeabi_dadd+0x6b2>
 8000b18:	2580      	movs	r5, #128	@ 0x80
 8000b1a:	032d      	lsls	r5, r5, #12
 8000b1c:	4325      	orrs	r5, r4
 8000b1e:	032d      	lsls	r5, r5, #12
 8000b20:	4cc3      	ldr	r4, [pc, #780]	@ (8000e30 <__aeabi_dadd+0x6bc>)
 8000b22:	0b2d      	lsrs	r5, r5, #12
 8000b24:	e6be      	b.n	80008a4 <__aeabi_dadd+0x130>
 8000b26:	4660      	mov	r0, ip
 8000b28:	4654      	mov	r4, sl
 8000b2a:	000e      	movs	r6, r1
 8000b2c:	0017      	movs	r7, r2
 8000b2e:	08c5      	lsrs	r5, r0, #3
 8000b30:	e7d8      	b.n	8000ae4 <__aeabi_dadd+0x370>
 8000b32:	4cc0      	ldr	r4, [pc, #768]	@ (8000e34 <__aeabi_dadd+0x6c0>)
 8000b34:	1aff      	subs	r7, r7, r3
 8000b36:	4014      	ands	r4, r2
 8000b38:	e696      	b.n	8000868 <__aeabi_dadd+0xf4>
 8000b3a:	4abf      	ldr	r2, [pc, #764]	@ (8000e38 <__aeabi_dadd+0x6c4>)
 8000b3c:	1c79      	adds	r1, r7, #1
 8000b3e:	4211      	tst	r1, r2
 8000b40:	d16b      	bne.n	8000c1a <__aeabi_dadd+0x4a6>
 8000b42:	0022      	movs	r2, r4
 8000b44:	4302      	orrs	r2, r0
 8000b46:	2f00      	cmp	r7, #0
 8000b48:	d000      	beq.n	8000b4c <__aeabi_dadd+0x3d8>
 8000b4a:	e0db      	b.n	8000d04 <__aeabi_dadd+0x590>
 8000b4c:	2a00      	cmp	r2, #0
 8000b4e:	d100      	bne.n	8000b52 <__aeabi_dadd+0x3de>
 8000b50:	e12d      	b.n	8000dae <__aeabi_dadd+0x63a>
 8000b52:	4662      	mov	r2, ip
 8000b54:	4653      	mov	r3, sl
 8000b56:	431a      	orrs	r2, r3
 8000b58:	d100      	bne.n	8000b5c <__aeabi_dadd+0x3e8>
 8000b5a:	e0b6      	b.n	8000cca <__aeabi_dadd+0x556>
 8000b5c:	4663      	mov	r3, ip
 8000b5e:	18c5      	adds	r5, r0, r3
 8000b60:	4285      	cmp	r5, r0
 8000b62:	4180      	sbcs	r0, r0
 8000b64:	4454      	add	r4, sl
 8000b66:	4240      	negs	r0, r0
 8000b68:	1824      	adds	r4, r4, r0
 8000b6a:	0223      	lsls	r3, r4, #8
 8000b6c:	d502      	bpl.n	8000b74 <__aeabi_dadd+0x400>
 8000b6e:	000f      	movs	r7, r1
 8000b70:	4bb0      	ldr	r3, [pc, #704]	@ (8000e34 <__aeabi_dadd+0x6c0>)
 8000b72:	401c      	ands	r4, r3
 8000b74:	003a      	movs	r2, r7
 8000b76:	0028      	movs	r0, r5
 8000b78:	e7d8      	b.n	8000b2c <__aeabi_dadd+0x3b8>
 8000b7a:	4662      	mov	r2, ip
 8000b7c:	1a85      	subs	r5, r0, r2
 8000b7e:	42a8      	cmp	r0, r5
 8000b80:	4192      	sbcs	r2, r2
 8000b82:	4653      	mov	r3, sl
 8000b84:	4252      	negs	r2, r2
 8000b86:	4691      	mov	r9, r2
 8000b88:	1ae3      	subs	r3, r4, r3
 8000b8a:	001a      	movs	r2, r3
 8000b8c:	464b      	mov	r3, r9
 8000b8e:	1ad2      	subs	r2, r2, r3
 8000b90:	0013      	movs	r3, r2
 8000b92:	4691      	mov	r9, r2
 8000b94:	021a      	lsls	r2, r3, #8
 8000b96:	d454      	bmi.n	8000c42 <__aeabi_dadd+0x4ce>
 8000b98:	464a      	mov	r2, r9
 8000b9a:	464c      	mov	r4, r9
 8000b9c:	432a      	orrs	r2, r5
 8000b9e:	d000      	beq.n	8000ba2 <__aeabi_dadd+0x42e>
 8000ba0:	e640      	b.n	8000824 <__aeabi_dadd+0xb0>
 8000ba2:	2600      	movs	r6, #0
 8000ba4:	2400      	movs	r4, #0
 8000ba6:	2500      	movs	r5, #0
 8000ba8:	e67c      	b.n	80008a4 <__aeabi_dadd+0x130>
 8000baa:	4da1      	ldr	r5, [pc, #644]	@ (8000e30 <__aeabi_dadd+0x6bc>)
 8000bac:	45a9      	cmp	r9, r5
 8000bae:	d100      	bne.n	8000bb2 <__aeabi_dadd+0x43e>
 8000bb0:	e090      	b.n	8000cd4 <__aeabi_dadd+0x560>
 8000bb2:	2501      	movs	r5, #1
 8000bb4:	2a38      	cmp	r2, #56	@ 0x38
 8000bb6:	dd00      	ble.n	8000bba <__aeabi_dadd+0x446>
 8000bb8:	e6ab      	b.n	8000912 <__aeabi_dadd+0x19e>
 8000bba:	2580      	movs	r5, #128	@ 0x80
 8000bbc:	042d      	lsls	r5, r5, #16
 8000bbe:	432c      	orrs	r4, r5
 8000bc0:	e695      	b.n	80008ee <__aeabi_dadd+0x17a>
 8000bc2:	0011      	movs	r1, r2
 8000bc4:	4655      	mov	r5, sl
 8000bc6:	3920      	subs	r1, #32
 8000bc8:	40cd      	lsrs	r5, r1
 8000bca:	46a9      	mov	r9, r5
 8000bcc:	2a20      	cmp	r2, #32
 8000bce:	d006      	beq.n	8000bde <__aeabi_dadd+0x46a>
 8000bd0:	2140      	movs	r1, #64	@ 0x40
 8000bd2:	4653      	mov	r3, sl
 8000bd4:	1a8a      	subs	r2, r1, r2
 8000bd6:	4093      	lsls	r3, r2
 8000bd8:	4662      	mov	r2, ip
 8000bda:	431a      	orrs	r2, r3
 8000bdc:	4694      	mov	ip, r2
 8000bde:	4665      	mov	r5, ip
 8000be0:	1e6b      	subs	r3, r5, #1
 8000be2:	419d      	sbcs	r5, r3
 8000be4:	464b      	mov	r3, r9
 8000be6:	431d      	orrs	r5, r3
 8000be8:	e612      	b.n	8000810 <__aeabi_dadd+0x9c>
 8000bea:	0021      	movs	r1, r4
 8000bec:	4301      	orrs	r1, r0
 8000bee:	d100      	bne.n	8000bf2 <__aeabi_dadd+0x47e>
 8000bf0:	e0c4      	b.n	8000d7c <__aeabi_dadd+0x608>
 8000bf2:	1e51      	subs	r1, r2, #1
 8000bf4:	2a01      	cmp	r2, #1
 8000bf6:	d100      	bne.n	8000bfa <__aeabi_dadd+0x486>
 8000bf8:	e0fb      	b.n	8000df2 <__aeabi_dadd+0x67e>
 8000bfa:	4d8d      	ldr	r5, [pc, #564]	@ (8000e30 <__aeabi_dadd+0x6bc>)
 8000bfc:	42aa      	cmp	r2, r5
 8000bfe:	d100      	bne.n	8000c02 <__aeabi_dadd+0x48e>
 8000c00:	e0b5      	b.n	8000d6e <__aeabi_dadd+0x5fa>
 8000c02:	2501      	movs	r5, #1
 8000c04:	2938      	cmp	r1, #56	@ 0x38
 8000c06:	dd00      	ble.n	8000c0a <__aeabi_dadd+0x496>
 8000c08:	e741      	b.n	8000a8e <__aeabi_dadd+0x31a>
 8000c0a:	000a      	movs	r2, r1
 8000c0c:	e72f      	b.n	8000a6e <__aeabi_dadd+0x2fa>
 8000c0e:	4c89      	ldr	r4, [pc, #548]	@ (8000e34 <__aeabi_dadd+0x6c0>)
 8000c10:	1aff      	subs	r7, r7, r3
 8000c12:	4014      	ands	r4, r2
 8000c14:	0762      	lsls	r2, r4, #29
 8000c16:	08e4      	lsrs	r4, r4, #3
 8000c18:	e76a      	b.n	8000af0 <__aeabi_dadd+0x37c>
 8000c1a:	4a85      	ldr	r2, [pc, #532]	@ (8000e30 <__aeabi_dadd+0x6bc>)
 8000c1c:	4291      	cmp	r1, r2
 8000c1e:	d100      	bne.n	8000c22 <__aeabi_dadd+0x4ae>
 8000c20:	e0e3      	b.n	8000dea <__aeabi_dadd+0x676>
 8000c22:	4663      	mov	r3, ip
 8000c24:	18c2      	adds	r2, r0, r3
 8000c26:	4282      	cmp	r2, r0
 8000c28:	4180      	sbcs	r0, r0
 8000c2a:	0023      	movs	r3, r4
 8000c2c:	4240      	negs	r0, r0
 8000c2e:	4453      	add	r3, sl
 8000c30:	181b      	adds	r3, r3, r0
 8000c32:	07dd      	lsls	r5, r3, #31
 8000c34:	085c      	lsrs	r4, r3, #1
 8000c36:	2307      	movs	r3, #7
 8000c38:	0852      	lsrs	r2, r2, #1
 8000c3a:	4315      	orrs	r5, r2
 8000c3c:	000f      	movs	r7, r1
 8000c3e:	402b      	ands	r3, r5
 8000c40:	e700      	b.n	8000a44 <__aeabi_dadd+0x2d0>
 8000c42:	4663      	mov	r3, ip
 8000c44:	1a1d      	subs	r5, r3, r0
 8000c46:	45ac      	cmp	ip, r5
 8000c48:	4192      	sbcs	r2, r2
 8000c4a:	4653      	mov	r3, sl
 8000c4c:	4252      	negs	r2, r2
 8000c4e:	1b1c      	subs	r4, r3, r4
 8000c50:	000e      	movs	r6, r1
 8000c52:	4688      	mov	r8, r1
 8000c54:	1aa4      	subs	r4, r4, r2
 8000c56:	e5e5      	b.n	8000824 <__aeabi_dadd+0xb0>
 8000c58:	2d00      	cmp	r5, #0
 8000c5a:	d000      	beq.n	8000c5e <__aeabi_dadd+0x4ea>
 8000c5c:	e091      	b.n	8000d82 <__aeabi_dadd+0x60e>
 8000c5e:	2a00      	cmp	r2, #0
 8000c60:	d138      	bne.n	8000cd4 <__aeabi_dadd+0x560>
 8000c62:	2480      	movs	r4, #128	@ 0x80
 8000c64:	2600      	movs	r6, #0
 8000c66:	0324      	lsls	r4, r4, #12
 8000c68:	e756      	b.n	8000b18 <__aeabi_dadd+0x3a4>
 8000c6a:	4663      	mov	r3, ip
 8000c6c:	18c5      	adds	r5, r0, r3
 8000c6e:	4285      	cmp	r5, r0
 8000c70:	4180      	sbcs	r0, r0
 8000c72:	4454      	add	r4, sl
 8000c74:	4240      	negs	r0, r0
 8000c76:	1824      	adds	r4, r4, r0
 8000c78:	2701      	movs	r7, #1
 8000c7a:	0223      	lsls	r3, r4, #8
 8000c7c:	d400      	bmi.n	8000c80 <__aeabi_dadd+0x50c>
 8000c7e:	e6df      	b.n	8000a40 <__aeabi_dadd+0x2cc>
 8000c80:	2702      	movs	r7, #2
 8000c82:	e687      	b.n	8000994 <__aeabi_dadd+0x220>
 8000c84:	4663      	mov	r3, ip
 8000c86:	1ac5      	subs	r5, r0, r3
 8000c88:	42a8      	cmp	r0, r5
 8000c8a:	4180      	sbcs	r0, r0
 8000c8c:	4653      	mov	r3, sl
 8000c8e:	4240      	negs	r0, r0
 8000c90:	1ae4      	subs	r4, r4, r3
 8000c92:	2701      	movs	r7, #1
 8000c94:	1a24      	subs	r4, r4, r0
 8000c96:	e5c0      	b.n	800081a <__aeabi_dadd+0xa6>
 8000c98:	0762      	lsls	r2, r4, #29
 8000c9a:	08c0      	lsrs	r0, r0, #3
 8000c9c:	4302      	orrs	r2, r0
 8000c9e:	08e4      	lsrs	r4, r4, #3
 8000ca0:	e736      	b.n	8000b10 <__aeabi_dadd+0x39c>
 8000ca2:	0011      	movs	r1, r2
 8000ca4:	4653      	mov	r3, sl
 8000ca6:	3920      	subs	r1, #32
 8000ca8:	40cb      	lsrs	r3, r1
 8000caa:	4699      	mov	r9, r3
 8000cac:	2a20      	cmp	r2, #32
 8000cae:	d006      	beq.n	8000cbe <__aeabi_dadd+0x54a>
 8000cb0:	2140      	movs	r1, #64	@ 0x40
 8000cb2:	4653      	mov	r3, sl
 8000cb4:	1a8a      	subs	r2, r1, r2
 8000cb6:	4093      	lsls	r3, r2
 8000cb8:	4662      	mov	r2, ip
 8000cba:	431a      	orrs	r2, r3
 8000cbc:	4694      	mov	ip, r2
 8000cbe:	4665      	mov	r5, ip
 8000cc0:	1e6b      	subs	r3, r5, #1
 8000cc2:	419d      	sbcs	r5, r3
 8000cc4:	464b      	mov	r3, r9
 8000cc6:	431d      	orrs	r5, r3
 8000cc8:	e659      	b.n	800097e <__aeabi_dadd+0x20a>
 8000cca:	0762      	lsls	r2, r4, #29
 8000ccc:	08c0      	lsrs	r0, r0, #3
 8000cce:	4302      	orrs	r2, r0
 8000cd0:	08e4      	lsrs	r4, r4, #3
 8000cd2:	e70d      	b.n	8000af0 <__aeabi_dadd+0x37c>
 8000cd4:	4653      	mov	r3, sl
 8000cd6:	075a      	lsls	r2, r3, #29
 8000cd8:	4663      	mov	r3, ip
 8000cda:	08d8      	lsrs	r0, r3, #3
 8000cdc:	4653      	mov	r3, sl
 8000cde:	000e      	movs	r6, r1
 8000ce0:	4302      	orrs	r2, r0
 8000ce2:	08dc      	lsrs	r4, r3, #3
 8000ce4:	e714      	b.n	8000b10 <__aeabi_dadd+0x39c>
 8000ce6:	0015      	movs	r5, r2
 8000ce8:	0026      	movs	r6, r4
 8000cea:	3d20      	subs	r5, #32
 8000cec:	40ee      	lsrs	r6, r5
 8000cee:	2a20      	cmp	r2, #32
 8000cf0:	d003      	beq.n	8000cfa <__aeabi_dadd+0x586>
 8000cf2:	2540      	movs	r5, #64	@ 0x40
 8000cf4:	1aaa      	subs	r2, r5, r2
 8000cf6:	4094      	lsls	r4, r2
 8000cf8:	4320      	orrs	r0, r4
 8000cfa:	1e42      	subs	r2, r0, #1
 8000cfc:	4190      	sbcs	r0, r2
 8000cfe:	0005      	movs	r5, r0
 8000d00:	4335      	orrs	r5, r6
 8000d02:	e606      	b.n	8000912 <__aeabi_dadd+0x19e>
 8000d04:	2a00      	cmp	r2, #0
 8000d06:	d07c      	beq.n	8000e02 <__aeabi_dadd+0x68e>
 8000d08:	4662      	mov	r2, ip
 8000d0a:	4653      	mov	r3, sl
 8000d0c:	08c0      	lsrs	r0, r0, #3
 8000d0e:	431a      	orrs	r2, r3
 8000d10:	d100      	bne.n	8000d14 <__aeabi_dadd+0x5a0>
 8000d12:	e6fa      	b.n	8000b0a <__aeabi_dadd+0x396>
 8000d14:	0762      	lsls	r2, r4, #29
 8000d16:	4310      	orrs	r0, r2
 8000d18:	2280      	movs	r2, #128	@ 0x80
 8000d1a:	08e4      	lsrs	r4, r4, #3
 8000d1c:	0312      	lsls	r2, r2, #12
 8000d1e:	4214      	tst	r4, r2
 8000d20:	d008      	beq.n	8000d34 <__aeabi_dadd+0x5c0>
 8000d22:	08d9      	lsrs	r1, r3, #3
 8000d24:	4211      	tst	r1, r2
 8000d26:	d105      	bne.n	8000d34 <__aeabi_dadd+0x5c0>
 8000d28:	4663      	mov	r3, ip
 8000d2a:	08d8      	lsrs	r0, r3, #3
 8000d2c:	4653      	mov	r3, sl
 8000d2e:	000c      	movs	r4, r1
 8000d30:	075b      	lsls	r3, r3, #29
 8000d32:	4318      	orrs	r0, r3
 8000d34:	0f42      	lsrs	r2, r0, #29
 8000d36:	00c0      	lsls	r0, r0, #3
 8000d38:	08c0      	lsrs	r0, r0, #3
 8000d3a:	0752      	lsls	r2, r2, #29
 8000d3c:	4302      	orrs	r2, r0
 8000d3e:	e6e7      	b.n	8000b10 <__aeabi_dadd+0x39c>
 8000d40:	2a00      	cmp	r2, #0
 8000d42:	d100      	bne.n	8000d46 <__aeabi_dadd+0x5d2>
 8000d44:	e72d      	b.n	8000ba2 <__aeabi_dadd+0x42e>
 8000d46:	4663      	mov	r3, ip
 8000d48:	08d8      	lsrs	r0, r3, #3
 8000d4a:	4653      	mov	r3, sl
 8000d4c:	075a      	lsls	r2, r3, #29
 8000d4e:	000e      	movs	r6, r1
 8000d50:	4302      	orrs	r2, r0
 8000d52:	08dc      	lsrs	r4, r3, #3
 8000d54:	e6cc      	b.n	8000af0 <__aeabi_dadd+0x37c>
 8000d56:	4663      	mov	r3, ip
 8000d58:	1a1d      	subs	r5, r3, r0
 8000d5a:	45ac      	cmp	ip, r5
 8000d5c:	4192      	sbcs	r2, r2
 8000d5e:	4653      	mov	r3, sl
 8000d60:	4252      	negs	r2, r2
 8000d62:	1b1c      	subs	r4, r3, r4
 8000d64:	000e      	movs	r6, r1
 8000d66:	4688      	mov	r8, r1
 8000d68:	1aa4      	subs	r4, r4, r2
 8000d6a:	3701      	adds	r7, #1
 8000d6c:	e555      	b.n	800081a <__aeabi_dadd+0xa6>
 8000d6e:	4663      	mov	r3, ip
 8000d70:	08d9      	lsrs	r1, r3, #3
 8000d72:	4653      	mov	r3, sl
 8000d74:	075a      	lsls	r2, r3, #29
 8000d76:	430a      	orrs	r2, r1
 8000d78:	08dc      	lsrs	r4, r3, #3
 8000d7a:	e6c9      	b.n	8000b10 <__aeabi_dadd+0x39c>
 8000d7c:	4660      	mov	r0, ip
 8000d7e:	4654      	mov	r4, sl
 8000d80:	e6d4      	b.n	8000b2c <__aeabi_dadd+0x3b8>
 8000d82:	08c0      	lsrs	r0, r0, #3
 8000d84:	2a00      	cmp	r2, #0
 8000d86:	d100      	bne.n	8000d8a <__aeabi_dadd+0x616>
 8000d88:	e6bf      	b.n	8000b0a <__aeabi_dadd+0x396>
 8000d8a:	0762      	lsls	r2, r4, #29
 8000d8c:	4310      	orrs	r0, r2
 8000d8e:	2280      	movs	r2, #128	@ 0x80
 8000d90:	08e4      	lsrs	r4, r4, #3
 8000d92:	0312      	lsls	r2, r2, #12
 8000d94:	4214      	tst	r4, r2
 8000d96:	d0cd      	beq.n	8000d34 <__aeabi_dadd+0x5c0>
 8000d98:	08dd      	lsrs	r5, r3, #3
 8000d9a:	4215      	tst	r5, r2
 8000d9c:	d1ca      	bne.n	8000d34 <__aeabi_dadd+0x5c0>
 8000d9e:	4663      	mov	r3, ip
 8000da0:	08d8      	lsrs	r0, r3, #3
 8000da2:	4653      	mov	r3, sl
 8000da4:	075b      	lsls	r3, r3, #29
 8000da6:	000e      	movs	r6, r1
 8000da8:	002c      	movs	r4, r5
 8000daa:	4318      	orrs	r0, r3
 8000dac:	e7c2      	b.n	8000d34 <__aeabi_dadd+0x5c0>
 8000dae:	4663      	mov	r3, ip
 8000db0:	08d9      	lsrs	r1, r3, #3
 8000db2:	4653      	mov	r3, sl
 8000db4:	075a      	lsls	r2, r3, #29
 8000db6:	430a      	orrs	r2, r1
 8000db8:	08dc      	lsrs	r4, r3, #3
 8000dba:	e699      	b.n	8000af0 <__aeabi_dadd+0x37c>
 8000dbc:	4663      	mov	r3, ip
 8000dbe:	08d8      	lsrs	r0, r3, #3
 8000dc0:	4653      	mov	r3, sl
 8000dc2:	075a      	lsls	r2, r3, #29
 8000dc4:	000e      	movs	r6, r1
 8000dc6:	4302      	orrs	r2, r0
 8000dc8:	08dc      	lsrs	r4, r3, #3
 8000dca:	e6a1      	b.n	8000b10 <__aeabi_dadd+0x39c>
 8000dcc:	0011      	movs	r1, r2
 8000dce:	0027      	movs	r7, r4
 8000dd0:	3920      	subs	r1, #32
 8000dd2:	40cf      	lsrs	r7, r1
 8000dd4:	2a20      	cmp	r2, #32
 8000dd6:	d003      	beq.n	8000de0 <__aeabi_dadd+0x66c>
 8000dd8:	2140      	movs	r1, #64	@ 0x40
 8000dda:	1a8a      	subs	r2, r1, r2
 8000ddc:	4094      	lsls	r4, r2
 8000dde:	4320      	orrs	r0, r4
 8000de0:	1e42      	subs	r2, r0, #1
 8000de2:	4190      	sbcs	r0, r2
 8000de4:	0005      	movs	r5, r0
 8000de6:	433d      	orrs	r5, r7
 8000de8:	e651      	b.n	8000a8e <__aeabi_dadd+0x31a>
 8000dea:	000c      	movs	r4, r1
 8000dec:	2500      	movs	r5, #0
 8000dee:	2200      	movs	r2, #0
 8000df0:	e558      	b.n	80008a4 <__aeabi_dadd+0x130>
 8000df2:	4460      	add	r0, ip
 8000df4:	4560      	cmp	r0, ip
 8000df6:	4192      	sbcs	r2, r2
 8000df8:	4454      	add	r4, sl
 8000dfa:	4252      	negs	r2, r2
 8000dfc:	0005      	movs	r5, r0
 8000dfe:	18a4      	adds	r4, r4, r2
 8000e00:	e73a      	b.n	8000c78 <__aeabi_dadd+0x504>
 8000e02:	4653      	mov	r3, sl
 8000e04:	075a      	lsls	r2, r3, #29
 8000e06:	4663      	mov	r3, ip
 8000e08:	08d9      	lsrs	r1, r3, #3
 8000e0a:	4653      	mov	r3, sl
 8000e0c:	430a      	orrs	r2, r1
 8000e0e:	08dc      	lsrs	r4, r3, #3
 8000e10:	e67e      	b.n	8000b10 <__aeabi_dadd+0x39c>
 8000e12:	001a      	movs	r2, r3
 8000e14:	001c      	movs	r4, r3
 8000e16:	432a      	orrs	r2, r5
 8000e18:	d000      	beq.n	8000e1c <__aeabi_dadd+0x6a8>
 8000e1a:	e6ab      	b.n	8000b74 <__aeabi_dadd+0x400>
 8000e1c:	e6c1      	b.n	8000ba2 <__aeabi_dadd+0x42e>
 8000e1e:	2120      	movs	r1, #32
 8000e20:	2500      	movs	r5, #0
 8000e22:	1a09      	subs	r1, r1, r0
 8000e24:	e519      	b.n	800085a <__aeabi_dadd+0xe6>
 8000e26:	2200      	movs	r2, #0
 8000e28:	2500      	movs	r5, #0
 8000e2a:	4c01      	ldr	r4, [pc, #4]	@ (8000e30 <__aeabi_dadd+0x6bc>)
 8000e2c:	e53a      	b.n	80008a4 <__aeabi_dadd+0x130>
 8000e2e:	46c0      	nop			@ (mov r8, r8)
 8000e30:	000007ff 	.word	0x000007ff
 8000e34:	ff7fffff 	.word	0xff7fffff
 8000e38:	000007fe 	.word	0x000007fe

08000e3c <__aeabi_dmul>:
 8000e3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e3e:	4657      	mov	r7, sl
 8000e40:	46de      	mov	lr, fp
 8000e42:	464e      	mov	r6, r9
 8000e44:	4645      	mov	r5, r8
 8000e46:	b5e0      	push	{r5, r6, r7, lr}
 8000e48:	001f      	movs	r7, r3
 8000e4a:	030b      	lsls	r3, r1, #12
 8000e4c:	0b1b      	lsrs	r3, r3, #12
 8000e4e:	0016      	movs	r6, r2
 8000e50:	469a      	mov	sl, r3
 8000e52:	0fca      	lsrs	r2, r1, #31
 8000e54:	004b      	lsls	r3, r1, #1
 8000e56:	0004      	movs	r4, r0
 8000e58:	4693      	mov	fp, r2
 8000e5a:	b087      	sub	sp, #28
 8000e5c:	0d5b      	lsrs	r3, r3, #21
 8000e5e:	d100      	bne.n	8000e62 <__aeabi_dmul+0x26>
 8000e60:	e0d5      	b.n	800100e <__aeabi_dmul+0x1d2>
 8000e62:	4abb      	ldr	r2, [pc, #748]	@ (8001150 <__aeabi_dmul+0x314>)
 8000e64:	4293      	cmp	r3, r2
 8000e66:	d100      	bne.n	8000e6a <__aeabi_dmul+0x2e>
 8000e68:	e0f8      	b.n	800105c <__aeabi_dmul+0x220>
 8000e6a:	4651      	mov	r1, sl
 8000e6c:	0f42      	lsrs	r2, r0, #29
 8000e6e:	00c9      	lsls	r1, r1, #3
 8000e70:	430a      	orrs	r2, r1
 8000e72:	2180      	movs	r1, #128	@ 0x80
 8000e74:	0409      	lsls	r1, r1, #16
 8000e76:	4311      	orrs	r1, r2
 8000e78:	00c2      	lsls	r2, r0, #3
 8000e7a:	4691      	mov	r9, r2
 8000e7c:	4ab5      	ldr	r2, [pc, #724]	@ (8001154 <__aeabi_dmul+0x318>)
 8000e7e:	468a      	mov	sl, r1
 8000e80:	189d      	adds	r5, r3, r2
 8000e82:	2300      	movs	r3, #0
 8000e84:	4698      	mov	r8, r3
 8000e86:	9302      	str	r3, [sp, #8]
 8000e88:	033c      	lsls	r4, r7, #12
 8000e8a:	007b      	lsls	r3, r7, #1
 8000e8c:	0ffa      	lsrs	r2, r7, #31
 8000e8e:	0030      	movs	r0, r6
 8000e90:	0b24      	lsrs	r4, r4, #12
 8000e92:	0d5b      	lsrs	r3, r3, #21
 8000e94:	9200      	str	r2, [sp, #0]
 8000e96:	d100      	bne.n	8000e9a <__aeabi_dmul+0x5e>
 8000e98:	e096      	b.n	8000fc8 <__aeabi_dmul+0x18c>
 8000e9a:	4aad      	ldr	r2, [pc, #692]	@ (8001150 <__aeabi_dmul+0x314>)
 8000e9c:	4293      	cmp	r3, r2
 8000e9e:	d031      	beq.n	8000f04 <__aeabi_dmul+0xc8>
 8000ea0:	0f72      	lsrs	r2, r6, #29
 8000ea2:	00e4      	lsls	r4, r4, #3
 8000ea4:	4322      	orrs	r2, r4
 8000ea6:	2480      	movs	r4, #128	@ 0x80
 8000ea8:	0424      	lsls	r4, r4, #16
 8000eaa:	4314      	orrs	r4, r2
 8000eac:	4aa9      	ldr	r2, [pc, #676]	@ (8001154 <__aeabi_dmul+0x318>)
 8000eae:	00f0      	lsls	r0, r6, #3
 8000eb0:	4694      	mov	ip, r2
 8000eb2:	4463      	add	r3, ip
 8000eb4:	195b      	adds	r3, r3, r5
 8000eb6:	1c5a      	adds	r2, r3, #1
 8000eb8:	9201      	str	r2, [sp, #4]
 8000eba:	4642      	mov	r2, r8
 8000ebc:	2600      	movs	r6, #0
 8000ebe:	2a0a      	cmp	r2, #10
 8000ec0:	dc42      	bgt.n	8000f48 <__aeabi_dmul+0x10c>
 8000ec2:	465a      	mov	r2, fp
 8000ec4:	9900      	ldr	r1, [sp, #0]
 8000ec6:	404a      	eors	r2, r1
 8000ec8:	4693      	mov	fp, r2
 8000eca:	4642      	mov	r2, r8
 8000ecc:	2a02      	cmp	r2, #2
 8000ece:	dc32      	bgt.n	8000f36 <__aeabi_dmul+0xfa>
 8000ed0:	3a01      	subs	r2, #1
 8000ed2:	2a01      	cmp	r2, #1
 8000ed4:	d900      	bls.n	8000ed8 <__aeabi_dmul+0x9c>
 8000ed6:	e149      	b.n	800116c <__aeabi_dmul+0x330>
 8000ed8:	2e02      	cmp	r6, #2
 8000eda:	d100      	bne.n	8000ede <__aeabi_dmul+0xa2>
 8000edc:	e0ca      	b.n	8001074 <__aeabi_dmul+0x238>
 8000ede:	2e01      	cmp	r6, #1
 8000ee0:	d13d      	bne.n	8000f5e <__aeabi_dmul+0x122>
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	2400      	movs	r4, #0
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	0010      	movs	r0, r2
 8000eea:	465a      	mov	r2, fp
 8000eec:	051b      	lsls	r3, r3, #20
 8000eee:	4323      	orrs	r3, r4
 8000ef0:	07d2      	lsls	r2, r2, #31
 8000ef2:	4313      	orrs	r3, r2
 8000ef4:	0019      	movs	r1, r3
 8000ef6:	b007      	add	sp, #28
 8000ef8:	bcf0      	pop	{r4, r5, r6, r7}
 8000efa:	46bb      	mov	fp, r7
 8000efc:	46b2      	mov	sl, r6
 8000efe:	46a9      	mov	r9, r5
 8000f00:	46a0      	mov	r8, r4
 8000f02:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000f04:	4b92      	ldr	r3, [pc, #584]	@ (8001150 <__aeabi_dmul+0x314>)
 8000f06:	4326      	orrs	r6, r4
 8000f08:	18eb      	adds	r3, r5, r3
 8000f0a:	2e00      	cmp	r6, #0
 8000f0c:	d100      	bne.n	8000f10 <__aeabi_dmul+0xd4>
 8000f0e:	e0bb      	b.n	8001088 <__aeabi_dmul+0x24c>
 8000f10:	2203      	movs	r2, #3
 8000f12:	4641      	mov	r1, r8
 8000f14:	4311      	orrs	r1, r2
 8000f16:	465a      	mov	r2, fp
 8000f18:	4688      	mov	r8, r1
 8000f1a:	9900      	ldr	r1, [sp, #0]
 8000f1c:	404a      	eors	r2, r1
 8000f1e:	2180      	movs	r1, #128	@ 0x80
 8000f20:	0109      	lsls	r1, r1, #4
 8000f22:	468c      	mov	ip, r1
 8000f24:	0029      	movs	r1, r5
 8000f26:	4461      	add	r1, ip
 8000f28:	9101      	str	r1, [sp, #4]
 8000f2a:	4641      	mov	r1, r8
 8000f2c:	290a      	cmp	r1, #10
 8000f2e:	dd00      	ble.n	8000f32 <__aeabi_dmul+0xf6>
 8000f30:	e233      	b.n	800139a <__aeabi_dmul+0x55e>
 8000f32:	4693      	mov	fp, r2
 8000f34:	2603      	movs	r6, #3
 8000f36:	4642      	mov	r2, r8
 8000f38:	2701      	movs	r7, #1
 8000f3a:	4097      	lsls	r7, r2
 8000f3c:	21a6      	movs	r1, #166	@ 0xa6
 8000f3e:	003a      	movs	r2, r7
 8000f40:	00c9      	lsls	r1, r1, #3
 8000f42:	400a      	ands	r2, r1
 8000f44:	420f      	tst	r7, r1
 8000f46:	d031      	beq.n	8000fac <__aeabi_dmul+0x170>
 8000f48:	9e02      	ldr	r6, [sp, #8]
 8000f4a:	2e02      	cmp	r6, #2
 8000f4c:	d100      	bne.n	8000f50 <__aeabi_dmul+0x114>
 8000f4e:	e235      	b.n	80013bc <__aeabi_dmul+0x580>
 8000f50:	2e03      	cmp	r6, #3
 8000f52:	d100      	bne.n	8000f56 <__aeabi_dmul+0x11a>
 8000f54:	e1d2      	b.n	80012fc <__aeabi_dmul+0x4c0>
 8000f56:	4654      	mov	r4, sl
 8000f58:	4648      	mov	r0, r9
 8000f5a:	2e01      	cmp	r6, #1
 8000f5c:	d0c1      	beq.n	8000ee2 <__aeabi_dmul+0xa6>
 8000f5e:	9a01      	ldr	r2, [sp, #4]
 8000f60:	4b7d      	ldr	r3, [pc, #500]	@ (8001158 <__aeabi_dmul+0x31c>)
 8000f62:	4694      	mov	ip, r2
 8000f64:	4463      	add	r3, ip
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	dc00      	bgt.n	8000f6c <__aeabi_dmul+0x130>
 8000f6a:	e0c0      	b.n	80010ee <__aeabi_dmul+0x2b2>
 8000f6c:	0742      	lsls	r2, r0, #29
 8000f6e:	d009      	beq.n	8000f84 <__aeabi_dmul+0x148>
 8000f70:	220f      	movs	r2, #15
 8000f72:	4002      	ands	r2, r0
 8000f74:	2a04      	cmp	r2, #4
 8000f76:	d005      	beq.n	8000f84 <__aeabi_dmul+0x148>
 8000f78:	1d02      	adds	r2, r0, #4
 8000f7a:	4282      	cmp	r2, r0
 8000f7c:	4180      	sbcs	r0, r0
 8000f7e:	4240      	negs	r0, r0
 8000f80:	1824      	adds	r4, r4, r0
 8000f82:	0010      	movs	r0, r2
 8000f84:	01e2      	lsls	r2, r4, #7
 8000f86:	d506      	bpl.n	8000f96 <__aeabi_dmul+0x15a>
 8000f88:	4b74      	ldr	r3, [pc, #464]	@ (800115c <__aeabi_dmul+0x320>)
 8000f8a:	9a01      	ldr	r2, [sp, #4]
 8000f8c:	401c      	ands	r4, r3
 8000f8e:	2380      	movs	r3, #128	@ 0x80
 8000f90:	4694      	mov	ip, r2
 8000f92:	00db      	lsls	r3, r3, #3
 8000f94:	4463      	add	r3, ip
 8000f96:	4a72      	ldr	r2, [pc, #456]	@ (8001160 <__aeabi_dmul+0x324>)
 8000f98:	4293      	cmp	r3, r2
 8000f9a:	dc6b      	bgt.n	8001074 <__aeabi_dmul+0x238>
 8000f9c:	0762      	lsls	r2, r4, #29
 8000f9e:	08c0      	lsrs	r0, r0, #3
 8000fa0:	0264      	lsls	r4, r4, #9
 8000fa2:	055b      	lsls	r3, r3, #21
 8000fa4:	4302      	orrs	r2, r0
 8000fa6:	0b24      	lsrs	r4, r4, #12
 8000fa8:	0d5b      	lsrs	r3, r3, #21
 8000faa:	e79d      	b.n	8000ee8 <__aeabi_dmul+0xac>
 8000fac:	2190      	movs	r1, #144	@ 0x90
 8000fae:	0089      	lsls	r1, r1, #2
 8000fb0:	420f      	tst	r7, r1
 8000fb2:	d163      	bne.n	800107c <__aeabi_dmul+0x240>
 8000fb4:	2288      	movs	r2, #136	@ 0x88
 8000fb6:	423a      	tst	r2, r7
 8000fb8:	d100      	bne.n	8000fbc <__aeabi_dmul+0x180>
 8000fba:	e0d7      	b.n	800116c <__aeabi_dmul+0x330>
 8000fbc:	9b00      	ldr	r3, [sp, #0]
 8000fbe:	46a2      	mov	sl, r4
 8000fc0:	469b      	mov	fp, r3
 8000fc2:	4681      	mov	r9, r0
 8000fc4:	9602      	str	r6, [sp, #8]
 8000fc6:	e7bf      	b.n	8000f48 <__aeabi_dmul+0x10c>
 8000fc8:	0023      	movs	r3, r4
 8000fca:	4333      	orrs	r3, r6
 8000fcc:	d100      	bne.n	8000fd0 <__aeabi_dmul+0x194>
 8000fce:	e07f      	b.n	80010d0 <__aeabi_dmul+0x294>
 8000fd0:	2c00      	cmp	r4, #0
 8000fd2:	d100      	bne.n	8000fd6 <__aeabi_dmul+0x19a>
 8000fd4:	e1ad      	b.n	8001332 <__aeabi_dmul+0x4f6>
 8000fd6:	0020      	movs	r0, r4
 8000fd8:	f000 fac4 	bl	8001564 <__clzsi2>
 8000fdc:	0002      	movs	r2, r0
 8000fde:	0003      	movs	r3, r0
 8000fe0:	3a0b      	subs	r2, #11
 8000fe2:	201d      	movs	r0, #29
 8000fe4:	0019      	movs	r1, r3
 8000fe6:	1a82      	subs	r2, r0, r2
 8000fe8:	0030      	movs	r0, r6
 8000fea:	3908      	subs	r1, #8
 8000fec:	40d0      	lsrs	r0, r2
 8000fee:	408c      	lsls	r4, r1
 8000ff0:	4304      	orrs	r4, r0
 8000ff2:	0030      	movs	r0, r6
 8000ff4:	4088      	lsls	r0, r1
 8000ff6:	4a5b      	ldr	r2, [pc, #364]	@ (8001164 <__aeabi_dmul+0x328>)
 8000ff8:	1aeb      	subs	r3, r5, r3
 8000ffa:	4694      	mov	ip, r2
 8000ffc:	4463      	add	r3, ip
 8000ffe:	1c5a      	adds	r2, r3, #1
 8001000:	9201      	str	r2, [sp, #4]
 8001002:	4642      	mov	r2, r8
 8001004:	2600      	movs	r6, #0
 8001006:	2a0a      	cmp	r2, #10
 8001008:	dc00      	bgt.n	800100c <__aeabi_dmul+0x1d0>
 800100a:	e75a      	b.n	8000ec2 <__aeabi_dmul+0x86>
 800100c:	e79c      	b.n	8000f48 <__aeabi_dmul+0x10c>
 800100e:	4653      	mov	r3, sl
 8001010:	4303      	orrs	r3, r0
 8001012:	4699      	mov	r9, r3
 8001014:	d054      	beq.n	80010c0 <__aeabi_dmul+0x284>
 8001016:	4653      	mov	r3, sl
 8001018:	2b00      	cmp	r3, #0
 800101a:	d100      	bne.n	800101e <__aeabi_dmul+0x1e2>
 800101c:	e177      	b.n	800130e <__aeabi_dmul+0x4d2>
 800101e:	4650      	mov	r0, sl
 8001020:	f000 faa0 	bl	8001564 <__clzsi2>
 8001024:	230b      	movs	r3, #11
 8001026:	425b      	negs	r3, r3
 8001028:	469c      	mov	ip, r3
 800102a:	0002      	movs	r2, r0
 800102c:	4484      	add	ip, r0
 800102e:	0011      	movs	r1, r2
 8001030:	4650      	mov	r0, sl
 8001032:	3908      	subs	r1, #8
 8001034:	4088      	lsls	r0, r1
 8001036:	231d      	movs	r3, #29
 8001038:	4680      	mov	r8, r0
 800103a:	4660      	mov	r0, ip
 800103c:	1a1b      	subs	r3, r3, r0
 800103e:	0020      	movs	r0, r4
 8001040:	40d8      	lsrs	r0, r3
 8001042:	0003      	movs	r3, r0
 8001044:	4640      	mov	r0, r8
 8001046:	4303      	orrs	r3, r0
 8001048:	469a      	mov	sl, r3
 800104a:	0023      	movs	r3, r4
 800104c:	408b      	lsls	r3, r1
 800104e:	4699      	mov	r9, r3
 8001050:	2300      	movs	r3, #0
 8001052:	4d44      	ldr	r5, [pc, #272]	@ (8001164 <__aeabi_dmul+0x328>)
 8001054:	4698      	mov	r8, r3
 8001056:	1aad      	subs	r5, r5, r2
 8001058:	9302      	str	r3, [sp, #8]
 800105a:	e715      	b.n	8000e88 <__aeabi_dmul+0x4c>
 800105c:	4652      	mov	r2, sl
 800105e:	4302      	orrs	r2, r0
 8001060:	4691      	mov	r9, r2
 8001062:	d126      	bne.n	80010b2 <__aeabi_dmul+0x276>
 8001064:	2200      	movs	r2, #0
 8001066:	001d      	movs	r5, r3
 8001068:	2302      	movs	r3, #2
 800106a:	4692      	mov	sl, r2
 800106c:	3208      	adds	r2, #8
 800106e:	4690      	mov	r8, r2
 8001070:	9302      	str	r3, [sp, #8]
 8001072:	e709      	b.n	8000e88 <__aeabi_dmul+0x4c>
 8001074:	2400      	movs	r4, #0
 8001076:	2200      	movs	r2, #0
 8001078:	4b35      	ldr	r3, [pc, #212]	@ (8001150 <__aeabi_dmul+0x314>)
 800107a:	e735      	b.n	8000ee8 <__aeabi_dmul+0xac>
 800107c:	2300      	movs	r3, #0
 800107e:	2480      	movs	r4, #128	@ 0x80
 8001080:	469b      	mov	fp, r3
 8001082:	0324      	lsls	r4, r4, #12
 8001084:	4b32      	ldr	r3, [pc, #200]	@ (8001150 <__aeabi_dmul+0x314>)
 8001086:	e72f      	b.n	8000ee8 <__aeabi_dmul+0xac>
 8001088:	2202      	movs	r2, #2
 800108a:	4641      	mov	r1, r8
 800108c:	4311      	orrs	r1, r2
 800108e:	2280      	movs	r2, #128	@ 0x80
 8001090:	0112      	lsls	r2, r2, #4
 8001092:	4694      	mov	ip, r2
 8001094:	002a      	movs	r2, r5
 8001096:	4462      	add	r2, ip
 8001098:	4688      	mov	r8, r1
 800109a:	9201      	str	r2, [sp, #4]
 800109c:	290a      	cmp	r1, #10
 800109e:	dd00      	ble.n	80010a2 <__aeabi_dmul+0x266>
 80010a0:	e752      	b.n	8000f48 <__aeabi_dmul+0x10c>
 80010a2:	465a      	mov	r2, fp
 80010a4:	2000      	movs	r0, #0
 80010a6:	9900      	ldr	r1, [sp, #0]
 80010a8:	0004      	movs	r4, r0
 80010aa:	404a      	eors	r2, r1
 80010ac:	4693      	mov	fp, r2
 80010ae:	2602      	movs	r6, #2
 80010b0:	e70b      	b.n	8000eca <__aeabi_dmul+0x8e>
 80010b2:	220c      	movs	r2, #12
 80010b4:	001d      	movs	r5, r3
 80010b6:	2303      	movs	r3, #3
 80010b8:	4681      	mov	r9, r0
 80010ba:	4690      	mov	r8, r2
 80010bc:	9302      	str	r3, [sp, #8]
 80010be:	e6e3      	b.n	8000e88 <__aeabi_dmul+0x4c>
 80010c0:	2300      	movs	r3, #0
 80010c2:	469a      	mov	sl, r3
 80010c4:	3304      	adds	r3, #4
 80010c6:	4698      	mov	r8, r3
 80010c8:	3b03      	subs	r3, #3
 80010ca:	2500      	movs	r5, #0
 80010cc:	9302      	str	r3, [sp, #8]
 80010ce:	e6db      	b.n	8000e88 <__aeabi_dmul+0x4c>
 80010d0:	4642      	mov	r2, r8
 80010d2:	3301      	adds	r3, #1
 80010d4:	431a      	orrs	r2, r3
 80010d6:	002b      	movs	r3, r5
 80010d8:	4690      	mov	r8, r2
 80010da:	1c5a      	adds	r2, r3, #1
 80010dc:	9201      	str	r2, [sp, #4]
 80010de:	4642      	mov	r2, r8
 80010e0:	2400      	movs	r4, #0
 80010e2:	2000      	movs	r0, #0
 80010e4:	2601      	movs	r6, #1
 80010e6:	2a0a      	cmp	r2, #10
 80010e8:	dc00      	bgt.n	80010ec <__aeabi_dmul+0x2b0>
 80010ea:	e6ea      	b.n	8000ec2 <__aeabi_dmul+0x86>
 80010ec:	e72c      	b.n	8000f48 <__aeabi_dmul+0x10c>
 80010ee:	2201      	movs	r2, #1
 80010f0:	1ad2      	subs	r2, r2, r3
 80010f2:	2a38      	cmp	r2, #56	@ 0x38
 80010f4:	dd00      	ble.n	80010f8 <__aeabi_dmul+0x2bc>
 80010f6:	e6f4      	b.n	8000ee2 <__aeabi_dmul+0xa6>
 80010f8:	2a1f      	cmp	r2, #31
 80010fa:	dc00      	bgt.n	80010fe <__aeabi_dmul+0x2c2>
 80010fc:	e12a      	b.n	8001354 <__aeabi_dmul+0x518>
 80010fe:	211f      	movs	r1, #31
 8001100:	4249      	negs	r1, r1
 8001102:	1acb      	subs	r3, r1, r3
 8001104:	0021      	movs	r1, r4
 8001106:	40d9      	lsrs	r1, r3
 8001108:	000b      	movs	r3, r1
 800110a:	2a20      	cmp	r2, #32
 800110c:	d005      	beq.n	800111a <__aeabi_dmul+0x2de>
 800110e:	4a16      	ldr	r2, [pc, #88]	@ (8001168 <__aeabi_dmul+0x32c>)
 8001110:	9d01      	ldr	r5, [sp, #4]
 8001112:	4694      	mov	ip, r2
 8001114:	4465      	add	r5, ip
 8001116:	40ac      	lsls	r4, r5
 8001118:	4320      	orrs	r0, r4
 800111a:	1e42      	subs	r2, r0, #1
 800111c:	4190      	sbcs	r0, r2
 800111e:	4318      	orrs	r0, r3
 8001120:	2307      	movs	r3, #7
 8001122:	0019      	movs	r1, r3
 8001124:	2400      	movs	r4, #0
 8001126:	4001      	ands	r1, r0
 8001128:	4203      	tst	r3, r0
 800112a:	d00c      	beq.n	8001146 <__aeabi_dmul+0x30a>
 800112c:	230f      	movs	r3, #15
 800112e:	4003      	ands	r3, r0
 8001130:	2b04      	cmp	r3, #4
 8001132:	d100      	bne.n	8001136 <__aeabi_dmul+0x2fa>
 8001134:	e140      	b.n	80013b8 <__aeabi_dmul+0x57c>
 8001136:	1d03      	adds	r3, r0, #4
 8001138:	4283      	cmp	r3, r0
 800113a:	41a4      	sbcs	r4, r4
 800113c:	0018      	movs	r0, r3
 800113e:	4264      	negs	r4, r4
 8001140:	0761      	lsls	r1, r4, #29
 8001142:	0264      	lsls	r4, r4, #9
 8001144:	0b24      	lsrs	r4, r4, #12
 8001146:	08c2      	lsrs	r2, r0, #3
 8001148:	2300      	movs	r3, #0
 800114a:	430a      	orrs	r2, r1
 800114c:	e6cc      	b.n	8000ee8 <__aeabi_dmul+0xac>
 800114e:	46c0      	nop			@ (mov r8, r8)
 8001150:	000007ff 	.word	0x000007ff
 8001154:	fffffc01 	.word	0xfffffc01
 8001158:	000003ff 	.word	0x000003ff
 800115c:	feffffff 	.word	0xfeffffff
 8001160:	000007fe 	.word	0x000007fe
 8001164:	fffffc0d 	.word	0xfffffc0d
 8001168:	0000043e 	.word	0x0000043e
 800116c:	4649      	mov	r1, r9
 800116e:	464a      	mov	r2, r9
 8001170:	0409      	lsls	r1, r1, #16
 8001172:	0c09      	lsrs	r1, r1, #16
 8001174:	000d      	movs	r5, r1
 8001176:	0c16      	lsrs	r6, r2, #16
 8001178:	0c02      	lsrs	r2, r0, #16
 800117a:	0400      	lsls	r0, r0, #16
 800117c:	0c00      	lsrs	r0, r0, #16
 800117e:	4345      	muls	r5, r0
 8001180:	46ac      	mov	ip, r5
 8001182:	0005      	movs	r5, r0
 8001184:	4375      	muls	r5, r6
 8001186:	46a8      	mov	r8, r5
 8001188:	0015      	movs	r5, r2
 800118a:	000f      	movs	r7, r1
 800118c:	4375      	muls	r5, r6
 800118e:	9200      	str	r2, [sp, #0]
 8001190:	9502      	str	r5, [sp, #8]
 8001192:	002a      	movs	r2, r5
 8001194:	9d00      	ldr	r5, [sp, #0]
 8001196:	436f      	muls	r7, r5
 8001198:	4665      	mov	r5, ip
 800119a:	0c2d      	lsrs	r5, r5, #16
 800119c:	46a9      	mov	r9, r5
 800119e:	4447      	add	r7, r8
 80011a0:	444f      	add	r7, r9
 80011a2:	45b8      	cmp	r8, r7
 80011a4:	d905      	bls.n	80011b2 <__aeabi_dmul+0x376>
 80011a6:	0015      	movs	r5, r2
 80011a8:	2280      	movs	r2, #128	@ 0x80
 80011aa:	0252      	lsls	r2, r2, #9
 80011ac:	4690      	mov	r8, r2
 80011ae:	4445      	add	r5, r8
 80011b0:	9502      	str	r5, [sp, #8]
 80011b2:	0c3d      	lsrs	r5, r7, #16
 80011b4:	9503      	str	r5, [sp, #12]
 80011b6:	4665      	mov	r5, ip
 80011b8:	042d      	lsls	r5, r5, #16
 80011ba:	043f      	lsls	r7, r7, #16
 80011bc:	0c2d      	lsrs	r5, r5, #16
 80011be:	46ac      	mov	ip, r5
 80011c0:	003d      	movs	r5, r7
 80011c2:	4465      	add	r5, ip
 80011c4:	9504      	str	r5, [sp, #16]
 80011c6:	0c25      	lsrs	r5, r4, #16
 80011c8:	0424      	lsls	r4, r4, #16
 80011ca:	0c24      	lsrs	r4, r4, #16
 80011cc:	46ac      	mov	ip, r5
 80011ce:	0025      	movs	r5, r4
 80011d0:	4375      	muls	r5, r6
 80011d2:	46a8      	mov	r8, r5
 80011d4:	4665      	mov	r5, ip
 80011d6:	000f      	movs	r7, r1
 80011d8:	4369      	muls	r1, r5
 80011da:	4441      	add	r1, r8
 80011dc:	4689      	mov	r9, r1
 80011de:	4367      	muls	r7, r4
 80011e0:	0c39      	lsrs	r1, r7, #16
 80011e2:	4449      	add	r1, r9
 80011e4:	436e      	muls	r6, r5
 80011e6:	4588      	cmp	r8, r1
 80011e8:	d903      	bls.n	80011f2 <__aeabi_dmul+0x3b6>
 80011ea:	2280      	movs	r2, #128	@ 0x80
 80011ec:	0252      	lsls	r2, r2, #9
 80011ee:	4690      	mov	r8, r2
 80011f0:	4446      	add	r6, r8
 80011f2:	0c0d      	lsrs	r5, r1, #16
 80011f4:	46a8      	mov	r8, r5
 80011f6:	0035      	movs	r5, r6
 80011f8:	4445      	add	r5, r8
 80011fa:	9505      	str	r5, [sp, #20]
 80011fc:	9d03      	ldr	r5, [sp, #12]
 80011fe:	043f      	lsls	r7, r7, #16
 8001200:	46a8      	mov	r8, r5
 8001202:	0c3f      	lsrs	r7, r7, #16
 8001204:	0409      	lsls	r1, r1, #16
 8001206:	19c9      	adds	r1, r1, r7
 8001208:	4488      	add	r8, r1
 800120a:	4645      	mov	r5, r8
 800120c:	9503      	str	r5, [sp, #12]
 800120e:	4655      	mov	r5, sl
 8001210:	042e      	lsls	r6, r5, #16
 8001212:	0c36      	lsrs	r6, r6, #16
 8001214:	0c2f      	lsrs	r7, r5, #16
 8001216:	0035      	movs	r5, r6
 8001218:	4345      	muls	r5, r0
 800121a:	4378      	muls	r0, r7
 800121c:	4681      	mov	r9, r0
 800121e:	0038      	movs	r0, r7
 8001220:	46a8      	mov	r8, r5
 8001222:	0c2d      	lsrs	r5, r5, #16
 8001224:	46aa      	mov	sl, r5
 8001226:	9a00      	ldr	r2, [sp, #0]
 8001228:	4350      	muls	r0, r2
 800122a:	4372      	muls	r2, r6
 800122c:	444a      	add	r2, r9
 800122e:	4452      	add	r2, sl
 8001230:	4591      	cmp	r9, r2
 8001232:	d903      	bls.n	800123c <__aeabi_dmul+0x400>
 8001234:	2580      	movs	r5, #128	@ 0x80
 8001236:	026d      	lsls	r5, r5, #9
 8001238:	46a9      	mov	r9, r5
 800123a:	4448      	add	r0, r9
 800123c:	0c15      	lsrs	r5, r2, #16
 800123e:	46a9      	mov	r9, r5
 8001240:	4645      	mov	r5, r8
 8001242:	042d      	lsls	r5, r5, #16
 8001244:	0c2d      	lsrs	r5, r5, #16
 8001246:	46a8      	mov	r8, r5
 8001248:	4665      	mov	r5, ip
 800124a:	437d      	muls	r5, r7
 800124c:	0412      	lsls	r2, r2, #16
 800124e:	4448      	add	r0, r9
 8001250:	4490      	add	r8, r2
 8001252:	46a9      	mov	r9, r5
 8001254:	0032      	movs	r2, r6
 8001256:	4665      	mov	r5, ip
 8001258:	4362      	muls	r2, r4
 800125a:	436e      	muls	r6, r5
 800125c:	437c      	muls	r4, r7
 800125e:	0c17      	lsrs	r7, r2, #16
 8001260:	1936      	adds	r6, r6, r4
 8001262:	19bf      	adds	r7, r7, r6
 8001264:	42bc      	cmp	r4, r7
 8001266:	d903      	bls.n	8001270 <__aeabi_dmul+0x434>
 8001268:	2480      	movs	r4, #128	@ 0x80
 800126a:	0264      	lsls	r4, r4, #9
 800126c:	46a4      	mov	ip, r4
 800126e:	44e1      	add	r9, ip
 8001270:	9c02      	ldr	r4, [sp, #8]
 8001272:	9e03      	ldr	r6, [sp, #12]
 8001274:	46a4      	mov	ip, r4
 8001276:	9d05      	ldr	r5, [sp, #20]
 8001278:	4466      	add	r6, ip
 800127a:	428e      	cmp	r6, r1
 800127c:	4189      	sbcs	r1, r1
 800127e:	46ac      	mov	ip, r5
 8001280:	0412      	lsls	r2, r2, #16
 8001282:	043c      	lsls	r4, r7, #16
 8001284:	0c12      	lsrs	r2, r2, #16
 8001286:	18a2      	adds	r2, r4, r2
 8001288:	4462      	add	r2, ip
 800128a:	4249      	negs	r1, r1
 800128c:	1854      	adds	r4, r2, r1
 800128e:	4446      	add	r6, r8
 8001290:	46a4      	mov	ip, r4
 8001292:	4546      	cmp	r6, r8
 8001294:	41a4      	sbcs	r4, r4
 8001296:	4682      	mov	sl, r0
 8001298:	4264      	negs	r4, r4
 800129a:	46a0      	mov	r8, r4
 800129c:	42aa      	cmp	r2, r5
 800129e:	4192      	sbcs	r2, r2
 80012a0:	458c      	cmp	ip, r1
 80012a2:	4189      	sbcs	r1, r1
 80012a4:	44e2      	add	sl, ip
 80012a6:	44d0      	add	r8, sl
 80012a8:	4249      	negs	r1, r1
 80012aa:	4252      	negs	r2, r2
 80012ac:	430a      	orrs	r2, r1
 80012ae:	45a0      	cmp	r8, r4
 80012b0:	41a4      	sbcs	r4, r4
 80012b2:	4582      	cmp	sl, r0
 80012b4:	4189      	sbcs	r1, r1
 80012b6:	4264      	negs	r4, r4
 80012b8:	4249      	negs	r1, r1
 80012ba:	430c      	orrs	r4, r1
 80012bc:	4641      	mov	r1, r8
 80012be:	0c3f      	lsrs	r7, r7, #16
 80012c0:	19d2      	adds	r2, r2, r7
 80012c2:	1912      	adds	r2, r2, r4
 80012c4:	0dcc      	lsrs	r4, r1, #23
 80012c6:	9904      	ldr	r1, [sp, #16]
 80012c8:	0270      	lsls	r0, r6, #9
 80012ca:	4308      	orrs	r0, r1
 80012cc:	1e41      	subs	r1, r0, #1
 80012ce:	4188      	sbcs	r0, r1
 80012d0:	4641      	mov	r1, r8
 80012d2:	444a      	add	r2, r9
 80012d4:	0df6      	lsrs	r6, r6, #23
 80012d6:	0252      	lsls	r2, r2, #9
 80012d8:	4330      	orrs	r0, r6
 80012da:	0249      	lsls	r1, r1, #9
 80012dc:	4314      	orrs	r4, r2
 80012de:	4308      	orrs	r0, r1
 80012e0:	01d2      	lsls	r2, r2, #7
 80012e2:	d535      	bpl.n	8001350 <__aeabi_dmul+0x514>
 80012e4:	2201      	movs	r2, #1
 80012e6:	0843      	lsrs	r3, r0, #1
 80012e8:	4002      	ands	r2, r0
 80012ea:	4313      	orrs	r3, r2
 80012ec:	07e0      	lsls	r0, r4, #31
 80012ee:	4318      	orrs	r0, r3
 80012f0:	0864      	lsrs	r4, r4, #1
 80012f2:	e634      	b.n	8000f5e <__aeabi_dmul+0x122>
 80012f4:	9b00      	ldr	r3, [sp, #0]
 80012f6:	46a2      	mov	sl, r4
 80012f8:	469b      	mov	fp, r3
 80012fa:	4681      	mov	r9, r0
 80012fc:	2480      	movs	r4, #128	@ 0x80
 80012fe:	4653      	mov	r3, sl
 8001300:	0324      	lsls	r4, r4, #12
 8001302:	431c      	orrs	r4, r3
 8001304:	0324      	lsls	r4, r4, #12
 8001306:	464a      	mov	r2, r9
 8001308:	4b2e      	ldr	r3, [pc, #184]	@ (80013c4 <__aeabi_dmul+0x588>)
 800130a:	0b24      	lsrs	r4, r4, #12
 800130c:	e5ec      	b.n	8000ee8 <__aeabi_dmul+0xac>
 800130e:	f000 f929 	bl	8001564 <__clzsi2>
 8001312:	2315      	movs	r3, #21
 8001314:	469c      	mov	ip, r3
 8001316:	4484      	add	ip, r0
 8001318:	0002      	movs	r2, r0
 800131a:	4663      	mov	r3, ip
 800131c:	3220      	adds	r2, #32
 800131e:	2b1c      	cmp	r3, #28
 8001320:	dc00      	bgt.n	8001324 <__aeabi_dmul+0x4e8>
 8001322:	e684      	b.n	800102e <__aeabi_dmul+0x1f2>
 8001324:	2300      	movs	r3, #0
 8001326:	4699      	mov	r9, r3
 8001328:	0023      	movs	r3, r4
 800132a:	3808      	subs	r0, #8
 800132c:	4083      	lsls	r3, r0
 800132e:	469a      	mov	sl, r3
 8001330:	e68e      	b.n	8001050 <__aeabi_dmul+0x214>
 8001332:	f000 f917 	bl	8001564 <__clzsi2>
 8001336:	0002      	movs	r2, r0
 8001338:	0003      	movs	r3, r0
 800133a:	3215      	adds	r2, #21
 800133c:	3320      	adds	r3, #32
 800133e:	2a1c      	cmp	r2, #28
 8001340:	dc00      	bgt.n	8001344 <__aeabi_dmul+0x508>
 8001342:	e64e      	b.n	8000fe2 <__aeabi_dmul+0x1a6>
 8001344:	0002      	movs	r2, r0
 8001346:	0034      	movs	r4, r6
 8001348:	3a08      	subs	r2, #8
 800134a:	2000      	movs	r0, #0
 800134c:	4094      	lsls	r4, r2
 800134e:	e652      	b.n	8000ff6 <__aeabi_dmul+0x1ba>
 8001350:	9301      	str	r3, [sp, #4]
 8001352:	e604      	b.n	8000f5e <__aeabi_dmul+0x122>
 8001354:	4b1c      	ldr	r3, [pc, #112]	@ (80013c8 <__aeabi_dmul+0x58c>)
 8001356:	0021      	movs	r1, r4
 8001358:	469c      	mov	ip, r3
 800135a:	0003      	movs	r3, r0
 800135c:	9d01      	ldr	r5, [sp, #4]
 800135e:	40d3      	lsrs	r3, r2
 8001360:	4465      	add	r5, ip
 8001362:	40a9      	lsls	r1, r5
 8001364:	4319      	orrs	r1, r3
 8001366:	0003      	movs	r3, r0
 8001368:	40ab      	lsls	r3, r5
 800136a:	1e58      	subs	r0, r3, #1
 800136c:	4183      	sbcs	r3, r0
 800136e:	4319      	orrs	r1, r3
 8001370:	0008      	movs	r0, r1
 8001372:	40d4      	lsrs	r4, r2
 8001374:	074b      	lsls	r3, r1, #29
 8001376:	d009      	beq.n	800138c <__aeabi_dmul+0x550>
 8001378:	230f      	movs	r3, #15
 800137a:	400b      	ands	r3, r1
 800137c:	2b04      	cmp	r3, #4
 800137e:	d005      	beq.n	800138c <__aeabi_dmul+0x550>
 8001380:	1d0b      	adds	r3, r1, #4
 8001382:	428b      	cmp	r3, r1
 8001384:	4180      	sbcs	r0, r0
 8001386:	4240      	negs	r0, r0
 8001388:	1824      	adds	r4, r4, r0
 800138a:	0018      	movs	r0, r3
 800138c:	0223      	lsls	r3, r4, #8
 800138e:	d400      	bmi.n	8001392 <__aeabi_dmul+0x556>
 8001390:	e6d6      	b.n	8001140 <__aeabi_dmul+0x304>
 8001392:	2301      	movs	r3, #1
 8001394:	2400      	movs	r4, #0
 8001396:	2200      	movs	r2, #0
 8001398:	e5a6      	b.n	8000ee8 <__aeabi_dmul+0xac>
 800139a:	290f      	cmp	r1, #15
 800139c:	d1aa      	bne.n	80012f4 <__aeabi_dmul+0x4b8>
 800139e:	2380      	movs	r3, #128	@ 0x80
 80013a0:	4652      	mov	r2, sl
 80013a2:	031b      	lsls	r3, r3, #12
 80013a4:	421a      	tst	r2, r3
 80013a6:	d0a9      	beq.n	80012fc <__aeabi_dmul+0x4c0>
 80013a8:	421c      	tst	r4, r3
 80013aa:	d1a7      	bne.n	80012fc <__aeabi_dmul+0x4c0>
 80013ac:	431c      	orrs	r4, r3
 80013ae:	9b00      	ldr	r3, [sp, #0]
 80013b0:	0002      	movs	r2, r0
 80013b2:	469b      	mov	fp, r3
 80013b4:	4b03      	ldr	r3, [pc, #12]	@ (80013c4 <__aeabi_dmul+0x588>)
 80013b6:	e597      	b.n	8000ee8 <__aeabi_dmul+0xac>
 80013b8:	2400      	movs	r4, #0
 80013ba:	e6c1      	b.n	8001140 <__aeabi_dmul+0x304>
 80013bc:	2400      	movs	r4, #0
 80013be:	4b01      	ldr	r3, [pc, #4]	@ (80013c4 <__aeabi_dmul+0x588>)
 80013c0:	0022      	movs	r2, r4
 80013c2:	e591      	b.n	8000ee8 <__aeabi_dmul+0xac>
 80013c4:	000007ff 	.word	0x000007ff
 80013c8:	0000041e 	.word	0x0000041e

080013cc <__aeabi_f2d>:
 80013cc:	b570      	push	{r4, r5, r6, lr}
 80013ce:	0242      	lsls	r2, r0, #9
 80013d0:	0043      	lsls	r3, r0, #1
 80013d2:	0fc4      	lsrs	r4, r0, #31
 80013d4:	20fe      	movs	r0, #254	@ 0xfe
 80013d6:	0e1b      	lsrs	r3, r3, #24
 80013d8:	1c59      	adds	r1, r3, #1
 80013da:	0a55      	lsrs	r5, r2, #9
 80013dc:	4208      	tst	r0, r1
 80013de:	d00c      	beq.n	80013fa <__aeabi_f2d+0x2e>
 80013e0:	21e0      	movs	r1, #224	@ 0xe0
 80013e2:	0089      	lsls	r1, r1, #2
 80013e4:	468c      	mov	ip, r1
 80013e6:	076d      	lsls	r5, r5, #29
 80013e8:	0b12      	lsrs	r2, r2, #12
 80013ea:	4463      	add	r3, ip
 80013ec:	051b      	lsls	r3, r3, #20
 80013ee:	4313      	orrs	r3, r2
 80013f0:	07e4      	lsls	r4, r4, #31
 80013f2:	4323      	orrs	r3, r4
 80013f4:	0028      	movs	r0, r5
 80013f6:	0019      	movs	r1, r3
 80013f8:	bd70      	pop	{r4, r5, r6, pc}
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d114      	bne.n	8001428 <__aeabi_f2d+0x5c>
 80013fe:	2d00      	cmp	r5, #0
 8001400:	d01b      	beq.n	800143a <__aeabi_f2d+0x6e>
 8001402:	0028      	movs	r0, r5
 8001404:	f000 f8ae 	bl	8001564 <__clzsi2>
 8001408:	280a      	cmp	r0, #10
 800140a:	dc1c      	bgt.n	8001446 <__aeabi_f2d+0x7a>
 800140c:	230b      	movs	r3, #11
 800140e:	002a      	movs	r2, r5
 8001410:	1a1b      	subs	r3, r3, r0
 8001412:	40da      	lsrs	r2, r3
 8001414:	0003      	movs	r3, r0
 8001416:	3315      	adds	r3, #21
 8001418:	409d      	lsls	r5, r3
 800141a:	4b0e      	ldr	r3, [pc, #56]	@ (8001454 <__aeabi_f2d+0x88>)
 800141c:	0312      	lsls	r2, r2, #12
 800141e:	1a1b      	subs	r3, r3, r0
 8001420:	055b      	lsls	r3, r3, #21
 8001422:	0b12      	lsrs	r2, r2, #12
 8001424:	0d5b      	lsrs	r3, r3, #21
 8001426:	e7e1      	b.n	80013ec <__aeabi_f2d+0x20>
 8001428:	2d00      	cmp	r5, #0
 800142a:	d009      	beq.n	8001440 <__aeabi_f2d+0x74>
 800142c:	0b13      	lsrs	r3, r2, #12
 800142e:	2280      	movs	r2, #128	@ 0x80
 8001430:	0312      	lsls	r2, r2, #12
 8001432:	431a      	orrs	r2, r3
 8001434:	076d      	lsls	r5, r5, #29
 8001436:	4b08      	ldr	r3, [pc, #32]	@ (8001458 <__aeabi_f2d+0x8c>)
 8001438:	e7d8      	b.n	80013ec <__aeabi_f2d+0x20>
 800143a:	2300      	movs	r3, #0
 800143c:	2200      	movs	r2, #0
 800143e:	e7d5      	b.n	80013ec <__aeabi_f2d+0x20>
 8001440:	2200      	movs	r2, #0
 8001442:	4b05      	ldr	r3, [pc, #20]	@ (8001458 <__aeabi_f2d+0x8c>)
 8001444:	e7d2      	b.n	80013ec <__aeabi_f2d+0x20>
 8001446:	0003      	movs	r3, r0
 8001448:	002a      	movs	r2, r5
 800144a:	3b0b      	subs	r3, #11
 800144c:	409a      	lsls	r2, r3
 800144e:	2500      	movs	r5, #0
 8001450:	e7e3      	b.n	800141a <__aeabi_f2d+0x4e>
 8001452:	46c0      	nop			@ (mov r8, r8)
 8001454:	00000389 	.word	0x00000389
 8001458:	000007ff 	.word	0x000007ff

0800145c <__aeabi_d2f>:
 800145c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800145e:	004b      	lsls	r3, r1, #1
 8001460:	030f      	lsls	r7, r1, #12
 8001462:	0d5b      	lsrs	r3, r3, #21
 8001464:	4c3b      	ldr	r4, [pc, #236]	@ (8001554 <__aeabi_d2f+0xf8>)
 8001466:	0f45      	lsrs	r5, r0, #29
 8001468:	b083      	sub	sp, #12
 800146a:	0a7f      	lsrs	r7, r7, #9
 800146c:	1c5e      	adds	r6, r3, #1
 800146e:	432f      	orrs	r7, r5
 8001470:	9000      	str	r0, [sp, #0]
 8001472:	9101      	str	r1, [sp, #4]
 8001474:	0fca      	lsrs	r2, r1, #31
 8001476:	00c5      	lsls	r5, r0, #3
 8001478:	4226      	tst	r6, r4
 800147a:	d00b      	beq.n	8001494 <__aeabi_d2f+0x38>
 800147c:	4936      	ldr	r1, [pc, #216]	@ (8001558 <__aeabi_d2f+0xfc>)
 800147e:	185c      	adds	r4, r3, r1
 8001480:	2cfe      	cmp	r4, #254	@ 0xfe
 8001482:	dd13      	ble.n	80014ac <__aeabi_d2f+0x50>
 8001484:	20ff      	movs	r0, #255	@ 0xff
 8001486:	2300      	movs	r3, #0
 8001488:	05c0      	lsls	r0, r0, #23
 800148a:	4318      	orrs	r0, r3
 800148c:	07d2      	lsls	r2, r2, #31
 800148e:	4310      	orrs	r0, r2
 8001490:	b003      	add	sp, #12
 8001492:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001494:	2b00      	cmp	r3, #0
 8001496:	d102      	bne.n	800149e <__aeabi_d2f+0x42>
 8001498:	2000      	movs	r0, #0
 800149a:	2300      	movs	r3, #0
 800149c:	e7f4      	b.n	8001488 <__aeabi_d2f+0x2c>
 800149e:	433d      	orrs	r5, r7
 80014a0:	d0f0      	beq.n	8001484 <__aeabi_d2f+0x28>
 80014a2:	2380      	movs	r3, #128	@ 0x80
 80014a4:	03db      	lsls	r3, r3, #15
 80014a6:	20ff      	movs	r0, #255	@ 0xff
 80014a8:	433b      	orrs	r3, r7
 80014aa:	e7ed      	b.n	8001488 <__aeabi_d2f+0x2c>
 80014ac:	2c00      	cmp	r4, #0
 80014ae:	dd14      	ble.n	80014da <__aeabi_d2f+0x7e>
 80014b0:	9b00      	ldr	r3, [sp, #0]
 80014b2:	00ff      	lsls	r7, r7, #3
 80014b4:	019b      	lsls	r3, r3, #6
 80014b6:	1e58      	subs	r0, r3, #1
 80014b8:	4183      	sbcs	r3, r0
 80014ba:	0f69      	lsrs	r1, r5, #29
 80014bc:	433b      	orrs	r3, r7
 80014be:	430b      	orrs	r3, r1
 80014c0:	0759      	lsls	r1, r3, #29
 80014c2:	d041      	beq.n	8001548 <__aeabi_d2f+0xec>
 80014c4:	210f      	movs	r1, #15
 80014c6:	4019      	ands	r1, r3
 80014c8:	2904      	cmp	r1, #4
 80014ca:	d028      	beq.n	800151e <__aeabi_d2f+0xc2>
 80014cc:	3304      	adds	r3, #4
 80014ce:	0159      	lsls	r1, r3, #5
 80014d0:	d525      	bpl.n	800151e <__aeabi_d2f+0xc2>
 80014d2:	3401      	adds	r4, #1
 80014d4:	2300      	movs	r3, #0
 80014d6:	b2e0      	uxtb	r0, r4
 80014d8:	e7d6      	b.n	8001488 <__aeabi_d2f+0x2c>
 80014da:	0021      	movs	r1, r4
 80014dc:	3117      	adds	r1, #23
 80014de:	dbdb      	blt.n	8001498 <__aeabi_d2f+0x3c>
 80014e0:	2180      	movs	r1, #128	@ 0x80
 80014e2:	201e      	movs	r0, #30
 80014e4:	0409      	lsls	r1, r1, #16
 80014e6:	4339      	orrs	r1, r7
 80014e8:	1b00      	subs	r0, r0, r4
 80014ea:	281f      	cmp	r0, #31
 80014ec:	dd1b      	ble.n	8001526 <__aeabi_d2f+0xca>
 80014ee:	2602      	movs	r6, #2
 80014f0:	4276      	negs	r6, r6
 80014f2:	1b34      	subs	r4, r6, r4
 80014f4:	000e      	movs	r6, r1
 80014f6:	40e6      	lsrs	r6, r4
 80014f8:	0034      	movs	r4, r6
 80014fa:	2820      	cmp	r0, #32
 80014fc:	d004      	beq.n	8001508 <__aeabi_d2f+0xac>
 80014fe:	4817      	ldr	r0, [pc, #92]	@ (800155c <__aeabi_d2f+0x100>)
 8001500:	4684      	mov	ip, r0
 8001502:	4463      	add	r3, ip
 8001504:	4099      	lsls	r1, r3
 8001506:	430d      	orrs	r5, r1
 8001508:	002b      	movs	r3, r5
 800150a:	1e59      	subs	r1, r3, #1
 800150c:	418b      	sbcs	r3, r1
 800150e:	4323      	orrs	r3, r4
 8001510:	0759      	lsls	r1, r3, #29
 8001512:	d015      	beq.n	8001540 <__aeabi_d2f+0xe4>
 8001514:	210f      	movs	r1, #15
 8001516:	2400      	movs	r4, #0
 8001518:	4019      	ands	r1, r3
 800151a:	2904      	cmp	r1, #4
 800151c:	d117      	bne.n	800154e <__aeabi_d2f+0xf2>
 800151e:	019b      	lsls	r3, r3, #6
 8001520:	0a5b      	lsrs	r3, r3, #9
 8001522:	b2e0      	uxtb	r0, r4
 8001524:	e7b0      	b.n	8001488 <__aeabi_d2f+0x2c>
 8001526:	4c0e      	ldr	r4, [pc, #56]	@ (8001560 <__aeabi_d2f+0x104>)
 8001528:	191c      	adds	r4, r3, r4
 800152a:	002b      	movs	r3, r5
 800152c:	40a5      	lsls	r5, r4
 800152e:	40c3      	lsrs	r3, r0
 8001530:	40a1      	lsls	r1, r4
 8001532:	1e68      	subs	r0, r5, #1
 8001534:	4185      	sbcs	r5, r0
 8001536:	4329      	orrs	r1, r5
 8001538:	430b      	orrs	r3, r1
 800153a:	2400      	movs	r4, #0
 800153c:	0759      	lsls	r1, r3, #29
 800153e:	d1c1      	bne.n	80014c4 <__aeabi_d2f+0x68>
 8001540:	019b      	lsls	r3, r3, #6
 8001542:	2000      	movs	r0, #0
 8001544:	0a5b      	lsrs	r3, r3, #9
 8001546:	e79f      	b.n	8001488 <__aeabi_d2f+0x2c>
 8001548:	08db      	lsrs	r3, r3, #3
 800154a:	b2e0      	uxtb	r0, r4
 800154c:	e79c      	b.n	8001488 <__aeabi_d2f+0x2c>
 800154e:	3304      	adds	r3, #4
 8001550:	e7e5      	b.n	800151e <__aeabi_d2f+0xc2>
 8001552:	46c0      	nop			@ (mov r8, r8)
 8001554:	000007fe 	.word	0x000007fe
 8001558:	fffffc80 	.word	0xfffffc80
 800155c:	fffffca2 	.word	0xfffffca2
 8001560:	fffffc82 	.word	0xfffffc82

08001564 <__clzsi2>:
 8001564:	211c      	movs	r1, #28
 8001566:	2301      	movs	r3, #1
 8001568:	041b      	lsls	r3, r3, #16
 800156a:	4298      	cmp	r0, r3
 800156c:	d301      	bcc.n	8001572 <__clzsi2+0xe>
 800156e:	0c00      	lsrs	r0, r0, #16
 8001570:	3910      	subs	r1, #16
 8001572:	0a1b      	lsrs	r3, r3, #8
 8001574:	4298      	cmp	r0, r3
 8001576:	d301      	bcc.n	800157c <__clzsi2+0x18>
 8001578:	0a00      	lsrs	r0, r0, #8
 800157a:	3908      	subs	r1, #8
 800157c:	091b      	lsrs	r3, r3, #4
 800157e:	4298      	cmp	r0, r3
 8001580:	d301      	bcc.n	8001586 <__clzsi2+0x22>
 8001582:	0900      	lsrs	r0, r0, #4
 8001584:	3904      	subs	r1, #4
 8001586:	a202      	add	r2, pc, #8	@ (adr r2, 8001590 <__clzsi2+0x2c>)
 8001588:	5c10      	ldrb	r0, [r2, r0]
 800158a:	1840      	adds	r0, r0, r1
 800158c:	4770      	bx	lr
 800158e:	46c0      	nop			@ (mov r8, r8)
 8001590:	02020304 	.word	0x02020304
 8001594:	01010101 	.word	0x01010101
	...

080015a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80015a4:	f000 fbbe 	bl	8001d24 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80015a8:	f000 f88e 	bl	80016c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80015ac:	f000 f8fa 	bl	80017a4 <MX_GPIO_Init>
  MX_TIM14_Init();
 80015b0:	f000 f8d2 	bl	8001758 <MX_TIM14_Init>
  /* USER CODE BEGIN 2 */

  // Power on Radio module by setting RST high
  HAL_Delay(1000);
 80015b4:	23fa      	movs	r3, #250	@ 0xfa
 80015b6:	009b      	lsls	r3, r3, #2
 80015b8:	0018      	movs	r0, r3
 80015ba:	f000 fc17 	bl	8001dec <HAL_Delay>
  HAL_GPIO_WritePin(GPIOA, RST_Pin, GPIO_PIN_SET);
 80015be:	2380      	movs	r3, #128	@ 0x80
 80015c0:	00d9      	lsls	r1, r3, #3
 80015c2:	2390      	movs	r3, #144	@ 0x90
 80015c4:	05db      	lsls	r3, r3, #23
 80015c6:	2201      	movs	r2, #1
 80015c8:	0018      	movs	r0, r3
 80015ca:	f000 fe9e 	bl	800230a <HAL_GPIO_WritePin>

  sendCommand(CHANNEL_MIN);
 80015ce:	4b36      	ldr	r3, [pc, #216]	@ (80016a8 <main+0x108>)
 80015d0:	1c18      	adds	r0, r3, #0
 80015d2:	f000 fa69 	bl	8001aa8 <sendCommand>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if (channel_changed) {
 80015d6:	4b35      	ldr	r3, [pc, #212]	@ (80016ac <main+0x10c>)
 80015d8:	781b      	ldrb	r3, [r3, #0]
 80015da:	b25b      	sxtb	r3, r3
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d0fa      	beq.n	80015d6 <main+0x36>
		  channel = CHANNEL_MIN + (float)encoder_position * 0.1;
 80015e0:	4b33      	ldr	r3, [pc, #204]	@ (80016b0 <main+0x110>)
 80015e2:	781b      	ldrb	r3, [r3, #0]
 80015e4:	b25b      	sxtb	r3, r3
 80015e6:	0018      	movs	r0, r3
 80015e8:	f7ff f878 	bl	80006dc <__aeabi_i2f>
 80015ec:	1c03      	adds	r3, r0, #0
 80015ee:	1c18      	adds	r0, r3, #0
 80015f0:	f7ff feec 	bl	80013cc <__aeabi_f2d>
 80015f4:	4a2f      	ldr	r2, [pc, #188]	@ (80016b4 <main+0x114>)
 80015f6:	4b30      	ldr	r3, [pc, #192]	@ (80016b8 <main+0x118>)
 80015f8:	f7ff fc20 	bl	8000e3c <__aeabi_dmul>
 80015fc:	0002      	movs	r2, r0
 80015fe:	000b      	movs	r3, r1
 8001600:	0010      	movs	r0, r2
 8001602:	0019      	movs	r1, r3
 8001604:	2200      	movs	r2, #0
 8001606:	4b2d      	ldr	r3, [pc, #180]	@ (80016bc <main+0x11c>)
 8001608:	f7ff f8b4 	bl	8000774 <__aeabi_dadd>
 800160c:	0002      	movs	r2, r0
 800160e:	000b      	movs	r3, r1
 8001610:	0010      	movs	r0, r2
 8001612:	0019      	movs	r1, r3
 8001614:	f7ff ff22 	bl	800145c <__aeabi_d2f>
 8001618:	1c02      	adds	r2, r0, #0
 800161a:	4b29      	ldr	r3, [pc, #164]	@ (80016c0 <main+0x120>)
 800161c:	601a      	str	r2, [r3, #0]

		  // Send command to radio receiver to change channel
		  sendCommand(channel);
 800161e:	4b28      	ldr	r3, [pc, #160]	@ (80016c0 <main+0x120>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	1c18      	adds	r0, r3, #0
 8001624:	f000 fa40 	bl	8001aa8 <sendCommand>

		  // LED indicators when you reach the min/max channels
		  if (channel <= CHANNEL_MIN) {
 8001628:	4b25      	ldr	r3, [pc, #148]	@ (80016c0 <main+0x120>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	491e      	ldr	r1, [pc, #120]	@ (80016a8 <main+0x108>)
 800162e:	1c18      	adds	r0, r3, #0
 8001630:	f7fe fe12 	bl	8000258 <__aeabi_fcmple>
 8001634:	1e03      	subs	r3, r0, #0
 8001636:	d00e      	beq.n	8001656 <main+0xb6>
			  HAL_GPIO_WritePin(GPIOA, LED_1_Pin, GPIO_PIN_SET);
 8001638:	2390      	movs	r3, #144	@ 0x90
 800163a:	05db      	lsls	r3, r3, #23
 800163c:	2201      	movs	r2, #1
 800163e:	2108      	movs	r1, #8
 8001640:	0018      	movs	r0, r3
 8001642:	f000 fe62 	bl	800230a <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOA, LED_2_Pin, GPIO_PIN_RESET);
 8001646:	2390      	movs	r3, #144	@ 0x90
 8001648:	05db      	lsls	r3, r3, #23
 800164a:	2200      	movs	r2, #0
 800164c:	2110      	movs	r1, #16
 800164e:	0018      	movs	r0, r3
 8001650:	f000 fe5b 	bl	800230a <HAL_GPIO_WritePin>
 8001654:	e024      	b.n	80016a0 <main+0x100>
		  }
		  else if (channel >= CHANNEL_MAX) {
 8001656:	4b1a      	ldr	r3, [pc, #104]	@ (80016c0 <main+0x120>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	491a      	ldr	r1, [pc, #104]	@ (80016c4 <main+0x124>)
 800165c:	1c18      	adds	r0, r3, #0
 800165e:	f7fe fe0f 	bl	8000280 <__aeabi_fcmpge>
 8001662:	1e03      	subs	r3, r0, #0
 8001664:	d00e      	beq.n	8001684 <main+0xe4>
			  HAL_GPIO_WritePin(GPIOA, LED_1_Pin, GPIO_PIN_RESET);
 8001666:	2390      	movs	r3, #144	@ 0x90
 8001668:	05db      	lsls	r3, r3, #23
 800166a:	2200      	movs	r2, #0
 800166c:	2108      	movs	r1, #8
 800166e:	0018      	movs	r0, r3
 8001670:	f000 fe4b 	bl	800230a <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOA, LED_2_Pin, GPIO_PIN_SET);
 8001674:	2390      	movs	r3, #144	@ 0x90
 8001676:	05db      	lsls	r3, r3, #23
 8001678:	2201      	movs	r2, #1
 800167a:	2110      	movs	r1, #16
 800167c:	0018      	movs	r0, r3
 800167e:	f000 fe44 	bl	800230a <HAL_GPIO_WritePin>
 8001682:	e00d      	b.n	80016a0 <main+0x100>
		  }
		  else {
			  HAL_GPIO_WritePin(GPIOA, LED_1_Pin, GPIO_PIN_RESET);
 8001684:	2390      	movs	r3, #144	@ 0x90
 8001686:	05db      	lsls	r3, r3, #23
 8001688:	2200      	movs	r2, #0
 800168a:	2108      	movs	r1, #8
 800168c:	0018      	movs	r0, r3
 800168e:	f000 fe3c 	bl	800230a <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOA, LED_2_Pin, GPIO_PIN_RESET);
 8001692:	2390      	movs	r3, #144	@ 0x90
 8001694:	05db      	lsls	r3, r3, #23
 8001696:	2200      	movs	r2, #0
 8001698:	2110      	movs	r1, #16
 800169a:	0018      	movs	r0, r3
 800169c:	f000 fe35 	bl	800230a <HAL_GPIO_WritePin>
		  }

		  channel_changed = 0;
 80016a0:	4b02      	ldr	r3, [pc, #8]	@ (80016ac <main+0x10c>)
 80016a2:	2200      	movs	r2, #0
 80016a4:	701a      	strb	r2, [r3, #0]
	  if (channel_changed) {
 80016a6:	e796      	b.n	80015d6 <main+0x36>
 80016a8:	42b00000 	.word	0x42b00000
 80016ac:	2000007c 	.word	0x2000007c
 80016b0:	2000007b 	.word	0x2000007b
 80016b4:	9999999a 	.word	0x9999999a
 80016b8:	3fb99999 	.word	0x3fb99999
 80016bc:	40560000 	.word	0x40560000
 80016c0:	20000000 	.word	0x20000000
 80016c4:	42d80000 	.word	0x42d80000

080016c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80016c8:	b590      	push	{r4, r7, lr}
 80016ca:	b091      	sub	sp, #68	@ 0x44
 80016cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016ce:	2410      	movs	r4, #16
 80016d0:	193b      	adds	r3, r7, r4
 80016d2:	0018      	movs	r0, r3
 80016d4:	2330      	movs	r3, #48	@ 0x30
 80016d6:	001a      	movs	r2, r3
 80016d8:	2100      	movs	r1, #0
 80016da:	f001 fb57 	bl	8002d8c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016de:	003b      	movs	r3, r7
 80016e0:	0018      	movs	r0, r3
 80016e2:	2310      	movs	r3, #16
 80016e4:	001a      	movs	r2, r3
 80016e6:	2100      	movs	r1, #0
 80016e8:	f001 fb50 	bl	8002d8c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80016ec:	0021      	movs	r1, r4
 80016ee:	187b      	adds	r3, r7, r1
 80016f0:	2201      	movs	r2, #1
 80016f2:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80016f4:	187b      	adds	r3, r7, r1
 80016f6:	2201      	movs	r2, #1
 80016f8:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80016fa:	187b      	adds	r3, r7, r1
 80016fc:	2202      	movs	r2, #2
 80016fe:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001700:	187b      	adds	r3, r7, r1
 8001702:	2280      	movs	r2, #128	@ 0x80
 8001704:	0252      	lsls	r2, r2, #9
 8001706:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 8001708:	187b      	adds	r3, r7, r1
 800170a:	2200      	movs	r2, #0
 800170c:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 800170e:	187b      	adds	r3, r7, r1
 8001710:	2200      	movs	r2, #0
 8001712:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001714:	187b      	adds	r3, r7, r1
 8001716:	0018      	movs	r0, r3
 8001718:	f000 fe30 	bl	800237c <HAL_RCC_OscConfig>
 800171c:	1e03      	subs	r3, r0, #0
 800171e:	d001      	beq.n	8001724 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8001720:	f000 fa5a 	bl	8001bd8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001724:	003b      	movs	r3, r7
 8001726:	2207      	movs	r2, #7
 8001728:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800172a:	003b      	movs	r3, r7
 800172c:	2202      	movs	r2, #2
 800172e:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001730:	003b      	movs	r3, r7
 8001732:	2200      	movs	r2, #0
 8001734:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001736:	003b      	movs	r3, r7
 8001738:	2200      	movs	r2, #0
 800173a:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800173c:	003b      	movs	r3, r7
 800173e:	2100      	movs	r1, #0
 8001740:	0018      	movs	r0, r3
 8001742:	f001 f935 	bl	80029b0 <HAL_RCC_ClockConfig>
 8001746:	1e03      	subs	r3, r0, #0
 8001748:	d001      	beq.n	800174e <SystemClock_Config+0x86>
  {
    Error_Handler();
 800174a:	f000 fa45 	bl	8001bd8 <Error_Handler>
  }
}
 800174e:	46c0      	nop			@ (mov r8, r8)
 8001750:	46bd      	mov	sp, r7
 8001752:	b011      	add	sp, #68	@ 0x44
 8001754:	bd90      	pop	{r4, r7, pc}
	...

08001758 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 800175c:	4b0e      	ldr	r3, [pc, #56]	@ (8001798 <MX_TIM14_Init+0x40>)
 800175e:	4a0f      	ldr	r2, [pc, #60]	@ (800179c <MX_TIM14_Init+0x44>)
 8001760:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 79;
 8001762:	4b0d      	ldr	r3, [pc, #52]	@ (8001798 <MX_TIM14_Init+0x40>)
 8001764:	224f      	movs	r2, #79	@ 0x4f
 8001766:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001768:	4b0b      	ldr	r3, [pc, #44]	@ (8001798 <MX_TIM14_Init+0x40>)
 800176a:	2200      	movs	r2, #0
 800176c:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 65535;
 800176e:	4b0a      	ldr	r3, [pc, #40]	@ (8001798 <MX_TIM14_Init+0x40>)
 8001770:	4a0b      	ldr	r2, [pc, #44]	@ (80017a0 <MX_TIM14_Init+0x48>)
 8001772:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001774:	4b08      	ldr	r3, [pc, #32]	@ (8001798 <MX_TIM14_Init+0x40>)
 8001776:	2200      	movs	r2, #0
 8001778:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800177a:	4b07      	ldr	r3, [pc, #28]	@ (8001798 <MX_TIM14_Init+0x40>)
 800177c:	2200      	movs	r2, #0
 800177e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8001780:	4b05      	ldr	r3, [pc, #20]	@ (8001798 <MX_TIM14_Init+0x40>)
 8001782:	0018      	movs	r0, r3
 8001784:	f001 fa38 	bl	8002bf8 <HAL_TIM_Base_Init>
 8001788:	1e03      	subs	r3, r0, #0
 800178a:	d001      	beq.n	8001790 <MX_TIM14_Init+0x38>
  {
    Error_Handler();
 800178c:	f000 fa24 	bl	8001bd8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8001790:	46c0      	nop			@ (mov r8, r8)
 8001792:	46bd      	mov	sp, r7
 8001794:	bd80      	pop	{r7, pc}
 8001796:	46c0      	nop			@ (mov r8, r8)
 8001798:	2000002c 	.word	0x2000002c
 800179c:	40002000 	.word	0x40002000
 80017a0:	0000ffff 	.word	0x0000ffff

080017a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80017a4:	b590      	push	{r4, r7, lr}
 80017a6:	b089      	sub	sp, #36	@ 0x24
 80017a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017aa:	240c      	movs	r4, #12
 80017ac:	193b      	adds	r3, r7, r4
 80017ae:	0018      	movs	r0, r3
 80017b0:	2314      	movs	r3, #20
 80017b2:	001a      	movs	r2, r3
 80017b4:	2100      	movs	r1, #0
 80017b6:	f001 fae9 	bl	8002d8c <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80017ba:	4b2a      	ldr	r3, [pc, #168]	@ (8001864 <MX_GPIO_Init+0xc0>)
 80017bc:	695a      	ldr	r2, [r3, #20]
 80017be:	4b29      	ldr	r3, [pc, #164]	@ (8001864 <MX_GPIO_Init+0xc0>)
 80017c0:	2180      	movs	r1, #128	@ 0x80
 80017c2:	03c9      	lsls	r1, r1, #15
 80017c4:	430a      	orrs	r2, r1
 80017c6:	615a      	str	r2, [r3, #20]
 80017c8:	4b26      	ldr	r3, [pc, #152]	@ (8001864 <MX_GPIO_Init+0xc0>)
 80017ca:	695a      	ldr	r2, [r3, #20]
 80017cc:	2380      	movs	r3, #128	@ 0x80
 80017ce:	03db      	lsls	r3, r3, #15
 80017d0:	4013      	ands	r3, r2
 80017d2:	60bb      	str	r3, [r7, #8]
 80017d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017d6:	4b23      	ldr	r3, [pc, #140]	@ (8001864 <MX_GPIO_Init+0xc0>)
 80017d8:	695a      	ldr	r2, [r3, #20]
 80017da:	4b22      	ldr	r3, [pc, #136]	@ (8001864 <MX_GPIO_Init+0xc0>)
 80017dc:	2180      	movs	r1, #128	@ 0x80
 80017de:	0289      	lsls	r1, r1, #10
 80017e0:	430a      	orrs	r2, r1
 80017e2:	615a      	str	r2, [r3, #20]
 80017e4:	4b1f      	ldr	r3, [pc, #124]	@ (8001864 <MX_GPIO_Init+0xc0>)
 80017e6:	695a      	ldr	r2, [r3, #20]
 80017e8:	2380      	movs	r3, #128	@ 0x80
 80017ea:	029b      	lsls	r3, r3, #10
 80017ec:	4013      	ands	r3, r2
 80017ee:	607b      	str	r3, [r7, #4]
 80017f0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SDIO_Pin|SCLK_Pin|SENB_Pin|LED_1_Pin
 80017f2:	491d      	ldr	r1, [pc, #116]	@ (8001868 <MX_GPIO_Init+0xc4>)
 80017f4:	2390      	movs	r3, #144	@ 0x90
 80017f6:	05db      	lsls	r3, r3, #23
 80017f8:	2200      	movs	r2, #0
 80017fa:	0018      	movs	r0, r3
 80017fc:	f000 fd85 	bl	800230a <HAL_GPIO_WritePin>
                          |LED_2_Pin|RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : SDIO_Pin SCLK_Pin SENB_Pin LED_1_Pin
                           LED_2_Pin RST_Pin */
  GPIO_InitStruct.Pin = SDIO_Pin|SCLK_Pin|SENB_Pin|LED_1_Pin
 8001800:	193b      	adds	r3, r7, r4
 8001802:	4a19      	ldr	r2, [pc, #100]	@ (8001868 <MX_GPIO_Init+0xc4>)
 8001804:	601a      	str	r2, [r3, #0]
                          |LED_2_Pin|RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001806:	193b      	adds	r3, r7, r4
 8001808:	2201      	movs	r2, #1
 800180a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800180c:	193b      	adds	r3, r7, r4
 800180e:	2200      	movs	r2, #0
 8001810:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001812:	193b      	adds	r3, r7, r4
 8001814:	2200      	movs	r2, #0
 8001816:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001818:	193a      	adds	r2, r7, r4
 800181a:	2390      	movs	r3, #144	@ 0x90
 800181c:	05db      	lsls	r3, r3, #23
 800181e:	0011      	movs	r1, r2
 8001820:	0018      	movs	r0, r3
 8001822:	f000 fbe5 	bl	8001ff0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ENC_B_Pin ENC_A_Pin BUTTON_1_Pin BUTTON_2_Pin */
  GPIO_InitStruct.Pin = ENC_B_Pin|ENC_A_Pin|BUTTON_1_Pin|BUTTON_2_Pin;
 8001826:	0021      	movs	r1, r4
 8001828:	187b      	adds	r3, r7, r1
 800182a:	22b8      	movs	r2, #184	@ 0xb8
 800182c:	0092      	lsls	r2, r2, #2
 800182e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001830:	187b      	adds	r3, r7, r1
 8001832:	2288      	movs	r2, #136	@ 0x88
 8001834:	0352      	lsls	r2, r2, #13
 8001836:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001838:	187b      	adds	r3, r7, r1
 800183a:	2201      	movs	r2, #1
 800183c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800183e:	187a      	adds	r2, r7, r1
 8001840:	2390      	movs	r3, #144	@ 0x90
 8001842:	05db      	lsls	r3, r3, #23
 8001844:	0011      	movs	r1, r2
 8001846:	0018      	movs	r0, r3
 8001848:	f000 fbd2 	bl	8001ff0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 800184c:	2200      	movs	r2, #0
 800184e:	2100      	movs	r1, #0
 8001850:	2007      	movs	r0, #7
 8001852:	f000 fb9b 	bl	8001f8c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8001856:	2007      	movs	r0, #7
 8001858:	f000 fbad 	bl	8001fb6 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800185c:	46c0      	nop			@ (mov r8, r8)
 800185e:	46bd      	mov	sp, r7
 8001860:	b009      	add	sp, #36	@ 0x24
 8001862:	bd90      	pop	{r4, r7, pc}
 8001864:	40021000 	.word	0x40021000
 8001868:	0000041f 	.word	0x0000041f

0800186c <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 800186c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800186e:	b087      	sub	sp, #28
 8001870:	af00      	add	r7, sp, #0
 8001872:	0002      	movs	r2, r0
 8001874:	1dbb      	adds	r3, r7, #6
 8001876:	801a      	strh	r2, [r3, #0]
  if(GPIO_Pin == ENC_A_Pin || GPIO_Pin == ENC_B_Pin) {
 8001878:	1dbb      	adds	r3, r7, #6
 800187a:	881b      	ldrh	r3, [r3, #0]
 800187c:	2b40      	cmp	r3, #64	@ 0x40
 800187e:	d004      	beq.n	800188a <HAL_GPIO_EXTI_Callback+0x1e>
 8001880:	1dbb      	adds	r3, r7, #6
 8001882:	881b      	ldrh	r3, [r3, #0]
 8001884:	2b20      	cmp	r3, #32
 8001886:	d000      	beq.n	800188a <HAL_GPIO_EXTI_Callback+0x1e>
 8001888:	e0c7      	b.n	8001a1a <HAL_GPIO_EXTI_Callback+0x1ae>
	  uint32_t current_time = HAL_GetTick();
 800188a:	f000 faa5 	bl	8001dd8 <HAL_GetTick>
 800188e:	0003      	movs	r3, r0
 8001890:	613b      	str	r3, [r7, #16]
	  if ((current_time - prev_enc_time) < ENC_DELAY) {
 8001892:	4b66      	ldr	r3, [pc, #408]	@ (8001a2c <HAL_GPIO_EXTI_Callback+0x1c0>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	693a      	ldr	r2, [r7, #16]
 8001898:	1ad3      	subs	r3, r2, r3
 800189a:	2b13      	cmp	r3, #19
 800189c:	d800      	bhi.n	80018a0 <HAL_GPIO_EXTI_Callback+0x34>
 800189e:	e0be      	b.n	8001a1e <HAL_GPIO_EXTI_Callback+0x1b2>
		  return;
	  }
	  prev_enc_time = current_time;
 80018a0:	4b62      	ldr	r3, [pc, #392]	@ (8001a2c <HAL_GPIO_EXTI_Callback+0x1c0>)
 80018a2:	693a      	ldr	r2, [r7, #16]
 80018a4:	601a      	str	r2, [r3, #0]

	  uint8_t current_A = HAL_GPIO_ReadPin(GPIOA, ENC_A_Pin);
 80018a6:	250f      	movs	r5, #15
 80018a8:	197c      	adds	r4, r7, r5
 80018aa:	2390      	movs	r3, #144	@ 0x90
 80018ac:	05db      	lsls	r3, r3, #23
 80018ae:	2140      	movs	r1, #64	@ 0x40
 80018b0:	0018      	movs	r0, r3
 80018b2:	f000 fd0d 	bl	80022d0 <HAL_GPIO_ReadPin>
 80018b6:	0003      	movs	r3, r0
 80018b8:	7023      	strb	r3, [r4, #0]
	  uint8_t current_B = HAL_GPIO_ReadPin(GPIOA, ENC_B_Pin);
 80018ba:	260e      	movs	r6, #14
 80018bc:	19bc      	adds	r4, r7, r6
 80018be:	2390      	movs	r3, #144	@ 0x90
 80018c0:	05db      	lsls	r3, r3, #23
 80018c2:	2120      	movs	r1, #32
 80018c4:	0018      	movs	r0, r3
 80018c6:	f000 fd03 	bl	80022d0 <HAL_GPIO_ReadPin>
 80018ca:	0003      	movs	r3, r0
 80018cc:	7023      	strb	r3, [r4, #0]

	  // If the state has changed
	  if (current_A != stable_A || current_B != stable_B) {
 80018ce:	4b58      	ldr	r3, [pc, #352]	@ (8001a30 <HAL_GPIO_EXTI_Callback+0x1c4>)
 80018d0:	781b      	ldrb	r3, [r3, #0]
 80018d2:	197a      	adds	r2, r7, r5
 80018d4:	7812      	ldrb	r2, [r2, #0]
 80018d6:	429a      	cmp	r2, r3
 80018d8:	d106      	bne.n	80018e8 <HAL_GPIO_EXTI_Callback+0x7c>
 80018da:	4b56      	ldr	r3, [pc, #344]	@ (8001a34 <HAL_GPIO_EXTI_Callback+0x1c8>)
 80018dc:	781b      	ldrb	r3, [r3, #0]
 80018de:	19ba      	adds	r2, r7, r6
 80018e0:	7812      	ldrb	r2, [r2, #0]
 80018e2:	429a      	cmp	r2, r3
 80018e4:	d100      	bne.n	80018e8 <HAL_GPIO_EXTI_Callback+0x7c>
 80018e6:	e09c      	b.n	8001a22 <HAL_GPIO_EXTI_Callback+0x1b6>
		  stable_A = current_A;
 80018e8:	4b51      	ldr	r3, [pc, #324]	@ (8001a30 <HAL_GPIO_EXTI_Callback+0x1c4>)
 80018ea:	220f      	movs	r2, #15
 80018ec:	18ba      	adds	r2, r7, r2
 80018ee:	7812      	ldrb	r2, [r2, #0]
 80018f0:	701a      	strb	r2, [r3, #0]
		  stable_B = current_B;
 80018f2:	4b50      	ldr	r3, [pc, #320]	@ (8001a34 <HAL_GPIO_EXTI_Callback+0x1c8>)
 80018f4:	220e      	movs	r2, #14
 80018f6:	18ba      	adds	r2, r7, r2
 80018f8:	7812      	ldrb	r2, [r2, #0]
 80018fa:	701a      	strb	r2, [r3, #0]

		  // Use Gray code to determine direction (it goes 00 01 11 10)
		  uint8_t new_state = (stable_A << 1) | stable_B;
 80018fc:	4b4c      	ldr	r3, [pc, #304]	@ (8001a30 <HAL_GPIO_EXTI_Callback+0x1c4>)
 80018fe:	781b      	ldrb	r3, [r3, #0]
 8001900:	005b      	lsls	r3, r3, #1
 8001902:	b25a      	sxtb	r2, r3
 8001904:	4b4b      	ldr	r3, [pc, #300]	@ (8001a34 <HAL_GPIO_EXTI_Callback+0x1c8>)
 8001906:	781b      	ldrb	r3, [r3, #0]
 8001908:	b25b      	sxtb	r3, r3
 800190a:	4313      	orrs	r3, r2
 800190c:	b25a      	sxtb	r2, r3
 800190e:	230d      	movs	r3, #13
 8001910:	18fb      	adds	r3, r7, r3
 8001912:	701a      	strb	r2, [r3, #0]
		  int8_t direction = 0;
 8001914:	2317      	movs	r3, #23
 8001916:	18fb      	adds	r3, r7, r3
 8001918:	2200      	movs	r2, #0
 800191a:	701a      	strb	r2, [r3, #0]

		  switch (encoder_state) {
 800191c:	4b46      	ldr	r3, [pc, #280]	@ (8001a38 <HAL_GPIO_EXTI_Callback+0x1cc>)
 800191e:	781b      	ldrb	r3, [r3, #0]
 8001920:	2b03      	cmp	r3, #3
 8001922:	d041      	beq.n	80019a8 <HAL_GPIO_EXTI_Callback+0x13c>
 8001924:	dc5a      	bgt.n	80019dc <HAL_GPIO_EXTI_Callback+0x170>
 8001926:	2b02      	cmp	r3, #2
 8001928:	d02b      	beq.n	8001982 <HAL_GPIO_EXTI_Callback+0x116>
 800192a:	dc57      	bgt.n	80019dc <HAL_GPIO_EXTI_Callback+0x170>
 800192c:	2b00      	cmp	r3, #0
 800192e:	d002      	beq.n	8001936 <HAL_GPIO_EXTI_Callback+0xca>
 8001930:	2b01      	cmp	r3, #1
 8001932:	d013      	beq.n	800195c <HAL_GPIO_EXTI_Callback+0xf0>
 8001934:	e052      	b.n	80019dc <HAL_GPIO_EXTI_Callback+0x170>
			  case 0:
				  if (new_state == 1) direction = 1;
 8001936:	230d      	movs	r3, #13
 8001938:	18fb      	adds	r3, r7, r3
 800193a:	781b      	ldrb	r3, [r3, #0]
 800193c:	2b01      	cmp	r3, #1
 800193e:	d103      	bne.n	8001948 <HAL_GPIO_EXTI_Callback+0xdc>
 8001940:	2317      	movs	r3, #23
 8001942:	18fb      	adds	r3, r7, r3
 8001944:	2201      	movs	r2, #1
 8001946:	701a      	strb	r2, [r3, #0]
				  if (new_state == 2) direction = -1;
 8001948:	230d      	movs	r3, #13
 800194a:	18fb      	adds	r3, r7, r3
 800194c:	781b      	ldrb	r3, [r3, #0]
 800194e:	2b02      	cmp	r3, #2
 8001950:	d13d      	bne.n	80019ce <HAL_GPIO_EXTI_Callback+0x162>
 8001952:	2317      	movs	r3, #23
 8001954:	18fb      	adds	r3, r7, r3
 8001956:	22ff      	movs	r2, #255	@ 0xff
 8001958:	701a      	strb	r2, [r3, #0]
				  break;
 800195a:	e038      	b.n	80019ce <HAL_GPIO_EXTI_Callback+0x162>
			  case 1:
				  if (new_state == 3) direction = 1;
 800195c:	230d      	movs	r3, #13
 800195e:	18fb      	adds	r3, r7, r3
 8001960:	781b      	ldrb	r3, [r3, #0]
 8001962:	2b03      	cmp	r3, #3
 8001964:	d103      	bne.n	800196e <HAL_GPIO_EXTI_Callback+0x102>
 8001966:	2317      	movs	r3, #23
 8001968:	18fb      	adds	r3, r7, r3
 800196a:	2201      	movs	r2, #1
 800196c:	701a      	strb	r2, [r3, #0]
				  if (new_state == 0) direction = -1;
 800196e:	230d      	movs	r3, #13
 8001970:	18fb      	adds	r3, r7, r3
 8001972:	781b      	ldrb	r3, [r3, #0]
 8001974:	2b00      	cmp	r3, #0
 8001976:	d12c      	bne.n	80019d2 <HAL_GPIO_EXTI_Callback+0x166>
 8001978:	2317      	movs	r3, #23
 800197a:	18fb      	adds	r3, r7, r3
 800197c:	22ff      	movs	r2, #255	@ 0xff
 800197e:	701a      	strb	r2, [r3, #0]
				  break;
 8001980:	e027      	b.n	80019d2 <HAL_GPIO_EXTI_Callback+0x166>
			  case 2:
				  if (new_state == 0) direction = 1;
 8001982:	230d      	movs	r3, #13
 8001984:	18fb      	adds	r3, r7, r3
 8001986:	781b      	ldrb	r3, [r3, #0]
 8001988:	2b00      	cmp	r3, #0
 800198a:	d103      	bne.n	8001994 <HAL_GPIO_EXTI_Callback+0x128>
 800198c:	2317      	movs	r3, #23
 800198e:	18fb      	adds	r3, r7, r3
 8001990:	2201      	movs	r2, #1
 8001992:	701a      	strb	r2, [r3, #0]
				  if (new_state == 3) direction = -1;
 8001994:	230d      	movs	r3, #13
 8001996:	18fb      	adds	r3, r7, r3
 8001998:	781b      	ldrb	r3, [r3, #0]
 800199a:	2b03      	cmp	r3, #3
 800199c:	d11b      	bne.n	80019d6 <HAL_GPIO_EXTI_Callback+0x16a>
 800199e:	2317      	movs	r3, #23
 80019a0:	18fb      	adds	r3, r7, r3
 80019a2:	22ff      	movs	r2, #255	@ 0xff
 80019a4:	701a      	strb	r2, [r3, #0]
				  break;
 80019a6:	e016      	b.n	80019d6 <HAL_GPIO_EXTI_Callback+0x16a>
			  case 3:
				  if (new_state == 2) direction = 1;
 80019a8:	230d      	movs	r3, #13
 80019aa:	18fb      	adds	r3, r7, r3
 80019ac:	781b      	ldrb	r3, [r3, #0]
 80019ae:	2b02      	cmp	r3, #2
 80019b0:	d103      	bne.n	80019ba <HAL_GPIO_EXTI_Callback+0x14e>
 80019b2:	2317      	movs	r3, #23
 80019b4:	18fb      	adds	r3, r7, r3
 80019b6:	2201      	movs	r2, #1
 80019b8:	701a      	strb	r2, [r3, #0]
				  if (new_state == 1) direction = -1;
 80019ba:	230d      	movs	r3, #13
 80019bc:	18fb      	adds	r3, r7, r3
 80019be:	781b      	ldrb	r3, [r3, #0]
 80019c0:	2b01      	cmp	r3, #1
 80019c2:	d10a      	bne.n	80019da <HAL_GPIO_EXTI_Callback+0x16e>
 80019c4:	2317      	movs	r3, #23
 80019c6:	18fb      	adds	r3, r7, r3
 80019c8:	22ff      	movs	r2, #255	@ 0xff
 80019ca:	701a      	strb	r2, [r3, #0]
				  break;
 80019cc:	e005      	b.n	80019da <HAL_GPIO_EXTI_Callback+0x16e>
				  break;
 80019ce:	46c0      	nop			@ (mov r8, r8)
 80019d0:	e004      	b.n	80019dc <HAL_GPIO_EXTI_Callback+0x170>
				  break;
 80019d2:	46c0      	nop			@ (mov r8, r8)
 80019d4:	e002      	b.n	80019dc <HAL_GPIO_EXTI_Callback+0x170>
				  break;
 80019d6:	46c0      	nop			@ (mov r8, r8)
 80019d8:	e000      	b.n	80019dc <HAL_GPIO_EXTI_Callback+0x170>
				  break;
 80019da:	46c0      	nop			@ (mov r8, r8)
		  }

		  encoder_position += direction;
 80019dc:	4b17      	ldr	r3, [pc, #92]	@ (8001a3c <HAL_GPIO_EXTI_Callback+0x1d0>)
 80019de:	781b      	ldrb	r3, [r3, #0]
 80019e0:	b25b      	sxtb	r3, r3
 80019e2:	b2da      	uxtb	r2, r3
 80019e4:	2317      	movs	r3, #23
 80019e6:	18fb      	adds	r3, r7, r3
 80019e8:	781b      	ldrb	r3, [r3, #0]
 80019ea:	18d3      	adds	r3, r2, r3
 80019ec:	b2db      	uxtb	r3, r3
 80019ee:	b25a      	sxtb	r2, r3
 80019f0:	4b12      	ldr	r3, [pc, #72]	@ (8001a3c <HAL_GPIO_EXTI_Callback+0x1d0>)
 80019f2:	701a      	strb	r2, [r3, #0]
		  if (encoder_position > ENC_POS_MAX) {
 80019f4:	4b11      	ldr	r3, [pc, #68]	@ (8001a3c <HAL_GPIO_EXTI_Callback+0x1d0>)
 80019f6:	781b      	ldrb	r3, [r3, #0]
			  encoder_position = ENC_POS_MAX;
		  }
		  else if (encoder_position < 0) {
 80019f8:	4b10      	ldr	r3, [pc, #64]	@ (8001a3c <HAL_GPIO_EXTI_Callback+0x1d0>)
 80019fa:	781b      	ldrb	r3, [r3, #0]
 80019fc:	b25b      	sxtb	r3, r3
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	da02      	bge.n	8001a08 <HAL_GPIO_EXTI_Callback+0x19c>
			  encoder_position = 0;
 8001a02:	4b0e      	ldr	r3, [pc, #56]	@ (8001a3c <HAL_GPIO_EXTI_Callback+0x1d0>)
 8001a04:	2200      	movs	r2, #0
 8001a06:	701a      	strb	r2, [r3, #0]
		  }
		  encoder_state = new_state;
 8001a08:	4b0b      	ldr	r3, [pc, #44]	@ (8001a38 <HAL_GPIO_EXTI_Callback+0x1cc>)
 8001a0a:	220d      	movs	r2, #13
 8001a0c:	18ba      	adds	r2, r7, r2
 8001a0e:	7812      	ldrb	r2, [r2, #0]
 8001a10:	701a      	strb	r2, [r3, #0]

		  channel_changed = 1;
 8001a12:	4b0b      	ldr	r3, [pc, #44]	@ (8001a40 <HAL_GPIO_EXTI_Callback+0x1d4>)
 8001a14:	2201      	movs	r2, #1
 8001a16:	701a      	strb	r2, [r3, #0]
  if(GPIO_Pin == ENC_A_Pin || GPIO_Pin == ENC_B_Pin) {
 8001a18:	e003      	b.n	8001a22 <HAL_GPIO_EXTI_Callback+0x1b6>
	  }
  }
  else {
	  __NOP();
 8001a1a:	46c0      	nop			@ (mov r8, r8)
 8001a1c:	e002      	b.n	8001a24 <HAL_GPIO_EXTI_Callback+0x1b8>
		  return;
 8001a1e:	46c0      	nop			@ (mov r8, r8)
 8001a20:	e000      	b.n	8001a24 <HAL_GPIO_EXTI_Callback+0x1b8>
  if(GPIO_Pin == ENC_A_Pin || GPIO_Pin == ENC_B_Pin) {
 8001a22:	46c0      	nop			@ (mov r8, r8)
  }
}
 8001a24:	46bd      	mov	sp, r7
 8001a26:	b007      	add	sp, #28
 8001a28:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001a2a:	46c0      	nop			@ (mov r8, r8)
 8001a2c:	20000074 	.word	0x20000074
 8001a30:	20000078 	.word	0x20000078
 8001a34:	20000079 	.word	0x20000079
 8001a38:	2000007a 	.word	0x2000007a
 8001a3c:	2000007b 	.word	0x2000007b
 8001a40:	2000007c 	.word	0x2000007c

08001a44 <delay10us>:

void delay10us() {
 8001a44:	b580      	push	{r7, lr}
 8001a46:	af00      	add	r7, sp, #0
	// Timer is running at 16/80 = 0.2 MHz, so ticks are 5 us
	__HAL_TIM_SET_COUNTER(&htim14, 0);
 8001a48:	4b07      	ldr	r3, [pc, #28]	@ (8001a68 <delay10us+0x24>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	625a      	str	r2, [r3, #36]	@ 0x24
	while ((uint16_t)__HAL_TIM_GET_COUNTER(&htim14) < 2);
 8001a50:	46c0      	nop			@ (mov r8, r8)
 8001a52:	4b05      	ldr	r3, [pc, #20]	@ (8001a68 <delay10us+0x24>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a58:	b29b      	uxth	r3, r3
 8001a5a:	2b01      	cmp	r3, #1
 8001a5c:	d9f9      	bls.n	8001a52 <delay10us+0xe>
}
 8001a5e:	46c0      	nop			@ (mov r8, r8)
 8001a60:	46c0      	nop			@ (mov r8, r8)
 8001a62:	46bd      	mov	sp, r7
 8001a64:	bd80      	pop	{r7, pc}
 8001a66:	46c0      	nop			@ (mov r8, r8)
 8001a68:	2000002c 	.word	0x2000002c

08001a6c <clearCommands>:

// Clear commands to FM receiver
void clearCommands() {
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, SENB_Pin, GPIO_PIN_SET);
 8001a70:	2390      	movs	r3, #144	@ 0x90
 8001a72:	05db      	lsls	r3, r3, #23
 8001a74:	2201      	movs	r2, #1
 8001a76:	2104      	movs	r1, #4
 8001a78:	0018      	movs	r0, r3
 8001a7a:	f000 fc46 	bl	800230a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, SCLK_Pin, GPIO_PIN_SET);
 8001a7e:	2390      	movs	r3, #144	@ 0x90
 8001a80:	05db      	lsls	r3, r3, #23
 8001a82:	2201      	movs	r2, #1
 8001a84:	2102      	movs	r1, #2
 8001a86:	0018      	movs	r0, r3
 8001a88:	f000 fc3f 	bl	800230a <HAL_GPIO_WritePin>
	delay10us();
 8001a8c:	f7ff ffda 	bl	8001a44 <delay10us>
	HAL_GPIO_WritePin(GPIOA, SCLK_Pin, GPIO_PIN_RESET);
 8001a90:	2390      	movs	r3, #144	@ 0x90
 8001a92:	05db      	lsls	r3, r3, #23
 8001a94:	2200      	movs	r2, #0
 8001a96:	2102      	movs	r1, #2
 8001a98:	0018      	movs	r0, r3
 8001a9a:	f000 fc36 	bl	800230a <HAL_GPIO_WritePin>
	delay10us();
 8001a9e:	f7ff ffd1 	bl	8001a44 <delay10us>
}
 8001aa2:	46c0      	nop			@ (mov r8, r8)
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	bd80      	pop	{r7, pc}

08001aa8 <sendCommand>:

// Function to mimic SPI since I'm dumb and didn't route to the SPI pins
void sendCommand(float channel) {
 8001aa8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001aaa:	b089      	sub	sp, #36	@ 0x24
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]

	uint8_t CTL = 0x48;
 8001ab0:	2417      	movs	r4, #23
 8001ab2:	193b      	adds	r3, r7, r4
 8001ab4:	2248      	movs	r2, #72	@ 0x48
 8001ab6:	701a      	strb	r2, [r3, #0]
	uint8_t CMD = 0x30;
 8001ab8:	2516      	movs	r5, #22
 8001aba:	197b      	adds	r3, r7, r5
 8001abc:	2230      	movs	r2, #48	@ 0x30
 8001abe:	701a      	strb	r2, [r3, #0]

	uint16_t channel_int = (int)(100 * channel);
 8001ac0:	4944      	ldr	r1, [pc, #272]	@ (8001bd4 <sendCommand+0x12c>)
 8001ac2:	6878      	ldr	r0, [r7, #4]
 8001ac4:	f7fe fcac 	bl	8000420 <__aeabi_fmul>
 8001ac8:	1c03      	adds	r3, r0, #0
 8001aca:	1c18      	adds	r0, r3, #0
 8001acc:	f7fe fde6 	bl	800069c <__aeabi_f2iz>
 8001ad0:	0002      	movs	r2, r0
 8001ad2:	2114      	movs	r1, #20
 8001ad4:	187b      	adds	r3, r7, r1
 8001ad6:	801a      	strh	r2, [r3, #0]
	uint8_t high_byte = (channel_int >> 8) & 0xFF; // 0xFF is 0000000011111111 for masking ;)
 8001ad8:	187b      	adds	r3, r7, r1
 8001ada:	881b      	ldrh	r3, [r3, #0]
 8001adc:	0a1b      	lsrs	r3, r3, #8
 8001ade:	b29a      	uxth	r2, r3
 8001ae0:	2013      	movs	r0, #19
 8001ae2:	183b      	adds	r3, r7, r0
 8001ae4:	701a      	strb	r2, [r3, #0]
	uint8_t low_byte = channel_int & 0xFF;
 8001ae6:	2612      	movs	r6, #18
 8001ae8:	19bb      	adds	r3, r7, r6
 8001aea:	187a      	adds	r2, r7, r1
 8001aec:	8812      	ldrh	r2, [r2, #0]
 8001aee:	701a      	strb	r2, [r3, #0]

	uint8_t MSG[9] = {CTL, CMD, 0x00, high_byte, low_byte, 0x00, 0x00, 0x00, 0x00};
 8001af0:	2108      	movs	r1, #8
 8001af2:	187b      	adds	r3, r7, r1
 8001af4:	193a      	adds	r2, r7, r4
 8001af6:	7812      	ldrb	r2, [r2, #0]
 8001af8:	701a      	strb	r2, [r3, #0]
 8001afa:	187b      	adds	r3, r7, r1
 8001afc:	197a      	adds	r2, r7, r5
 8001afe:	7812      	ldrb	r2, [r2, #0]
 8001b00:	705a      	strb	r2, [r3, #1]
 8001b02:	187b      	adds	r3, r7, r1
 8001b04:	2200      	movs	r2, #0
 8001b06:	709a      	strb	r2, [r3, #2]
 8001b08:	187b      	adds	r3, r7, r1
 8001b0a:	183a      	adds	r2, r7, r0
 8001b0c:	7812      	ldrb	r2, [r2, #0]
 8001b0e:	70da      	strb	r2, [r3, #3]
 8001b10:	187b      	adds	r3, r7, r1
 8001b12:	19ba      	adds	r2, r7, r6
 8001b14:	7812      	ldrb	r2, [r2, #0]
 8001b16:	711a      	strb	r2, [r3, #4]
 8001b18:	187b      	adds	r3, r7, r1
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	715a      	strb	r2, [r3, #5]
 8001b1e:	187b      	adds	r3, r7, r1
 8001b20:	2200      	movs	r2, #0
 8001b22:	719a      	strb	r2, [r3, #6]
 8001b24:	187b      	adds	r3, r7, r1
 8001b26:	2200      	movs	r2, #0
 8001b28:	71da      	strb	r2, [r3, #7]
 8001b2a:	187b      	adds	r3, r7, r1
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	721a      	strb	r2, [r3, #8]

	clearCommands(); // Just in case
 8001b30:	f7ff ff9c 	bl	8001a6c <clearCommands>

	// Set SEN low to start command
	HAL_GPIO_WritePin(GPIOA, SENB_Pin, GPIO_PIN_RESET);
 8001b34:	2390      	movs	r3, #144	@ 0x90
 8001b36:	05db      	lsls	r3, r3, #23
 8001b38:	2200      	movs	r2, #0
 8001b3a:	2104      	movs	r1, #4
 8001b3c:	0018      	movs	r0, r3
 8001b3e:	f000 fbe4 	bl	800230a <HAL_GPIO_WritePin>

	for (int i = 0; i < 9; i++) {
 8001b42:	2300      	movs	r3, #0
 8001b44:	61fb      	str	r3, [r7, #28]
 8001b46:	e03d      	b.n	8001bc4 <sendCommand+0x11c>
		uint8_t data = MSG[i];
 8001b48:	2311      	movs	r3, #17
 8001b4a:	18fb      	adds	r3, r7, r3
 8001b4c:	2208      	movs	r2, #8
 8001b4e:	18b9      	adds	r1, r7, r2
 8001b50:	69fa      	ldr	r2, [r7, #28]
 8001b52:	188a      	adds	r2, r1, r2
 8001b54:	7812      	ldrb	r2, [r2, #0]
 8001b56:	701a      	strb	r2, [r3, #0]

		for (int bit = 7; bit >= 0; bit--) {
 8001b58:	2307      	movs	r3, #7
 8001b5a:	61bb      	str	r3, [r7, #24]
 8001b5c:	e02c      	b.n	8001bb8 <sendCommand+0x110>
			if (data & (1 << bit)) {
 8001b5e:	2311      	movs	r3, #17
 8001b60:	18fb      	adds	r3, r7, r3
 8001b62:	781a      	ldrb	r2, [r3, #0]
 8001b64:	69bb      	ldr	r3, [r7, #24]
 8001b66:	411a      	asrs	r2, r3
 8001b68:	0013      	movs	r3, r2
 8001b6a:	2201      	movs	r2, #1
 8001b6c:	4013      	ands	r3, r2
 8001b6e:	d007      	beq.n	8001b80 <sendCommand+0xd8>
				HAL_GPIO_WritePin(GPIOA, SDIO_Pin, GPIO_PIN_SET);
 8001b70:	2390      	movs	r3, #144	@ 0x90
 8001b72:	05db      	lsls	r3, r3, #23
 8001b74:	2201      	movs	r2, #1
 8001b76:	2101      	movs	r1, #1
 8001b78:	0018      	movs	r0, r3
 8001b7a:	f000 fbc6 	bl	800230a <HAL_GPIO_WritePin>
 8001b7e:	e006      	b.n	8001b8e <sendCommand+0xe6>
			}
			else {
				HAL_GPIO_WritePin(GPIOA, SDIO_Pin, GPIO_PIN_RESET);
 8001b80:	2390      	movs	r3, #144	@ 0x90
 8001b82:	05db      	lsls	r3, r3, #23
 8001b84:	2200      	movs	r2, #0
 8001b86:	2101      	movs	r1, #1
 8001b88:	0018      	movs	r0, r3
 8001b8a:	f000 fbbe 	bl	800230a <HAL_GPIO_WritePin>
			}
			// Toggle clock
			HAL_GPIO_WritePin(GPIOA, SCLK_Pin, GPIO_PIN_SET);
 8001b8e:	2390      	movs	r3, #144	@ 0x90
 8001b90:	05db      	lsls	r3, r3, #23
 8001b92:	2201      	movs	r2, #1
 8001b94:	2102      	movs	r1, #2
 8001b96:	0018      	movs	r0, r3
 8001b98:	f000 fbb7 	bl	800230a <HAL_GPIO_WritePin>
			delay10us();
 8001b9c:	f7ff ff52 	bl	8001a44 <delay10us>
			HAL_GPIO_WritePin(GPIOA, SCLK_Pin, GPIO_PIN_RESET);
 8001ba0:	2390      	movs	r3, #144	@ 0x90
 8001ba2:	05db      	lsls	r3, r3, #23
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	2102      	movs	r1, #2
 8001ba8:	0018      	movs	r0, r3
 8001baa:	f000 fbae 	bl	800230a <HAL_GPIO_WritePin>
			delay10us();
 8001bae:	f7ff ff49 	bl	8001a44 <delay10us>
		for (int bit = 7; bit >= 0; bit--) {
 8001bb2:	69bb      	ldr	r3, [r7, #24]
 8001bb4:	3b01      	subs	r3, #1
 8001bb6:	61bb      	str	r3, [r7, #24]
 8001bb8:	69bb      	ldr	r3, [r7, #24]
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	dacf      	bge.n	8001b5e <sendCommand+0xb6>
	for (int i = 0; i < 9; i++) {
 8001bbe:	69fb      	ldr	r3, [r7, #28]
 8001bc0:	3301      	adds	r3, #1
 8001bc2:	61fb      	str	r3, [r7, #28]
 8001bc4:	69fb      	ldr	r3, [r7, #28]
 8001bc6:	2b08      	cmp	r3, #8
 8001bc8:	ddbe      	ble.n	8001b48 <sendCommand+0xa0>
		}
	}

}
 8001bca:	46c0      	nop			@ (mov r8, r8)
 8001bcc:	46c0      	nop			@ (mov r8, r8)
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	b009      	add	sp, #36	@ 0x24
 8001bd2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001bd4:	42c80000 	.word	0x42c80000

08001bd8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001bdc:	b672      	cpsid	i
}
 8001bde:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001be0:	46c0      	nop			@ (mov r8, r8)
 8001be2:	e7fd      	b.n	8001be0 <Error_Handler+0x8>

08001be4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b082      	sub	sp, #8
 8001be8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bea:	4b0f      	ldr	r3, [pc, #60]	@ (8001c28 <HAL_MspInit+0x44>)
 8001bec:	699a      	ldr	r2, [r3, #24]
 8001bee:	4b0e      	ldr	r3, [pc, #56]	@ (8001c28 <HAL_MspInit+0x44>)
 8001bf0:	2101      	movs	r1, #1
 8001bf2:	430a      	orrs	r2, r1
 8001bf4:	619a      	str	r2, [r3, #24]
 8001bf6:	4b0c      	ldr	r3, [pc, #48]	@ (8001c28 <HAL_MspInit+0x44>)
 8001bf8:	699b      	ldr	r3, [r3, #24]
 8001bfa:	2201      	movs	r2, #1
 8001bfc:	4013      	ands	r3, r2
 8001bfe:	607b      	str	r3, [r7, #4]
 8001c00:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c02:	4b09      	ldr	r3, [pc, #36]	@ (8001c28 <HAL_MspInit+0x44>)
 8001c04:	69da      	ldr	r2, [r3, #28]
 8001c06:	4b08      	ldr	r3, [pc, #32]	@ (8001c28 <HAL_MspInit+0x44>)
 8001c08:	2180      	movs	r1, #128	@ 0x80
 8001c0a:	0549      	lsls	r1, r1, #21
 8001c0c:	430a      	orrs	r2, r1
 8001c0e:	61da      	str	r2, [r3, #28]
 8001c10:	4b05      	ldr	r3, [pc, #20]	@ (8001c28 <HAL_MspInit+0x44>)
 8001c12:	69da      	ldr	r2, [r3, #28]
 8001c14:	2380      	movs	r3, #128	@ 0x80
 8001c16:	055b      	lsls	r3, r3, #21
 8001c18:	4013      	ands	r3, r2
 8001c1a:	603b      	str	r3, [r7, #0]
 8001c1c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c1e:	46c0      	nop			@ (mov r8, r8)
 8001c20:	46bd      	mov	sp, r7
 8001c22:	b002      	add	sp, #8
 8001c24:	bd80      	pop	{r7, pc}
 8001c26:	46c0      	nop			@ (mov r8, r8)
 8001c28:	40021000 	.word	0x40021000

08001c2c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b084      	sub	sp, #16
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM14)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	4a0a      	ldr	r2, [pc, #40]	@ (8001c64 <HAL_TIM_Base_MspInit+0x38>)
 8001c3a:	4293      	cmp	r3, r2
 8001c3c:	d10d      	bne.n	8001c5a <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM14_MspInit 0 */

  /* USER CODE END TIM14_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 8001c3e:	4b0a      	ldr	r3, [pc, #40]	@ (8001c68 <HAL_TIM_Base_MspInit+0x3c>)
 8001c40:	69da      	ldr	r2, [r3, #28]
 8001c42:	4b09      	ldr	r3, [pc, #36]	@ (8001c68 <HAL_TIM_Base_MspInit+0x3c>)
 8001c44:	2180      	movs	r1, #128	@ 0x80
 8001c46:	0049      	lsls	r1, r1, #1
 8001c48:	430a      	orrs	r2, r1
 8001c4a:	61da      	str	r2, [r3, #28]
 8001c4c:	4b06      	ldr	r3, [pc, #24]	@ (8001c68 <HAL_TIM_Base_MspInit+0x3c>)
 8001c4e:	69da      	ldr	r2, [r3, #28]
 8001c50:	2380      	movs	r3, #128	@ 0x80
 8001c52:	005b      	lsls	r3, r3, #1
 8001c54:	4013      	ands	r3, r2
 8001c56:	60fb      	str	r3, [r7, #12]
 8001c58:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM14_MspInit 1 */

  }

}
 8001c5a:	46c0      	nop			@ (mov r8, r8)
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	b004      	add	sp, #16
 8001c60:	bd80      	pop	{r7, pc}
 8001c62:	46c0      	nop			@ (mov r8, r8)
 8001c64:	40002000 	.word	0x40002000
 8001c68:	40021000 	.word	0x40021000

08001c6c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001c70:	46c0      	nop			@ (mov r8, r8)
 8001c72:	e7fd      	b.n	8001c70 <NMI_Handler+0x4>

08001c74 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c78:	46c0      	nop			@ (mov r8, r8)
 8001c7a:	e7fd      	b.n	8001c78 <HardFault_Handler+0x4>

08001c7c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001c80:	46c0      	nop			@ (mov r8, r8)
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bd80      	pop	{r7, pc}

08001c86 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c86:	b580      	push	{r7, lr}
 8001c88:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c8a:	46c0      	nop			@ (mov r8, r8)
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	bd80      	pop	{r7, pc}

08001c90 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c94:	f000 f88e 	bl	8001db4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c98:	46c0      	nop			@ (mov r8, r8)
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	bd80      	pop	{r7, pc}

08001c9e <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8001c9e:	b580      	push	{r7, lr}
 8001ca0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ENC_B_Pin);
 8001ca2:	2020      	movs	r0, #32
 8001ca4:	f000 fb4e 	bl	8002344 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ENC_A_Pin);
 8001ca8:	2040      	movs	r0, #64	@ 0x40
 8001caa:	f000 fb4b 	bl	8002344 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON_1_Pin);
 8001cae:	2080      	movs	r0, #128	@ 0x80
 8001cb0:	f000 fb48 	bl	8002344 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON_2_Pin);
 8001cb4:	2380      	movs	r3, #128	@ 0x80
 8001cb6:	009b      	lsls	r3, r3, #2
 8001cb8:	0018      	movs	r0, r3
 8001cba:	f000 fb43 	bl	8002344 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8001cbe:	46c0      	nop			@ (mov r8, r8)
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	bd80      	pop	{r7, pc}

08001cc4 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8001cc8:	46c0      	nop			@ (mov r8, r8)
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bd80      	pop	{r7, pc}
	...

08001cd0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001cd0:	480d      	ldr	r0, [pc, #52]	@ (8001d08 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001cd2:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001cd4:	f7ff fff6 	bl	8001cc4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001cd8:	480c      	ldr	r0, [pc, #48]	@ (8001d0c <LoopForever+0x6>)
  ldr r1, =_edata
 8001cda:	490d      	ldr	r1, [pc, #52]	@ (8001d10 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001cdc:	4a0d      	ldr	r2, [pc, #52]	@ (8001d14 <LoopForever+0xe>)
  movs r3, #0
 8001cde:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ce0:	e002      	b.n	8001ce8 <LoopCopyDataInit>

08001ce2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ce2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ce4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ce6:	3304      	adds	r3, #4

08001ce8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ce8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001cea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001cec:	d3f9      	bcc.n	8001ce2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001cee:	4a0a      	ldr	r2, [pc, #40]	@ (8001d18 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001cf0:	4c0a      	ldr	r4, [pc, #40]	@ (8001d1c <LoopForever+0x16>)
  movs r3, #0
 8001cf2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001cf4:	e001      	b.n	8001cfa <LoopFillZerobss>

08001cf6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001cf6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001cf8:	3204      	adds	r2, #4

08001cfa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001cfa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001cfc:	d3fb      	bcc.n	8001cf6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001cfe:	f001 f84d 	bl	8002d9c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001d02:	f7ff fc4d 	bl	80015a0 <main>

08001d06 <LoopForever>:

LoopForever:
    b LoopForever
 8001d06:	e7fe      	b.n	8001d06 <LoopForever>
  ldr   r0, =_estack
 8001d08:	20001000 	.word	0x20001000
  ldr r0, =_sdata
 8001d0c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d10:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8001d14:	08002e34 	.word	0x08002e34
  ldr r2, =_sbss
 8001d18:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001d1c:	20000084 	.word	0x20000084

08001d20 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001d20:	e7fe      	b.n	8001d20 <ADC1_IRQHandler>
	...

08001d24 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d28:	4b07      	ldr	r3, [pc, #28]	@ (8001d48 <HAL_Init+0x24>)
 8001d2a:	681a      	ldr	r2, [r3, #0]
 8001d2c:	4b06      	ldr	r3, [pc, #24]	@ (8001d48 <HAL_Init+0x24>)
 8001d2e:	2110      	movs	r1, #16
 8001d30:	430a      	orrs	r2, r1
 8001d32:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8001d34:	2003      	movs	r0, #3
 8001d36:	f000 f809 	bl	8001d4c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001d3a:	f7ff ff53 	bl	8001be4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d3e:	2300      	movs	r3, #0
}
 8001d40:	0018      	movs	r0, r3
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bd80      	pop	{r7, pc}
 8001d46:	46c0      	nop			@ (mov r8, r8)
 8001d48:	40022000 	.word	0x40022000

08001d4c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d4c:	b590      	push	{r4, r7, lr}
 8001d4e:	b083      	sub	sp, #12
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001d54:	4b14      	ldr	r3, [pc, #80]	@ (8001da8 <HAL_InitTick+0x5c>)
 8001d56:	681c      	ldr	r4, [r3, #0]
 8001d58:	4b14      	ldr	r3, [pc, #80]	@ (8001dac <HAL_InitTick+0x60>)
 8001d5a:	781b      	ldrb	r3, [r3, #0]
 8001d5c:	0019      	movs	r1, r3
 8001d5e:	23fa      	movs	r3, #250	@ 0xfa
 8001d60:	0098      	lsls	r0, r3, #2
 8001d62:	f7fe f9d1 	bl	8000108 <__udivsi3>
 8001d66:	0003      	movs	r3, r0
 8001d68:	0019      	movs	r1, r3
 8001d6a:	0020      	movs	r0, r4
 8001d6c:	f7fe f9cc 	bl	8000108 <__udivsi3>
 8001d70:	0003      	movs	r3, r0
 8001d72:	0018      	movs	r0, r3
 8001d74:	f000 f92f 	bl	8001fd6 <HAL_SYSTICK_Config>
 8001d78:	1e03      	subs	r3, r0, #0
 8001d7a:	d001      	beq.n	8001d80 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001d7c:	2301      	movs	r3, #1
 8001d7e:	e00f      	b.n	8001da0 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	2b03      	cmp	r3, #3
 8001d84:	d80b      	bhi.n	8001d9e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d86:	6879      	ldr	r1, [r7, #4]
 8001d88:	2301      	movs	r3, #1
 8001d8a:	425b      	negs	r3, r3
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	0018      	movs	r0, r3
 8001d90:	f000 f8fc 	bl	8001f8c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001d94:	4b06      	ldr	r3, [pc, #24]	@ (8001db0 <HAL_InitTick+0x64>)
 8001d96:	687a      	ldr	r2, [r7, #4]
 8001d98:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	e000      	b.n	8001da0 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8001d9e:	2301      	movs	r3, #1
}
 8001da0:	0018      	movs	r0, r3
 8001da2:	46bd      	mov	sp, r7
 8001da4:	b003      	add	sp, #12
 8001da6:	bd90      	pop	{r4, r7, pc}
 8001da8:	20000004 	.word	0x20000004
 8001dac:	2000000c 	.word	0x2000000c
 8001db0:	20000008 	.word	0x20000008

08001db4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001db8:	4b05      	ldr	r3, [pc, #20]	@ (8001dd0 <HAL_IncTick+0x1c>)
 8001dba:	781b      	ldrb	r3, [r3, #0]
 8001dbc:	001a      	movs	r2, r3
 8001dbe:	4b05      	ldr	r3, [pc, #20]	@ (8001dd4 <HAL_IncTick+0x20>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	18d2      	adds	r2, r2, r3
 8001dc4:	4b03      	ldr	r3, [pc, #12]	@ (8001dd4 <HAL_IncTick+0x20>)
 8001dc6:	601a      	str	r2, [r3, #0]
}
 8001dc8:	46c0      	nop			@ (mov r8, r8)
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bd80      	pop	{r7, pc}
 8001dce:	46c0      	nop			@ (mov r8, r8)
 8001dd0:	2000000c 	.word	0x2000000c
 8001dd4:	20000080 	.word	0x20000080

08001dd8 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	af00      	add	r7, sp, #0
  return uwTick;
 8001ddc:	4b02      	ldr	r3, [pc, #8]	@ (8001de8 <HAL_GetTick+0x10>)
 8001dde:	681b      	ldr	r3, [r3, #0]
}
 8001de0:	0018      	movs	r0, r3
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bd80      	pop	{r7, pc}
 8001de6:	46c0      	nop			@ (mov r8, r8)
 8001de8:	20000080 	.word	0x20000080

08001dec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b084      	sub	sp, #16
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001df4:	f7ff fff0 	bl	8001dd8 <HAL_GetTick>
 8001df8:	0003      	movs	r3, r0
 8001dfa:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	3301      	adds	r3, #1
 8001e04:	d005      	beq.n	8001e12 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e06:	4b0a      	ldr	r3, [pc, #40]	@ (8001e30 <HAL_Delay+0x44>)
 8001e08:	781b      	ldrb	r3, [r3, #0]
 8001e0a:	001a      	movs	r2, r3
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	189b      	adds	r3, r3, r2
 8001e10:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001e12:	46c0      	nop			@ (mov r8, r8)
 8001e14:	f7ff ffe0 	bl	8001dd8 <HAL_GetTick>
 8001e18:	0002      	movs	r2, r0
 8001e1a:	68bb      	ldr	r3, [r7, #8]
 8001e1c:	1ad3      	subs	r3, r2, r3
 8001e1e:	68fa      	ldr	r2, [r7, #12]
 8001e20:	429a      	cmp	r2, r3
 8001e22:	d8f7      	bhi.n	8001e14 <HAL_Delay+0x28>
  {
  }
}
 8001e24:	46c0      	nop			@ (mov r8, r8)
 8001e26:	46c0      	nop			@ (mov r8, r8)
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	b004      	add	sp, #16
 8001e2c:	bd80      	pop	{r7, pc}
 8001e2e:	46c0      	nop			@ (mov r8, r8)
 8001e30:	2000000c 	.word	0x2000000c

08001e34 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b082      	sub	sp, #8
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	0002      	movs	r2, r0
 8001e3c:	1dfb      	adds	r3, r7, #7
 8001e3e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001e40:	1dfb      	adds	r3, r7, #7
 8001e42:	781b      	ldrb	r3, [r3, #0]
 8001e44:	2b7f      	cmp	r3, #127	@ 0x7f
 8001e46:	d809      	bhi.n	8001e5c <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e48:	1dfb      	adds	r3, r7, #7
 8001e4a:	781b      	ldrb	r3, [r3, #0]
 8001e4c:	001a      	movs	r2, r3
 8001e4e:	231f      	movs	r3, #31
 8001e50:	401a      	ands	r2, r3
 8001e52:	4b04      	ldr	r3, [pc, #16]	@ (8001e64 <__NVIC_EnableIRQ+0x30>)
 8001e54:	2101      	movs	r1, #1
 8001e56:	4091      	lsls	r1, r2
 8001e58:	000a      	movs	r2, r1
 8001e5a:	601a      	str	r2, [r3, #0]
  }
}
 8001e5c:	46c0      	nop			@ (mov r8, r8)
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	b002      	add	sp, #8
 8001e62:	bd80      	pop	{r7, pc}
 8001e64:	e000e100 	.word	0xe000e100

08001e68 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e68:	b590      	push	{r4, r7, lr}
 8001e6a:	b083      	sub	sp, #12
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	0002      	movs	r2, r0
 8001e70:	6039      	str	r1, [r7, #0]
 8001e72:	1dfb      	adds	r3, r7, #7
 8001e74:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001e76:	1dfb      	adds	r3, r7, #7
 8001e78:	781b      	ldrb	r3, [r3, #0]
 8001e7a:	2b7f      	cmp	r3, #127	@ 0x7f
 8001e7c:	d828      	bhi.n	8001ed0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001e7e:	4a2f      	ldr	r2, [pc, #188]	@ (8001f3c <__NVIC_SetPriority+0xd4>)
 8001e80:	1dfb      	adds	r3, r7, #7
 8001e82:	781b      	ldrb	r3, [r3, #0]
 8001e84:	b25b      	sxtb	r3, r3
 8001e86:	089b      	lsrs	r3, r3, #2
 8001e88:	33c0      	adds	r3, #192	@ 0xc0
 8001e8a:	009b      	lsls	r3, r3, #2
 8001e8c:	589b      	ldr	r3, [r3, r2]
 8001e8e:	1dfa      	adds	r2, r7, #7
 8001e90:	7812      	ldrb	r2, [r2, #0]
 8001e92:	0011      	movs	r1, r2
 8001e94:	2203      	movs	r2, #3
 8001e96:	400a      	ands	r2, r1
 8001e98:	00d2      	lsls	r2, r2, #3
 8001e9a:	21ff      	movs	r1, #255	@ 0xff
 8001e9c:	4091      	lsls	r1, r2
 8001e9e:	000a      	movs	r2, r1
 8001ea0:	43d2      	mvns	r2, r2
 8001ea2:	401a      	ands	r2, r3
 8001ea4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	019b      	lsls	r3, r3, #6
 8001eaa:	22ff      	movs	r2, #255	@ 0xff
 8001eac:	401a      	ands	r2, r3
 8001eae:	1dfb      	adds	r3, r7, #7
 8001eb0:	781b      	ldrb	r3, [r3, #0]
 8001eb2:	0018      	movs	r0, r3
 8001eb4:	2303      	movs	r3, #3
 8001eb6:	4003      	ands	r3, r0
 8001eb8:	00db      	lsls	r3, r3, #3
 8001eba:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001ebc:	481f      	ldr	r0, [pc, #124]	@ (8001f3c <__NVIC_SetPriority+0xd4>)
 8001ebe:	1dfb      	adds	r3, r7, #7
 8001ec0:	781b      	ldrb	r3, [r3, #0]
 8001ec2:	b25b      	sxtb	r3, r3
 8001ec4:	089b      	lsrs	r3, r3, #2
 8001ec6:	430a      	orrs	r2, r1
 8001ec8:	33c0      	adds	r3, #192	@ 0xc0
 8001eca:	009b      	lsls	r3, r3, #2
 8001ecc:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001ece:	e031      	b.n	8001f34 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001ed0:	4a1b      	ldr	r2, [pc, #108]	@ (8001f40 <__NVIC_SetPriority+0xd8>)
 8001ed2:	1dfb      	adds	r3, r7, #7
 8001ed4:	781b      	ldrb	r3, [r3, #0]
 8001ed6:	0019      	movs	r1, r3
 8001ed8:	230f      	movs	r3, #15
 8001eda:	400b      	ands	r3, r1
 8001edc:	3b08      	subs	r3, #8
 8001ede:	089b      	lsrs	r3, r3, #2
 8001ee0:	3306      	adds	r3, #6
 8001ee2:	009b      	lsls	r3, r3, #2
 8001ee4:	18d3      	adds	r3, r2, r3
 8001ee6:	3304      	adds	r3, #4
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	1dfa      	adds	r2, r7, #7
 8001eec:	7812      	ldrb	r2, [r2, #0]
 8001eee:	0011      	movs	r1, r2
 8001ef0:	2203      	movs	r2, #3
 8001ef2:	400a      	ands	r2, r1
 8001ef4:	00d2      	lsls	r2, r2, #3
 8001ef6:	21ff      	movs	r1, #255	@ 0xff
 8001ef8:	4091      	lsls	r1, r2
 8001efa:	000a      	movs	r2, r1
 8001efc:	43d2      	mvns	r2, r2
 8001efe:	401a      	ands	r2, r3
 8001f00:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001f02:	683b      	ldr	r3, [r7, #0]
 8001f04:	019b      	lsls	r3, r3, #6
 8001f06:	22ff      	movs	r2, #255	@ 0xff
 8001f08:	401a      	ands	r2, r3
 8001f0a:	1dfb      	adds	r3, r7, #7
 8001f0c:	781b      	ldrb	r3, [r3, #0]
 8001f0e:	0018      	movs	r0, r3
 8001f10:	2303      	movs	r3, #3
 8001f12:	4003      	ands	r3, r0
 8001f14:	00db      	lsls	r3, r3, #3
 8001f16:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001f18:	4809      	ldr	r0, [pc, #36]	@ (8001f40 <__NVIC_SetPriority+0xd8>)
 8001f1a:	1dfb      	adds	r3, r7, #7
 8001f1c:	781b      	ldrb	r3, [r3, #0]
 8001f1e:	001c      	movs	r4, r3
 8001f20:	230f      	movs	r3, #15
 8001f22:	4023      	ands	r3, r4
 8001f24:	3b08      	subs	r3, #8
 8001f26:	089b      	lsrs	r3, r3, #2
 8001f28:	430a      	orrs	r2, r1
 8001f2a:	3306      	adds	r3, #6
 8001f2c:	009b      	lsls	r3, r3, #2
 8001f2e:	18c3      	adds	r3, r0, r3
 8001f30:	3304      	adds	r3, #4
 8001f32:	601a      	str	r2, [r3, #0]
}
 8001f34:	46c0      	nop			@ (mov r8, r8)
 8001f36:	46bd      	mov	sp, r7
 8001f38:	b003      	add	sp, #12
 8001f3a:	bd90      	pop	{r4, r7, pc}
 8001f3c:	e000e100 	.word	0xe000e100
 8001f40:	e000ed00 	.word	0xe000ed00

08001f44 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b082      	sub	sp, #8
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	1e5a      	subs	r2, r3, #1
 8001f50:	2380      	movs	r3, #128	@ 0x80
 8001f52:	045b      	lsls	r3, r3, #17
 8001f54:	429a      	cmp	r2, r3
 8001f56:	d301      	bcc.n	8001f5c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f58:	2301      	movs	r3, #1
 8001f5a:	e010      	b.n	8001f7e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f5c:	4b0a      	ldr	r3, [pc, #40]	@ (8001f88 <SysTick_Config+0x44>)
 8001f5e:	687a      	ldr	r2, [r7, #4]
 8001f60:	3a01      	subs	r2, #1
 8001f62:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f64:	2301      	movs	r3, #1
 8001f66:	425b      	negs	r3, r3
 8001f68:	2103      	movs	r1, #3
 8001f6a:	0018      	movs	r0, r3
 8001f6c:	f7ff ff7c 	bl	8001e68 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f70:	4b05      	ldr	r3, [pc, #20]	@ (8001f88 <SysTick_Config+0x44>)
 8001f72:	2200      	movs	r2, #0
 8001f74:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f76:	4b04      	ldr	r3, [pc, #16]	@ (8001f88 <SysTick_Config+0x44>)
 8001f78:	2207      	movs	r2, #7
 8001f7a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f7c:	2300      	movs	r3, #0
}
 8001f7e:	0018      	movs	r0, r3
 8001f80:	46bd      	mov	sp, r7
 8001f82:	b002      	add	sp, #8
 8001f84:	bd80      	pop	{r7, pc}
 8001f86:	46c0      	nop			@ (mov r8, r8)
 8001f88:	e000e010 	.word	0xe000e010

08001f8c <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b084      	sub	sp, #16
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	60b9      	str	r1, [r7, #8]
 8001f94:	607a      	str	r2, [r7, #4]
 8001f96:	210f      	movs	r1, #15
 8001f98:	187b      	adds	r3, r7, r1
 8001f9a:	1c02      	adds	r2, r0, #0
 8001f9c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001f9e:	68ba      	ldr	r2, [r7, #8]
 8001fa0:	187b      	adds	r3, r7, r1
 8001fa2:	781b      	ldrb	r3, [r3, #0]
 8001fa4:	b25b      	sxtb	r3, r3
 8001fa6:	0011      	movs	r1, r2
 8001fa8:	0018      	movs	r0, r3
 8001faa:	f7ff ff5d 	bl	8001e68 <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
}
 8001fae:	46c0      	nop			@ (mov r8, r8)
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	b004      	add	sp, #16
 8001fb4:	bd80      	pop	{r7, pc}

08001fb6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fb6:	b580      	push	{r7, lr}
 8001fb8:	b082      	sub	sp, #8
 8001fba:	af00      	add	r7, sp, #0
 8001fbc:	0002      	movs	r2, r0
 8001fbe:	1dfb      	adds	r3, r7, #7
 8001fc0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001fc2:	1dfb      	adds	r3, r7, #7
 8001fc4:	781b      	ldrb	r3, [r3, #0]
 8001fc6:	b25b      	sxtb	r3, r3
 8001fc8:	0018      	movs	r0, r3
 8001fca:	f7ff ff33 	bl	8001e34 <__NVIC_EnableIRQ>
}
 8001fce:	46c0      	nop			@ (mov r8, r8)
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	b002      	add	sp, #8
 8001fd4:	bd80      	pop	{r7, pc}

08001fd6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001fd6:	b580      	push	{r7, lr}
 8001fd8:	b082      	sub	sp, #8
 8001fda:	af00      	add	r7, sp, #0
 8001fdc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	0018      	movs	r0, r3
 8001fe2:	f7ff ffaf 	bl	8001f44 <SysTick_Config>
 8001fe6:	0003      	movs	r3, r0
}
 8001fe8:	0018      	movs	r0, r3
 8001fea:	46bd      	mov	sp, r7
 8001fec:	b002      	add	sp, #8
 8001fee:	bd80      	pop	{r7, pc}

08001ff0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b086      	sub	sp, #24
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
 8001ff8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ffe:	e14f      	b.n	80022a0 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	2101      	movs	r1, #1
 8002006:	697a      	ldr	r2, [r7, #20]
 8002008:	4091      	lsls	r1, r2
 800200a:	000a      	movs	r2, r1
 800200c:	4013      	ands	r3, r2
 800200e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	2b00      	cmp	r3, #0
 8002014:	d100      	bne.n	8002018 <HAL_GPIO_Init+0x28>
 8002016:	e140      	b.n	800229a <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	685b      	ldr	r3, [r3, #4]
 800201c:	2203      	movs	r2, #3
 800201e:	4013      	ands	r3, r2
 8002020:	2b01      	cmp	r3, #1
 8002022:	d005      	beq.n	8002030 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	685b      	ldr	r3, [r3, #4]
 8002028:	2203      	movs	r2, #3
 800202a:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800202c:	2b02      	cmp	r3, #2
 800202e:	d130      	bne.n	8002092 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	689b      	ldr	r3, [r3, #8]
 8002034:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002036:	697b      	ldr	r3, [r7, #20]
 8002038:	005b      	lsls	r3, r3, #1
 800203a:	2203      	movs	r2, #3
 800203c:	409a      	lsls	r2, r3
 800203e:	0013      	movs	r3, r2
 8002040:	43da      	mvns	r2, r3
 8002042:	693b      	ldr	r3, [r7, #16]
 8002044:	4013      	ands	r3, r2
 8002046:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	68da      	ldr	r2, [r3, #12]
 800204c:	697b      	ldr	r3, [r7, #20]
 800204e:	005b      	lsls	r3, r3, #1
 8002050:	409a      	lsls	r2, r3
 8002052:	0013      	movs	r3, r2
 8002054:	693a      	ldr	r2, [r7, #16]
 8002056:	4313      	orrs	r3, r2
 8002058:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	693a      	ldr	r2, [r7, #16]
 800205e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	685b      	ldr	r3, [r3, #4]
 8002064:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002066:	2201      	movs	r2, #1
 8002068:	697b      	ldr	r3, [r7, #20]
 800206a:	409a      	lsls	r2, r3
 800206c:	0013      	movs	r3, r2
 800206e:	43da      	mvns	r2, r3
 8002070:	693b      	ldr	r3, [r7, #16]
 8002072:	4013      	ands	r3, r2
 8002074:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	685b      	ldr	r3, [r3, #4]
 800207a:	091b      	lsrs	r3, r3, #4
 800207c:	2201      	movs	r2, #1
 800207e:	401a      	ands	r2, r3
 8002080:	697b      	ldr	r3, [r7, #20]
 8002082:	409a      	lsls	r2, r3
 8002084:	0013      	movs	r3, r2
 8002086:	693a      	ldr	r2, [r7, #16]
 8002088:	4313      	orrs	r3, r2
 800208a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	693a      	ldr	r2, [r7, #16]
 8002090:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002092:	683b      	ldr	r3, [r7, #0]
 8002094:	685b      	ldr	r3, [r3, #4]
 8002096:	2203      	movs	r2, #3
 8002098:	4013      	ands	r3, r2
 800209a:	2b03      	cmp	r3, #3
 800209c:	d017      	beq.n	80020ce <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	68db      	ldr	r3, [r3, #12]
 80020a2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80020a4:	697b      	ldr	r3, [r7, #20]
 80020a6:	005b      	lsls	r3, r3, #1
 80020a8:	2203      	movs	r2, #3
 80020aa:	409a      	lsls	r2, r3
 80020ac:	0013      	movs	r3, r2
 80020ae:	43da      	mvns	r2, r3
 80020b0:	693b      	ldr	r3, [r7, #16]
 80020b2:	4013      	ands	r3, r2
 80020b4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	689a      	ldr	r2, [r3, #8]
 80020ba:	697b      	ldr	r3, [r7, #20]
 80020bc:	005b      	lsls	r3, r3, #1
 80020be:	409a      	lsls	r2, r3
 80020c0:	0013      	movs	r3, r2
 80020c2:	693a      	ldr	r2, [r7, #16]
 80020c4:	4313      	orrs	r3, r2
 80020c6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	693a      	ldr	r2, [r7, #16]
 80020cc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80020ce:	683b      	ldr	r3, [r7, #0]
 80020d0:	685b      	ldr	r3, [r3, #4]
 80020d2:	2203      	movs	r2, #3
 80020d4:	4013      	ands	r3, r2
 80020d6:	2b02      	cmp	r3, #2
 80020d8:	d123      	bne.n	8002122 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80020da:	697b      	ldr	r3, [r7, #20]
 80020dc:	08da      	lsrs	r2, r3, #3
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	3208      	adds	r2, #8
 80020e2:	0092      	lsls	r2, r2, #2
 80020e4:	58d3      	ldr	r3, [r2, r3]
 80020e6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80020e8:	697b      	ldr	r3, [r7, #20]
 80020ea:	2207      	movs	r2, #7
 80020ec:	4013      	ands	r3, r2
 80020ee:	009b      	lsls	r3, r3, #2
 80020f0:	220f      	movs	r2, #15
 80020f2:	409a      	lsls	r2, r3
 80020f4:	0013      	movs	r3, r2
 80020f6:	43da      	mvns	r2, r3
 80020f8:	693b      	ldr	r3, [r7, #16]
 80020fa:	4013      	ands	r3, r2
 80020fc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80020fe:	683b      	ldr	r3, [r7, #0]
 8002100:	691a      	ldr	r2, [r3, #16]
 8002102:	697b      	ldr	r3, [r7, #20]
 8002104:	2107      	movs	r1, #7
 8002106:	400b      	ands	r3, r1
 8002108:	009b      	lsls	r3, r3, #2
 800210a:	409a      	lsls	r2, r3
 800210c:	0013      	movs	r3, r2
 800210e:	693a      	ldr	r2, [r7, #16]
 8002110:	4313      	orrs	r3, r2
 8002112:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002114:	697b      	ldr	r3, [r7, #20]
 8002116:	08da      	lsrs	r2, r3, #3
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	3208      	adds	r2, #8
 800211c:	0092      	lsls	r2, r2, #2
 800211e:	6939      	ldr	r1, [r7, #16]
 8002120:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002128:	697b      	ldr	r3, [r7, #20]
 800212a:	005b      	lsls	r3, r3, #1
 800212c:	2203      	movs	r2, #3
 800212e:	409a      	lsls	r2, r3
 8002130:	0013      	movs	r3, r2
 8002132:	43da      	mvns	r2, r3
 8002134:	693b      	ldr	r3, [r7, #16]
 8002136:	4013      	ands	r3, r2
 8002138:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800213a:	683b      	ldr	r3, [r7, #0]
 800213c:	685b      	ldr	r3, [r3, #4]
 800213e:	2203      	movs	r2, #3
 8002140:	401a      	ands	r2, r3
 8002142:	697b      	ldr	r3, [r7, #20]
 8002144:	005b      	lsls	r3, r3, #1
 8002146:	409a      	lsls	r2, r3
 8002148:	0013      	movs	r3, r2
 800214a:	693a      	ldr	r2, [r7, #16]
 800214c:	4313      	orrs	r3, r2
 800214e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	693a      	ldr	r2, [r7, #16]
 8002154:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	685a      	ldr	r2, [r3, #4]
 800215a:	23c0      	movs	r3, #192	@ 0xc0
 800215c:	029b      	lsls	r3, r3, #10
 800215e:	4013      	ands	r3, r2
 8002160:	d100      	bne.n	8002164 <HAL_GPIO_Init+0x174>
 8002162:	e09a      	b.n	800229a <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002164:	4b54      	ldr	r3, [pc, #336]	@ (80022b8 <HAL_GPIO_Init+0x2c8>)
 8002166:	699a      	ldr	r2, [r3, #24]
 8002168:	4b53      	ldr	r3, [pc, #332]	@ (80022b8 <HAL_GPIO_Init+0x2c8>)
 800216a:	2101      	movs	r1, #1
 800216c:	430a      	orrs	r2, r1
 800216e:	619a      	str	r2, [r3, #24]
 8002170:	4b51      	ldr	r3, [pc, #324]	@ (80022b8 <HAL_GPIO_Init+0x2c8>)
 8002172:	699b      	ldr	r3, [r3, #24]
 8002174:	2201      	movs	r2, #1
 8002176:	4013      	ands	r3, r2
 8002178:	60bb      	str	r3, [r7, #8]
 800217a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800217c:	4a4f      	ldr	r2, [pc, #316]	@ (80022bc <HAL_GPIO_Init+0x2cc>)
 800217e:	697b      	ldr	r3, [r7, #20]
 8002180:	089b      	lsrs	r3, r3, #2
 8002182:	3302      	adds	r3, #2
 8002184:	009b      	lsls	r3, r3, #2
 8002186:	589b      	ldr	r3, [r3, r2]
 8002188:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800218a:	697b      	ldr	r3, [r7, #20]
 800218c:	2203      	movs	r2, #3
 800218e:	4013      	ands	r3, r2
 8002190:	009b      	lsls	r3, r3, #2
 8002192:	220f      	movs	r2, #15
 8002194:	409a      	lsls	r2, r3
 8002196:	0013      	movs	r3, r2
 8002198:	43da      	mvns	r2, r3
 800219a:	693b      	ldr	r3, [r7, #16]
 800219c:	4013      	ands	r3, r2
 800219e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80021a0:	687a      	ldr	r2, [r7, #4]
 80021a2:	2390      	movs	r3, #144	@ 0x90
 80021a4:	05db      	lsls	r3, r3, #23
 80021a6:	429a      	cmp	r2, r3
 80021a8:	d013      	beq.n	80021d2 <HAL_GPIO_Init+0x1e2>
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	4a44      	ldr	r2, [pc, #272]	@ (80022c0 <HAL_GPIO_Init+0x2d0>)
 80021ae:	4293      	cmp	r3, r2
 80021b0:	d00d      	beq.n	80021ce <HAL_GPIO_Init+0x1de>
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	4a43      	ldr	r2, [pc, #268]	@ (80022c4 <HAL_GPIO_Init+0x2d4>)
 80021b6:	4293      	cmp	r3, r2
 80021b8:	d007      	beq.n	80021ca <HAL_GPIO_Init+0x1da>
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	4a42      	ldr	r2, [pc, #264]	@ (80022c8 <HAL_GPIO_Init+0x2d8>)
 80021be:	4293      	cmp	r3, r2
 80021c0:	d101      	bne.n	80021c6 <HAL_GPIO_Init+0x1d6>
 80021c2:	2303      	movs	r3, #3
 80021c4:	e006      	b.n	80021d4 <HAL_GPIO_Init+0x1e4>
 80021c6:	2305      	movs	r3, #5
 80021c8:	e004      	b.n	80021d4 <HAL_GPIO_Init+0x1e4>
 80021ca:	2302      	movs	r3, #2
 80021cc:	e002      	b.n	80021d4 <HAL_GPIO_Init+0x1e4>
 80021ce:	2301      	movs	r3, #1
 80021d0:	e000      	b.n	80021d4 <HAL_GPIO_Init+0x1e4>
 80021d2:	2300      	movs	r3, #0
 80021d4:	697a      	ldr	r2, [r7, #20]
 80021d6:	2103      	movs	r1, #3
 80021d8:	400a      	ands	r2, r1
 80021da:	0092      	lsls	r2, r2, #2
 80021dc:	4093      	lsls	r3, r2
 80021de:	693a      	ldr	r2, [r7, #16]
 80021e0:	4313      	orrs	r3, r2
 80021e2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80021e4:	4935      	ldr	r1, [pc, #212]	@ (80022bc <HAL_GPIO_Init+0x2cc>)
 80021e6:	697b      	ldr	r3, [r7, #20]
 80021e8:	089b      	lsrs	r3, r3, #2
 80021ea:	3302      	adds	r3, #2
 80021ec:	009b      	lsls	r3, r3, #2
 80021ee:	693a      	ldr	r2, [r7, #16]
 80021f0:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80021f2:	4b36      	ldr	r3, [pc, #216]	@ (80022cc <HAL_GPIO_Init+0x2dc>)
 80021f4:	689b      	ldr	r3, [r3, #8]
 80021f6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	43da      	mvns	r2, r3
 80021fc:	693b      	ldr	r3, [r7, #16]
 80021fe:	4013      	ands	r3, r2
 8002200:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002202:	683b      	ldr	r3, [r7, #0]
 8002204:	685a      	ldr	r2, [r3, #4]
 8002206:	2380      	movs	r3, #128	@ 0x80
 8002208:	035b      	lsls	r3, r3, #13
 800220a:	4013      	ands	r3, r2
 800220c:	d003      	beq.n	8002216 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 800220e:	693a      	ldr	r2, [r7, #16]
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	4313      	orrs	r3, r2
 8002214:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002216:	4b2d      	ldr	r3, [pc, #180]	@ (80022cc <HAL_GPIO_Init+0x2dc>)
 8002218:	693a      	ldr	r2, [r7, #16]
 800221a:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 800221c:	4b2b      	ldr	r3, [pc, #172]	@ (80022cc <HAL_GPIO_Init+0x2dc>)
 800221e:	68db      	ldr	r3, [r3, #12]
 8002220:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	43da      	mvns	r2, r3
 8002226:	693b      	ldr	r3, [r7, #16]
 8002228:	4013      	ands	r3, r2
 800222a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	685a      	ldr	r2, [r3, #4]
 8002230:	2380      	movs	r3, #128	@ 0x80
 8002232:	039b      	lsls	r3, r3, #14
 8002234:	4013      	ands	r3, r2
 8002236:	d003      	beq.n	8002240 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8002238:	693a      	ldr	r2, [r7, #16]
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	4313      	orrs	r3, r2
 800223e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002240:	4b22      	ldr	r3, [pc, #136]	@ (80022cc <HAL_GPIO_Init+0x2dc>)
 8002242:	693a      	ldr	r2, [r7, #16]
 8002244:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8002246:	4b21      	ldr	r3, [pc, #132]	@ (80022cc <HAL_GPIO_Init+0x2dc>)
 8002248:	685b      	ldr	r3, [r3, #4]
 800224a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	43da      	mvns	r2, r3
 8002250:	693b      	ldr	r3, [r7, #16]
 8002252:	4013      	ands	r3, r2
 8002254:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002256:	683b      	ldr	r3, [r7, #0]
 8002258:	685a      	ldr	r2, [r3, #4]
 800225a:	2380      	movs	r3, #128	@ 0x80
 800225c:	029b      	lsls	r3, r3, #10
 800225e:	4013      	ands	r3, r2
 8002260:	d003      	beq.n	800226a <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8002262:	693a      	ldr	r2, [r7, #16]
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	4313      	orrs	r3, r2
 8002268:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800226a:	4b18      	ldr	r3, [pc, #96]	@ (80022cc <HAL_GPIO_Init+0x2dc>)
 800226c:	693a      	ldr	r2, [r7, #16]
 800226e:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8002270:	4b16      	ldr	r3, [pc, #88]	@ (80022cc <HAL_GPIO_Init+0x2dc>)
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	43da      	mvns	r2, r3
 800227a:	693b      	ldr	r3, [r7, #16]
 800227c:	4013      	ands	r3, r2
 800227e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	685a      	ldr	r2, [r3, #4]
 8002284:	2380      	movs	r3, #128	@ 0x80
 8002286:	025b      	lsls	r3, r3, #9
 8002288:	4013      	ands	r3, r2
 800228a:	d003      	beq.n	8002294 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 800228c:	693a      	ldr	r2, [r7, #16]
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	4313      	orrs	r3, r2
 8002292:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002294:	4b0d      	ldr	r3, [pc, #52]	@ (80022cc <HAL_GPIO_Init+0x2dc>)
 8002296:	693a      	ldr	r2, [r7, #16]
 8002298:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800229a:	697b      	ldr	r3, [r7, #20]
 800229c:	3301      	adds	r3, #1
 800229e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	681a      	ldr	r2, [r3, #0]
 80022a4:	697b      	ldr	r3, [r7, #20]
 80022a6:	40da      	lsrs	r2, r3
 80022a8:	1e13      	subs	r3, r2, #0
 80022aa:	d000      	beq.n	80022ae <HAL_GPIO_Init+0x2be>
 80022ac:	e6a8      	b.n	8002000 <HAL_GPIO_Init+0x10>
  } 
}
 80022ae:	46c0      	nop			@ (mov r8, r8)
 80022b0:	46c0      	nop			@ (mov r8, r8)
 80022b2:	46bd      	mov	sp, r7
 80022b4:	b006      	add	sp, #24
 80022b6:	bd80      	pop	{r7, pc}
 80022b8:	40021000 	.word	0x40021000
 80022bc:	40010000 	.word	0x40010000
 80022c0:	48000400 	.word	0x48000400
 80022c4:	48000800 	.word	0x48000800
 80022c8:	48000c00 	.word	0x48000c00
 80022cc:	40010400 	.word	0x40010400

080022d0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b084      	sub	sp, #16
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
 80022d8:	000a      	movs	r2, r1
 80022da:	1cbb      	adds	r3, r7, #2
 80022dc:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	691b      	ldr	r3, [r3, #16]
 80022e2:	1cba      	adds	r2, r7, #2
 80022e4:	8812      	ldrh	r2, [r2, #0]
 80022e6:	4013      	ands	r3, r2
 80022e8:	d004      	beq.n	80022f4 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 80022ea:	230f      	movs	r3, #15
 80022ec:	18fb      	adds	r3, r7, r3
 80022ee:	2201      	movs	r2, #1
 80022f0:	701a      	strb	r2, [r3, #0]
 80022f2:	e003      	b.n	80022fc <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80022f4:	230f      	movs	r3, #15
 80022f6:	18fb      	adds	r3, r7, r3
 80022f8:	2200      	movs	r2, #0
 80022fa:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 80022fc:	230f      	movs	r3, #15
 80022fe:	18fb      	adds	r3, r7, r3
 8002300:	781b      	ldrb	r3, [r3, #0]
  }
 8002302:	0018      	movs	r0, r3
 8002304:	46bd      	mov	sp, r7
 8002306:	b004      	add	sp, #16
 8002308:	bd80      	pop	{r7, pc}

0800230a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800230a:	b580      	push	{r7, lr}
 800230c:	b082      	sub	sp, #8
 800230e:	af00      	add	r7, sp, #0
 8002310:	6078      	str	r0, [r7, #4]
 8002312:	0008      	movs	r0, r1
 8002314:	0011      	movs	r1, r2
 8002316:	1cbb      	adds	r3, r7, #2
 8002318:	1c02      	adds	r2, r0, #0
 800231a:	801a      	strh	r2, [r3, #0]
 800231c:	1c7b      	adds	r3, r7, #1
 800231e:	1c0a      	adds	r2, r1, #0
 8002320:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002322:	1c7b      	adds	r3, r7, #1
 8002324:	781b      	ldrb	r3, [r3, #0]
 8002326:	2b00      	cmp	r3, #0
 8002328:	d004      	beq.n	8002334 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800232a:	1cbb      	adds	r3, r7, #2
 800232c:	881a      	ldrh	r2, [r3, #0]
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002332:	e003      	b.n	800233c <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002334:	1cbb      	adds	r3, r7, #2
 8002336:	881a      	ldrh	r2, [r3, #0]
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800233c:	46c0      	nop			@ (mov r8, r8)
 800233e:	46bd      	mov	sp, r7
 8002340:	b002      	add	sp, #8
 8002342:	bd80      	pop	{r7, pc}

08002344 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	b082      	sub	sp, #8
 8002348:	af00      	add	r7, sp, #0
 800234a:	0002      	movs	r2, r0
 800234c:	1dbb      	adds	r3, r7, #6
 800234e:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002350:	4b09      	ldr	r3, [pc, #36]	@ (8002378 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8002352:	695b      	ldr	r3, [r3, #20]
 8002354:	1dba      	adds	r2, r7, #6
 8002356:	8812      	ldrh	r2, [r2, #0]
 8002358:	4013      	ands	r3, r2
 800235a:	d008      	beq.n	800236e <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800235c:	4b06      	ldr	r3, [pc, #24]	@ (8002378 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 800235e:	1dba      	adds	r2, r7, #6
 8002360:	8812      	ldrh	r2, [r2, #0]
 8002362:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002364:	1dbb      	adds	r3, r7, #6
 8002366:	881b      	ldrh	r3, [r3, #0]
 8002368:	0018      	movs	r0, r3
 800236a:	f7ff fa7f 	bl	800186c <HAL_GPIO_EXTI_Callback>
  }
}
 800236e:	46c0      	nop			@ (mov r8, r8)
 8002370:	46bd      	mov	sp, r7
 8002372:	b002      	add	sp, #8
 8002374:	bd80      	pop	{r7, pc}
 8002376:	46c0      	nop			@ (mov r8, r8)
 8002378:	40010400 	.word	0x40010400

0800237c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b088      	sub	sp, #32
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	2b00      	cmp	r3, #0
 8002388:	d101      	bne.n	800238e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800238a:	2301      	movs	r3, #1
 800238c:	e301      	b.n	8002992 <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	2201      	movs	r2, #1
 8002394:	4013      	ands	r3, r2
 8002396:	d100      	bne.n	800239a <HAL_RCC_OscConfig+0x1e>
 8002398:	e08d      	b.n	80024b6 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800239a:	4bc3      	ldr	r3, [pc, #780]	@ (80026a8 <HAL_RCC_OscConfig+0x32c>)
 800239c:	685b      	ldr	r3, [r3, #4]
 800239e:	220c      	movs	r2, #12
 80023a0:	4013      	ands	r3, r2
 80023a2:	2b04      	cmp	r3, #4
 80023a4:	d00e      	beq.n	80023c4 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80023a6:	4bc0      	ldr	r3, [pc, #768]	@ (80026a8 <HAL_RCC_OscConfig+0x32c>)
 80023a8:	685b      	ldr	r3, [r3, #4]
 80023aa:	220c      	movs	r2, #12
 80023ac:	4013      	ands	r3, r2
 80023ae:	2b08      	cmp	r3, #8
 80023b0:	d116      	bne.n	80023e0 <HAL_RCC_OscConfig+0x64>
 80023b2:	4bbd      	ldr	r3, [pc, #756]	@ (80026a8 <HAL_RCC_OscConfig+0x32c>)
 80023b4:	685a      	ldr	r2, [r3, #4]
 80023b6:	2380      	movs	r3, #128	@ 0x80
 80023b8:	025b      	lsls	r3, r3, #9
 80023ba:	401a      	ands	r2, r3
 80023bc:	2380      	movs	r3, #128	@ 0x80
 80023be:	025b      	lsls	r3, r3, #9
 80023c0:	429a      	cmp	r2, r3
 80023c2:	d10d      	bne.n	80023e0 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023c4:	4bb8      	ldr	r3, [pc, #736]	@ (80026a8 <HAL_RCC_OscConfig+0x32c>)
 80023c6:	681a      	ldr	r2, [r3, #0]
 80023c8:	2380      	movs	r3, #128	@ 0x80
 80023ca:	029b      	lsls	r3, r3, #10
 80023cc:	4013      	ands	r3, r2
 80023ce:	d100      	bne.n	80023d2 <HAL_RCC_OscConfig+0x56>
 80023d0:	e070      	b.n	80024b4 <HAL_RCC_OscConfig+0x138>
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	685b      	ldr	r3, [r3, #4]
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d000      	beq.n	80023dc <HAL_RCC_OscConfig+0x60>
 80023da:	e06b      	b.n	80024b4 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 80023dc:	2301      	movs	r3, #1
 80023de:	e2d8      	b.n	8002992 <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	685b      	ldr	r3, [r3, #4]
 80023e4:	2b01      	cmp	r3, #1
 80023e6:	d107      	bne.n	80023f8 <HAL_RCC_OscConfig+0x7c>
 80023e8:	4baf      	ldr	r3, [pc, #700]	@ (80026a8 <HAL_RCC_OscConfig+0x32c>)
 80023ea:	681a      	ldr	r2, [r3, #0]
 80023ec:	4bae      	ldr	r3, [pc, #696]	@ (80026a8 <HAL_RCC_OscConfig+0x32c>)
 80023ee:	2180      	movs	r1, #128	@ 0x80
 80023f0:	0249      	lsls	r1, r1, #9
 80023f2:	430a      	orrs	r2, r1
 80023f4:	601a      	str	r2, [r3, #0]
 80023f6:	e02f      	b.n	8002458 <HAL_RCC_OscConfig+0xdc>
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	685b      	ldr	r3, [r3, #4]
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d10c      	bne.n	800241a <HAL_RCC_OscConfig+0x9e>
 8002400:	4ba9      	ldr	r3, [pc, #676]	@ (80026a8 <HAL_RCC_OscConfig+0x32c>)
 8002402:	681a      	ldr	r2, [r3, #0]
 8002404:	4ba8      	ldr	r3, [pc, #672]	@ (80026a8 <HAL_RCC_OscConfig+0x32c>)
 8002406:	49a9      	ldr	r1, [pc, #676]	@ (80026ac <HAL_RCC_OscConfig+0x330>)
 8002408:	400a      	ands	r2, r1
 800240a:	601a      	str	r2, [r3, #0]
 800240c:	4ba6      	ldr	r3, [pc, #664]	@ (80026a8 <HAL_RCC_OscConfig+0x32c>)
 800240e:	681a      	ldr	r2, [r3, #0]
 8002410:	4ba5      	ldr	r3, [pc, #660]	@ (80026a8 <HAL_RCC_OscConfig+0x32c>)
 8002412:	49a7      	ldr	r1, [pc, #668]	@ (80026b0 <HAL_RCC_OscConfig+0x334>)
 8002414:	400a      	ands	r2, r1
 8002416:	601a      	str	r2, [r3, #0]
 8002418:	e01e      	b.n	8002458 <HAL_RCC_OscConfig+0xdc>
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	685b      	ldr	r3, [r3, #4]
 800241e:	2b05      	cmp	r3, #5
 8002420:	d10e      	bne.n	8002440 <HAL_RCC_OscConfig+0xc4>
 8002422:	4ba1      	ldr	r3, [pc, #644]	@ (80026a8 <HAL_RCC_OscConfig+0x32c>)
 8002424:	681a      	ldr	r2, [r3, #0]
 8002426:	4ba0      	ldr	r3, [pc, #640]	@ (80026a8 <HAL_RCC_OscConfig+0x32c>)
 8002428:	2180      	movs	r1, #128	@ 0x80
 800242a:	02c9      	lsls	r1, r1, #11
 800242c:	430a      	orrs	r2, r1
 800242e:	601a      	str	r2, [r3, #0]
 8002430:	4b9d      	ldr	r3, [pc, #628]	@ (80026a8 <HAL_RCC_OscConfig+0x32c>)
 8002432:	681a      	ldr	r2, [r3, #0]
 8002434:	4b9c      	ldr	r3, [pc, #624]	@ (80026a8 <HAL_RCC_OscConfig+0x32c>)
 8002436:	2180      	movs	r1, #128	@ 0x80
 8002438:	0249      	lsls	r1, r1, #9
 800243a:	430a      	orrs	r2, r1
 800243c:	601a      	str	r2, [r3, #0]
 800243e:	e00b      	b.n	8002458 <HAL_RCC_OscConfig+0xdc>
 8002440:	4b99      	ldr	r3, [pc, #612]	@ (80026a8 <HAL_RCC_OscConfig+0x32c>)
 8002442:	681a      	ldr	r2, [r3, #0]
 8002444:	4b98      	ldr	r3, [pc, #608]	@ (80026a8 <HAL_RCC_OscConfig+0x32c>)
 8002446:	4999      	ldr	r1, [pc, #612]	@ (80026ac <HAL_RCC_OscConfig+0x330>)
 8002448:	400a      	ands	r2, r1
 800244a:	601a      	str	r2, [r3, #0]
 800244c:	4b96      	ldr	r3, [pc, #600]	@ (80026a8 <HAL_RCC_OscConfig+0x32c>)
 800244e:	681a      	ldr	r2, [r3, #0]
 8002450:	4b95      	ldr	r3, [pc, #596]	@ (80026a8 <HAL_RCC_OscConfig+0x32c>)
 8002452:	4997      	ldr	r1, [pc, #604]	@ (80026b0 <HAL_RCC_OscConfig+0x334>)
 8002454:	400a      	ands	r2, r1
 8002456:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	685b      	ldr	r3, [r3, #4]
 800245c:	2b00      	cmp	r3, #0
 800245e:	d014      	beq.n	800248a <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002460:	f7ff fcba 	bl	8001dd8 <HAL_GetTick>
 8002464:	0003      	movs	r3, r0
 8002466:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002468:	e008      	b.n	800247c <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800246a:	f7ff fcb5 	bl	8001dd8 <HAL_GetTick>
 800246e:	0002      	movs	r2, r0
 8002470:	69bb      	ldr	r3, [r7, #24]
 8002472:	1ad3      	subs	r3, r2, r3
 8002474:	2b64      	cmp	r3, #100	@ 0x64
 8002476:	d901      	bls.n	800247c <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8002478:	2303      	movs	r3, #3
 800247a:	e28a      	b.n	8002992 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800247c:	4b8a      	ldr	r3, [pc, #552]	@ (80026a8 <HAL_RCC_OscConfig+0x32c>)
 800247e:	681a      	ldr	r2, [r3, #0]
 8002480:	2380      	movs	r3, #128	@ 0x80
 8002482:	029b      	lsls	r3, r3, #10
 8002484:	4013      	ands	r3, r2
 8002486:	d0f0      	beq.n	800246a <HAL_RCC_OscConfig+0xee>
 8002488:	e015      	b.n	80024b6 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800248a:	f7ff fca5 	bl	8001dd8 <HAL_GetTick>
 800248e:	0003      	movs	r3, r0
 8002490:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002492:	e008      	b.n	80024a6 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002494:	f7ff fca0 	bl	8001dd8 <HAL_GetTick>
 8002498:	0002      	movs	r2, r0
 800249a:	69bb      	ldr	r3, [r7, #24]
 800249c:	1ad3      	subs	r3, r2, r3
 800249e:	2b64      	cmp	r3, #100	@ 0x64
 80024a0:	d901      	bls.n	80024a6 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 80024a2:	2303      	movs	r3, #3
 80024a4:	e275      	b.n	8002992 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024a6:	4b80      	ldr	r3, [pc, #512]	@ (80026a8 <HAL_RCC_OscConfig+0x32c>)
 80024a8:	681a      	ldr	r2, [r3, #0]
 80024aa:	2380      	movs	r3, #128	@ 0x80
 80024ac:	029b      	lsls	r3, r3, #10
 80024ae:	4013      	ands	r3, r2
 80024b0:	d1f0      	bne.n	8002494 <HAL_RCC_OscConfig+0x118>
 80024b2:	e000      	b.n	80024b6 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024b4:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	2202      	movs	r2, #2
 80024bc:	4013      	ands	r3, r2
 80024be:	d100      	bne.n	80024c2 <HAL_RCC_OscConfig+0x146>
 80024c0:	e069      	b.n	8002596 <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80024c2:	4b79      	ldr	r3, [pc, #484]	@ (80026a8 <HAL_RCC_OscConfig+0x32c>)
 80024c4:	685b      	ldr	r3, [r3, #4]
 80024c6:	220c      	movs	r2, #12
 80024c8:	4013      	ands	r3, r2
 80024ca:	d00b      	beq.n	80024e4 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80024cc:	4b76      	ldr	r3, [pc, #472]	@ (80026a8 <HAL_RCC_OscConfig+0x32c>)
 80024ce:	685b      	ldr	r3, [r3, #4]
 80024d0:	220c      	movs	r2, #12
 80024d2:	4013      	ands	r3, r2
 80024d4:	2b08      	cmp	r3, #8
 80024d6:	d11c      	bne.n	8002512 <HAL_RCC_OscConfig+0x196>
 80024d8:	4b73      	ldr	r3, [pc, #460]	@ (80026a8 <HAL_RCC_OscConfig+0x32c>)
 80024da:	685a      	ldr	r2, [r3, #4]
 80024dc:	2380      	movs	r3, #128	@ 0x80
 80024de:	025b      	lsls	r3, r3, #9
 80024e0:	4013      	ands	r3, r2
 80024e2:	d116      	bne.n	8002512 <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024e4:	4b70      	ldr	r3, [pc, #448]	@ (80026a8 <HAL_RCC_OscConfig+0x32c>)
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	2202      	movs	r2, #2
 80024ea:	4013      	ands	r3, r2
 80024ec:	d005      	beq.n	80024fa <HAL_RCC_OscConfig+0x17e>
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	68db      	ldr	r3, [r3, #12]
 80024f2:	2b01      	cmp	r3, #1
 80024f4:	d001      	beq.n	80024fa <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80024f6:	2301      	movs	r3, #1
 80024f8:	e24b      	b.n	8002992 <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024fa:	4b6b      	ldr	r3, [pc, #428]	@ (80026a8 <HAL_RCC_OscConfig+0x32c>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	22f8      	movs	r2, #248	@ 0xf8
 8002500:	4393      	bics	r3, r2
 8002502:	0019      	movs	r1, r3
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	691b      	ldr	r3, [r3, #16]
 8002508:	00da      	lsls	r2, r3, #3
 800250a:	4b67      	ldr	r3, [pc, #412]	@ (80026a8 <HAL_RCC_OscConfig+0x32c>)
 800250c:	430a      	orrs	r2, r1
 800250e:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002510:	e041      	b.n	8002596 <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	68db      	ldr	r3, [r3, #12]
 8002516:	2b00      	cmp	r3, #0
 8002518:	d024      	beq.n	8002564 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800251a:	4b63      	ldr	r3, [pc, #396]	@ (80026a8 <HAL_RCC_OscConfig+0x32c>)
 800251c:	681a      	ldr	r2, [r3, #0]
 800251e:	4b62      	ldr	r3, [pc, #392]	@ (80026a8 <HAL_RCC_OscConfig+0x32c>)
 8002520:	2101      	movs	r1, #1
 8002522:	430a      	orrs	r2, r1
 8002524:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002526:	f7ff fc57 	bl	8001dd8 <HAL_GetTick>
 800252a:	0003      	movs	r3, r0
 800252c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800252e:	e008      	b.n	8002542 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002530:	f7ff fc52 	bl	8001dd8 <HAL_GetTick>
 8002534:	0002      	movs	r2, r0
 8002536:	69bb      	ldr	r3, [r7, #24]
 8002538:	1ad3      	subs	r3, r2, r3
 800253a:	2b02      	cmp	r3, #2
 800253c:	d901      	bls.n	8002542 <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 800253e:	2303      	movs	r3, #3
 8002540:	e227      	b.n	8002992 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002542:	4b59      	ldr	r3, [pc, #356]	@ (80026a8 <HAL_RCC_OscConfig+0x32c>)
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	2202      	movs	r2, #2
 8002548:	4013      	ands	r3, r2
 800254a:	d0f1      	beq.n	8002530 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800254c:	4b56      	ldr	r3, [pc, #344]	@ (80026a8 <HAL_RCC_OscConfig+0x32c>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	22f8      	movs	r2, #248	@ 0xf8
 8002552:	4393      	bics	r3, r2
 8002554:	0019      	movs	r1, r3
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	691b      	ldr	r3, [r3, #16]
 800255a:	00da      	lsls	r2, r3, #3
 800255c:	4b52      	ldr	r3, [pc, #328]	@ (80026a8 <HAL_RCC_OscConfig+0x32c>)
 800255e:	430a      	orrs	r2, r1
 8002560:	601a      	str	r2, [r3, #0]
 8002562:	e018      	b.n	8002596 <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002564:	4b50      	ldr	r3, [pc, #320]	@ (80026a8 <HAL_RCC_OscConfig+0x32c>)
 8002566:	681a      	ldr	r2, [r3, #0]
 8002568:	4b4f      	ldr	r3, [pc, #316]	@ (80026a8 <HAL_RCC_OscConfig+0x32c>)
 800256a:	2101      	movs	r1, #1
 800256c:	438a      	bics	r2, r1
 800256e:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002570:	f7ff fc32 	bl	8001dd8 <HAL_GetTick>
 8002574:	0003      	movs	r3, r0
 8002576:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002578:	e008      	b.n	800258c <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800257a:	f7ff fc2d 	bl	8001dd8 <HAL_GetTick>
 800257e:	0002      	movs	r2, r0
 8002580:	69bb      	ldr	r3, [r7, #24]
 8002582:	1ad3      	subs	r3, r2, r3
 8002584:	2b02      	cmp	r3, #2
 8002586:	d901      	bls.n	800258c <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8002588:	2303      	movs	r3, #3
 800258a:	e202      	b.n	8002992 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800258c:	4b46      	ldr	r3, [pc, #280]	@ (80026a8 <HAL_RCC_OscConfig+0x32c>)
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	2202      	movs	r2, #2
 8002592:	4013      	ands	r3, r2
 8002594:	d1f1      	bne.n	800257a <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	2208      	movs	r2, #8
 800259c:	4013      	ands	r3, r2
 800259e:	d036      	beq.n	800260e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	69db      	ldr	r3, [r3, #28]
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d019      	beq.n	80025dc <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80025a8:	4b3f      	ldr	r3, [pc, #252]	@ (80026a8 <HAL_RCC_OscConfig+0x32c>)
 80025aa:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80025ac:	4b3e      	ldr	r3, [pc, #248]	@ (80026a8 <HAL_RCC_OscConfig+0x32c>)
 80025ae:	2101      	movs	r1, #1
 80025b0:	430a      	orrs	r2, r1
 80025b2:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025b4:	f7ff fc10 	bl	8001dd8 <HAL_GetTick>
 80025b8:	0003      	movs	r3, r0
 80025ba:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025bc:	e008      	b.n	80025d0 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80025be:	f7ff fc0b 	bl	8001dd8 <HAL_GetTick>
 80025c2:	0002      	movs	r2, r0
 80025c4:	69bb      	ldr	r3, [r7, #24]
 80025c6:	1ad3      	subs	r3, r2, r3
 80025c8:	2b02      	cmp	r3, #2
 80025ca:	d901      	bls.n	80025d0 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 80025cc:	2303      	movs	r3, #3
 80025ce:	e1e0      	b.n	8002992 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025d0:	4b35      	ldr	r3, [pc, #212]	@ (80026a8 <HAL_RCC_OscConfig+0x32c>)
 80025d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025d4:	2202      	movs	r2, #2
 80025d6:	4013      	ands	r3, r2
 80025d8:	d0f1      	beq.n	80025be <HAL_RCC_OscConfig+0x242>
 80025da:	e018      	b.n	800260e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80025dc:	4b32      	ldr	r3, [pc, #200]	@ (80026a8 <HAL_RCC_OscConfig+0x32c>)
 80025de:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80025e0:	4b31      	ldr	r3, [pc, #196]	@ (80026a8 <HAL_RCC_OscConfig+0x32c>)
 80025e2:	2101      	movs	r1, #1
 80025e4:	438a      	bics	r2, r1
 80025e6:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025e8:	f7ff fbf6 	bl	8001dd8 <HAL_GetTick>
 80025ec:	0003      	movs	r3, r0
 80025ee:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025f0:	e008      	b.n	8002604 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80025f2:	f7ff fbf1 	bl	8001dd8 <HAL_GetTick>
 80025f6:	0002      	movs	r2, r0
 80025f8:	69bb      	ldr	r3, [r7, #24]
 80025fa:	1ad3      	subs	r3, r2, r3
 80025fc:	2b02      	cmp	r3, #2
 80025fe:	d901      	bls.n	8002604 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8002600:	2303      	movs	r3, #3
 8002602:	e1c6      	b.n	8002992 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002604:	4b28      	ldr	r3, [pc, #160]	@ (80026a8 <HAL_RCC_OscConfig+0x32c>)
 8002606:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002608:	2202      	movs	r2, #2
 800260a:	4013      	ands	r3, r2
 800260c:	d1f1      	bne.n	80025f2 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	2204      	movs	r2, #4
 8002614:	4013      	ands	r3, r2
 8002616:	d100      	bne.n	800261a <HAL_RCC_OscConfig+0x29e>
 8002618:	e0b4      	b.n	8002784 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 800261a:	201f      	movs	r0, #31
 800261c:	183b      	adds	r3, r7, r0
 800261e:	2200      	movs	r2, #0
 8002620:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002622:	4b21      	ldr	r3, [pc, #132]	@ (80026a8 <HAL_RCC_OscConfig+0x32c>)
 8002624:	69da      	ldr	r2, [r3, #28]
 8002626:	2380      	movs	r3, #128	@ 0x80
 8002628:	055b      	lsls	r3, r3, #21
 800262a:	4013      	ands	r3, r2
 800262c:	d110      	bne.n	8002650 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800262e:	4b1e      	ldr	r3, [pc, #120]	@ (80026a8 <HAL_RCC_OscConfig+0x32c>)
 8002630:	69da      	ldr	r2, [r3, #28]
 8002632:	4b1d      	ldr	r3, [pc, #116]	@ (80026a8 <HAL_RCC_OscConfig+0x32c>)
 8002634:	2180      	movs	r1, #128	@ 0x80
 8002636:	0549      	lsls	r1, r1, #21
 8002638:	430a      	orrs	r2, r1
 800263a:	61da      	str	r2, [r3, #28]
 800263c:	4b1a      	ldr	r3, [pc, #104]	@ (80026a8 <HAL_RCC_OscConfig+0x32c>)
 800263e:	69da      	ldr	r2, [r3, #28]
 8002640:	2380      	movs	r3, #128	@ 0x80
 8002642:	055b      	lsls	r3, r3, #21
 8002644:	4013      	ands	r3, r2
 8002646:	60fb      	str	r3, [r7, #12]
 8002648:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800264a:	183b      	adds	r3, r7, r0
 800264c:	2201      	movs	r2, #1
 800264e:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002650:	4b18      	ldr	r3, [pc, #96]	@ (80026b4 <HAL_RCC_OscConfig+0x338>)
 8002652:	681a      	ldr	r2, [r3, #0]
 8002654:	2380      	movs	r3, #128	@ 0x80
 8002656:	005b      	lsls	r3, r3, #1
 8002658:	4013      	ands	r3, r2
 800265a:	d11a      	bne.n	8002692 <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800265c:	4b15      	ldr	r3, [pc, #84]	@ (80026b4 <HAL_RCC_OscConfig+0x338>)
 800265e:	681a      	ldr	r2, [r3, #0]
 8002660:	4b14      	ldr	r3, [pc, #80]	@ (80026b4 <HAL_RCC_OscConfig+0x338>)
 8002662:	2180      	movs	r1, #128	@ 0x80
 8002664:	0049      	lsls	r1, r1, #1
 8002666:	430a      	orrs	r2, r1
 8002668:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800266a:	f7ff fbb5 	bl	8001dd8 <HAL_GetTick>
 800266e:	0003      	movs	r3, r0
 8002670:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002672:	e008      	b.n	8002686 <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002674:	f7ff fbb0 	bl	8001dd8 <HAL_GetTick>
 8002678:	0002      	movs	r2, r0
 800267a:	69bb      	ldr	r3, [r7, #24]
 800267c:	1ad3      	subs	r3, r2, r3
 800267e:	2b64      	cmp	r3, #100	@ 0x64
 8002680:	d901      	bls.n	8002686 <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 8002682:	2303      	movs	r3, #3
 8002684:	e185      	b.n	8002992 <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002686:	4b0b      	ldr	r3, [pc, #44]	@ (80026b4 <HAL_RCC_OscConfig+0x338>)
 8002688:	681a      	ldr	r2, [r3, #0]
 800268a:	2380      	movs	r3, #128	@ 0x80
 800268c:	005b      	lsls	r3, r3, #1
 800268e:	4013      	ands	r3, r2
 8002690:	d0f0      	beq.n	8002674 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	689b      	ldr	r3, [r3, #8]
 8002696:	2b01      	cmp	r3, #1
 8002698:	d10e      	bne.n	80026b8 <HAL_RCC_OscConfig+0x33c>
 800269a:	4b03      	ldr	r3, [pc, #12]	@ (80026a8 <HAL_RCC_OscConfig+0x32c>)
 800269c:	6a1a      	ldr	r2, [r3, #32]
 800269e:	4b02      	ldr	r3, [pc, #8]	@ (80026a8 <HAL_RCC_OscConfig+0x32c>)
 80026a0:	2101      	movs	r1, #1
 80026a2:	430a      	orrs	r2, r1
 80026a4:	621a      	str	r2, [r3, #32]
 80026a6:	e035      	b.n	8002714 <HAL_RCC_OscConfig+0x398>
 80026a8:	40021000 	.word	0x40021000
 80026ac:	fffeffff 	.word	0xfffeffff
 80026b0:	fffbffff 	.word	0xfffbffff
 80026b4:	40007000 	.word	0x40007000
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	689b      	ldr	r3, [r3, #8]
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d10c      	bne.n	80026da <HAL_RCC_OscConfig+0x35e>
 80026c0:	4bb6      	ldr	r3, [pc, #728]	@ (800299c <HAL_RCC_OscConfig+0x620>)
 80026c2:	6a1a      	ldr	r2, [r3, #32]
 80026c4:	4bb5      	ldr	r3, [pc, #724]	@ (800299c <HAL_RCC_OscConfig+0x620>)
 80026c6:	2101      	movs	r1, #1
 80026c8:	438a      	bics	r2, r1
 80026ca:	621a      	str	r2, [r3, #32]
 80026cc:	4bb3      	ldr	r3, [pc, #716]	@ (800299c <HAL_RCC_OscConfig+0x620>)
 80026ce:	6a1a      	ldr	r2, [r3, #32]
 80026d0:	4bb2      	ldr	r3, [pc, #712]	@ (800299c <HAL_RCC_OscConfig+0x620>)
 80026d2:	2104      	movs	r1, #4
 80026d4:	438a      	bics	r2, r1
 80026d6:	621a      	str	r2, [r3, #32]
 80026d8:	e01c      	b.n	8002714 <HAL_RCC_OscConfig+0x398>
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	689b      	ldr	r3, [r3, #8]
 80026de:	2b05      	cmp	r3, #5
 80026e0:	d10c      	bne.n	80026fc <HAL_RCC_OscConfig+0x380>
 80026e2:	4bae      	ldr	r3, [pc, #696]	@ (800299c <HAL_RCC_OscConfig+0x620>)
 80026e4:	6a1a      	ldr	r2, [r3, #32]
 80026e6:	4bad      	ldr	r3, [pc, #692]	@ (800299c <HAL_RCC_OscConfig+0x620>)
 80026e8:	2104      	movs	r1, #4
 80026ea:	430a      	orrs	r2, r1
 80026ec:	621a      	str	r2, [r3, #32]
 80026ee:	4bab      	ldr	r3, [pc, #684]	@ (800299c <HAL_RCC_OscConfig+0x620>)
 80026f0:	6a1a      	ldr	r2, [r3, #32]
 80026f2:	4baa      	ldr	r3, [pc, #680]	@ (800299c <HAL_RCC_OscConfig+0x620>)
 80026f4:	2101      	movs	r1, #1
 80026f6:	430a      	orrs	r2, r1
 80026f8:	621a      	str	r2, [r3, #32]
 80026fa:	e00b      	b.n	8002714 <HAL_RCC_OscConfig+0x398>
 80026fc:	4ba7      	ldr	r3, [pc, #668]	@ (800299c <HAL_RCC_OscConfig+0x620>)
 80026fe:	6a1a      	ldr	r2, [r3, #32]
 8002700:	4ba6      	ldr	r3, [pc, #664]	@ (800299c <HAL_RCC_OscConfig+0x620>)
 8002702:	2101      	movs	r1, #1
 8002704:	438a      	bics	r2, r1
 8002706:	621a      	str	r2, [r3, #32]
 8002708:	4ba4      	ldr	r3, [pc, #656]	@ (800299c <HAL_RCC_OscConfig+0x620>)
 800270a:	6a1a      	ldr	r2, [r3, #32]
 800270c:	4ba3      	ldr	r3, [pc, #652]	@ (800299c <HAL_RCC_OscConfig+0x620>)
 800270e:	2104      	movs	r1, #4
 8002710:	438a      	bics	r2, r1
 8002712:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	689b      	ldr	r3, [r3, #8]
 8002718:	2b00      	cmp	r3, #0
 800271a:	d014      	beq.n	8002746 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800271c:	f7ff fb5c 	bl	8001dd8 <HAL_GetTick>
 8002720:	0003      	movs	r3, r0
 8002722:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002724:	e009      	b.n	800273a <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002726:	f7ff fb57 	bl	8001dd8 <HAL_GetTick>
 800272a:	0002      	movs	r2, r0
 800272c:	69bb      	ldr	r3, [r7, #24]
 800272e:	1ad3      	subs	r3, r2, r3
 8002730:	4a9b      	ldr	r2, [pc, #620]	@ (80029a0 <HAL_RCC_OscConfig+0x624>)
 8002732:	4293      	cmp	r3, r2
 8002734:	d901      	bls.n	800273a <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 8002736:	2303      	movs	r3, #3
 8002738:	e12b      	b.n	8002992 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800273a:	4b98      	ldr	r3, [pc, #608]	@ (800299c <HAL_RCC_OscConfig+0x620>)
 800273c:	6a1b      	ldr	r3, [r3, #32]
 800273e:	2202      	movs	r2, #2
 8002740:	4013      	ands	r3, r2
 8002742:	d0f0      	beq.n	8002726 <HAL_RCC_OscConfig+0x3aa>
 8002744:	e013      	b.n	800276e <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002746:	f7ff fb47 	bl	8001dd8 <HAL_GetTick>
 800274a:	0003      	movs	r3, r0
 800274c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800274e:	e009      	b.n	8002764 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002750:	f7ff fb42 	bl	8001dd8 <HAL_GetTick>
 8002754:	0002      	movs	r2, r0
 8002756:	69bb      	ldr	r3, [r7, #24]
 8002758:	1ad3      	subs	r3, r2, r3
 800275a:	4a91      	ldr	r2, [pc, #580]	@ (80029a0 <HAL_RCC_OscConfig+0x624>)
 800275c:	4293      	cmp	r3, r2
 800275e:	d901      	bls.n	8002764 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8002760:	2303      	movs	r3, #3
 8002762:	e116      	b.n	8002992 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002764:	4b8d      	ldr	r3, [pc, #564]	@ (800299c <HAL_RCC_OscConfig+0x620>)
 8002766:	6a1b      	ldr	r3, [r3, #32]
 8002768:	2202      	movs	r2, #2
 800276a:	4013      	ands	r3, r2
 800276c:	d1f0      	bne.n	8002750 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800276e:	231f      	movs	r3, #31
 8002770:	18fb      	adds	r3, r7, r3
 8002772:	781b      	ldrb	r3, [r3, #0]
 8002774:	2b01      	cmp	r3, #1
 8002776:	d105      	bne.n	8002784 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002778:	4b88      	ldr	r3, [pc, #544]	@ (800299c <HAL_RCC_OscConfig+0x620>)
 800277a:	69da      	ldr	r2, [r3, #28]
 800277c:	4b87      	ldr	r3, [pc, #540]	@ (800299c <HAL_RCC_OscConfig+0x620>)
 800277e:	4989      	ldr	r1, [pc, #548]	@ (80029a4 <HAL_RCC_OscConfig+0x628>)
 8002780:	400a      	ands	r2, r1
 8002782:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	2210      	movs	r2, #16
 800278a:	4013      	ands	r3, r2
 800278c:	d063      	beq.n	8002856 <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	695b      	ldr	r3, [r3, #20]
 8002792:	2b01      	cmp	r3, #1
 8002794:	d12a      	bne.n	80027ec <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002796:	4b81      	ldr	r3, [pc, #516]	@ (800299c <HAL_RCC_OscConfig+0x620>)
 8002798:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800279a:	4b80      	ldr	r3, [pc, #512]	@ (800299c <HAL_RCC_OscConfig+0x620>)
 800279c:	2104      	movs	r1, #4
 800279e:	430a      	orrs	r2, r1
 80027a0:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 80027a2:	4b7e      	ldr	r3, [pc, #504]	@ (800299c <HAL_RCC_OscConfig+0x620>)
 80027a4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80027a6:	4b7d      	ldr	r3, [pc, #500]	@ (800299c <HAL_RCC_OscConfig+0x620>)
 80027a8:	2101      	movs	r1, #1
 80027aa:	430a      	orrs	r2, r1
 80027ac:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027ae:	f7ff fb13 	bl	8001dd8 <HAL_GetTick>
 80027b2:	0003      	movs	r3, r0
 80027b4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80027b6:	e008      	b.n	80027ca <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80027b8:	f7ff fb0e 	bl	8001dd8 <HAL_GetTick>
 80027bc:	0002      	movs	r2, r0
 80027be:	69bb      	ldr	r3, [r7, #24]
 80027c0:	1ad3      	subs	r3, r2, r3
 80027c2:	2b02      	cmp	r3, #2
 80027c4:	d901      	bls.n	80027ca <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 80027c6:	2303      	movs	r3, #3
 80027c8:	e0e3      	b.n	8002992 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80027ca:	4b74      	ldr	r3, [pc, #464]	@ (800299c <HAL_RCC_OscConfig+0x620>)
 80027cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80027ce:	2202      	movs	r2, #2
 80027d0:	4013      	ands	r3, r2
 80027d2:	d0f1      	beq.n	80027b8 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80027d4:	4b71      	ldr	r3, [pc, #452]	@ (800299c <HAL_RCC_OscConfig+0x620>)
 80027d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80027d8:	22f8      	movs	r2, #248	@ 0xf8
 80027da:	4393      	bics	r3, r2
 80027dc:	0019      	movs	r1, r3
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	699b      	ldr	r3, [r3, #24]
 80027e2:	00da      	lsls	r2, r3, #3
 80027e4:	4b6d      	ldr	r3, [pc, #436]	@ (800299c <HAL_RCC_OscConfig+0x620>)
 80027e6:	430a      	orrs	r2, r1
 80027e8:	635a      	str	r2, [r3, #52]	@ 0x34
 80027ea:	e034      	b.n	8002856 <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	695b      	ldr	r3, [r3, #20]
 80027f0:	3305      	adds	r3, #5
 80027f2:	d111      	bne.n	8002818 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80027f4:	4b69      	ldr	r3, [pc, #420]	@ (800299c <HAL_RCC_OscConfig+0x620>)
 80027f6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80027f8:	4b68      	ldr	r3, [pc, #416]	@ (800299c <HAL_RCC_OscConfig+0x620>)
 80027fa:	2104      	movs	r1, #4
 80027fc:	438a      	bics	r2, r1
 80027fe:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002800:	4b66      	ldr	r3, [pc, #408]	@ (800299c <HAL_RCC_OscConfig+0x620>)
 8002802:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002804:	22f8      	movs	r2, #248	@ 0xf8
 8002806:	4393      	bics	r3, r2
 8002808:	0019      	movs	r1, r3
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	699b      	ldr	r3, [r3, #24]
 800280e:	00da      	lsls	r2, r3, #3
 8002810:	4b62      	ldr	r3, [pc, #392]	@ (800299c <HAL_RCC_OscConfig+0x620>)
 8002812:	430a      	orrs	r2, r1
 8002814:	635a      	str	r2, [r3, #52]	@ 0x34
 8002816:	e01e      	b.n	8002856 <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002818:	4b60      	ldr	r3, [pc, #384]	@ (800299c <HAL_RCC_OscConfig+0x620>)
 800281a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800281c:	4b5f      	ldr	r3, [pc, #380]	@ (800299c <HAL_RCC_OscConfig+0x620>)
 800281e:	2104      	movs	r1, #4
 8002820:	430a      	orrs	r2, r1
 8002822:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8002824:	4b5d      	ldr	r3, [pc, #372]	@ (800299c <HAL_RCC_OscConfig+0x620>)
 8002826:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002828:	4b5c      	ldr	r3, [pc, #368]	@ (800299c <HAL_RCC_OscConfig+0x620>)
 800282a:	2101      	movs	r1, #1
 800282c:	438a      	bics	r2, r1
 800282e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002830:	f7ff fad2 	bl	8001dd8 <HAL_GetTick>
 8002834:	0003      	movs	r3, r0
 8002836:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002838:	e008      	b.n	800284c <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800283a:	f7ff facd 	bl	8001dd8 <HAL_GetTick>
 800283e:	0002      	movs	r2, r0
 8002840:	69bb      	ldr	r3, [r7, #24]
 8002842:	1ad3      	subs	r3, r2, r3
 8002844:	2b02      	cmp	r3, #2
 8002846:	d901      	bls.n	800284c <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 8002848:	2303      	movs	r3, #3
 800284a:	e0a2      	b.n	8002992 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800284c:	4b53      	ldr	r3, [pc, #332]	@ (800299c <HAL_RCC_OscConfig+0x620>)
 800284e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002850:	2202      	movs	r2, #2
 8002852:	4013      	ands	r3, r2
 8002854:	d1f1      	bne.n	800283a <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6a1b      	ldr	r3, [r3, #32]
 800285a:	2b00      	cmp	r3, #0
 800285c:	d100      	bne.n	8002860 <HAL_RCC_OscConfig+0x4e4>
 800285e:	e097      	b.n	8002990 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002860:	4b4e      	ldr	r3, [pc, #312]	@ (800299c <HAL_RCC_OscConfig+0x620>)
 8002862:	685b      	ldr	r3, [r3, #4]
 8002864:	220c      	movs	r2, #12
 8002866:	4013      	ands	r3, r2
 8002868:	2b08      	cmp	r3, #8
 800286a:	d100      	bne.n	800286e <HAL_RCC_OscConfig+0x4f2>
 800286c:	e06b      	b.n	8002946 <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	6a1b      	ldr	r3, [r3, #32]
 8002872:	2b02      	cmp	r3, #2
 8002874:	d14c      	bne.n	8002910 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002876:	4b49      	ldr	r3, [pc, #292]	@ (800299c <HAL_RCC_OscConfig+0x620>)
 8002878:	681a      	ldr	r2, [r3, #0]
 800287a:	4b48      	ldr	r3, [pc, #288]	@ (800299c <HAL_RCC_OscConfig+0x620>)
 800287c:	494a      	ldr	r1, [pc, #296]	@ (80029a8 <HAL_RCC_OscConfig+0x62c>)
 800287e:	400a      	ands	r2, r1
 8002880:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002882:	f7ff faa9 	bl	8001dd8 <HAL_GetTick>
 8002886:	0003      	movs	r3, r0
 8002888:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800288a:	e008      	b.n	800289e <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800288c:	f7ff faa4 	bl	8001dd8 <HAL_GetTick>
 8002890:	0002      	movs	r2, r0
 8002892:	69bb      	ldr	r3, [r7, #24]
 8002894:	1ad3      	subs	r3, r2, r3
 8002896:	2b02      	cmp	r3, #2
 8002898:	d901      	bls.n	800289e <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 800289a:	2303      	movs	r3, #3
 800289c:	e079      	b.n	8002992 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800289e:	4b3f      	ldr	r3, [pc, #252]	@ (800299c <HAL_RCC_OscConfig+0x620>)
 80028a0:	681a      	ldr	r2, [r3, #0]
 80028a2:	2380      	movs	r3, #128	@ 0x80
 80028a4:	049b      	lsls	r3, r3, #18
 80028a6:	4013      	ands	r3, r2
 80028a8:	d1f0      	bne.n	800288c <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80028aa:	4b3c      	ldr	r3, [pc, #240]	@ (800299c <HAL_RCC_OscConfig+0x620>)
 80028ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028ae:	220f      	movs	r2, #15
 80028b0:	4393      	bics	r3, r2
 80028b2:	0019      	movs	r1, r3
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80028b8:	4b38      	ldr	r3, [pc, #224]	@ (800299c <HAL_RCC_OscConfig+0x620>)
 80028ba:	430a      	orrs	r2, r1
 80028bc:	62da      	str	r2, [r3, #44]	@ 0x2c
 80028be:	4b37      	ldr	r3, [pc, #220]	@ (800299c <HAL_RCC_OscConfig+0x620>)
 80028c0:	685b      	ldr	r3, [r3, #4]
 80028c2:	4a3a      	ldr	r2, [pc, #232]	@ (80029ac <HAL_RCC_OscConfig+0x630>)
 80028c4:	4013      	ands	r3, r2
 80028c6:	0019      	movs	r1, r3
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028d0:	431a      	orrs	r2, r3
 80028d2:	4b32      	ldr	r3, [pc, #200]	@ (800299c <HAL_RCC_OscConfig+0x620>)
 80028d4:	430a      	orrs	r2, r1
 80028d6:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80028d8:	4b30      	ldr	r3, [pc, #192]	@ (800299c <HAL_RCC_OscConfig+0x620>)
 80028da:	681a      	ldr	r2, [r3, #0]
 80028dc:	4b2f      	ldr	r3, [pc, #188]	@ (800299c <HAL_RCC_OscConfig+0x620>)
 80028de:	2180      	movs	r1, #128	@ 0x80
 80028e0:	0449      	lsls	r1, r1, #17
 80028e2:	430a      	orrs	r2, r1
 80028e4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028e6:	f7ff fa77 	bl	8001dd8 <HAL_GetTick>
 80028ea:	0003      	movs	r3, r0
 80028ec:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80028ee:	e008      	b.n	8002902 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028f0:	f7ff fa72 	bl	8001dd8 <HAL_GetTick>
 80028f4:	0002      	movs	r2, r0
 80028f6:	69bb      	ldr	r3, [r7, #24]
 80028f8:	1ad3      	subs	r3, r2, r3
 80028fa:	2b02      	cmp	r3, #2
 80028fc:	d901      	bls.n	8002902 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 80028fe:	2303      	movs	r3, #3
 8002900:	e047      	b.n	8002992 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002902:	4b26      	ldr	r3, [pc, #152]	@ (800299c <HAL_RCC_OscConfig+0x620>)
 8002904:	681a      	ldr	r2, [r3, #0]
 8002906:	2380      	movs	r3, #128	@ 0x80
 8002908:	049b      	lsls	r3, r3, #18
 800290a:	4013      	ands	r3, r2
 800290c:	d0f0      	beq.n	80028f0 <HAL_RCC_OscConfig+0x574>
 800290e:	e03f      	b.n	8002990 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002910:	4b22      	ldr	r3, [pc, #136]	@ (800299c <HAL_RCC_OscConfig+0x620>)
 8002912:	681a      	ldr	r2, [r3, #0]
 8002914:	4b21      	ldr	r3, [pc, #132]	@ (800299c <HAL_RCC_OscConfig+0x620>)
 8002916:	4924      	ldr	r1, [pc, #144]	@ (80029a8 <HAL_RCC_OscConfig+0x62c>)
 8002918:	400a      	ands	r2, r1
 800291a:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800291c:	f7ff fa5c 	bl	8001dd8 <HAL_GetTick>
 8002920:	0003      	movs	r3, r0
 8002922:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002924:	e008      	b.n	8002938 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002926:	f7ff fa57 	bl	8001dd8 <HAL_GetTick>
 800292a:	0002      	movs	r2, r0
 800292c:	69bb      	ldr	r3, [r7, #24]
 800292e:	1ad3      	subs	r3, r2, r3
 8002930:	2b02      	cmp	r3, #2
 8002932:	d901      	bls.n	8002938 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8002934:	2303      	movs	r3, #3
 8002936:	e02c      	b.n	8002992 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002938:	4b18      	ldr	r3, [pc, #96]	@ (800299c <HAL_RCC_OscConfig+0x620>)
 800293a:	681a      	ldr	r2, [r3, #0]
 800293c:	2380      	movs	r3, #128	@ 0x80
 800293e:	049b      	lsls	r3, r3, #18
 8002940:	4013      	ands	r3, r2
 8002942:	d1f0      	bne.n	8002926 <HAL_RCC_OscConfig+0x5aa>
 8002944:	e024      	b.n	8002990 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	6a1b      	ldr	r3, [r3, #32]
 800294a:	2b01      	cmp	r3, #1
 800294c:	d101      	bne.n	8002952 <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 800294e:	2301      	movs	r3, #1
 8002950:	e01f      	b.n	8002992 <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8002952:	4b12      	ldr	r3, [pc, #72]	@ (800299c <HAL_RCC_OscConfig+0x620>)
 8002954:	685b      	ldr	r3, [r3, #4]
 8002956:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8002958:	4b10      	ldr	r3, [pc, #64]	@ (800299c <HAL_RCC_OscConfig+0x620>)
 800295a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800295c:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800295e:	697a      	ldr	r2, [r7, #20]
 8002960:	2380      	movs	r3, #128	@ 0x80
 8002962:	025b      	lsls	r3, r3, #9
 8002964:	401a      	ands	r2, r3
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800296a:	429a      	cmp	r2, r3
 800296c:	d10e      	bne.n	800298c <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800296e:	693b      	ldr	r3, [r7, #16]
 8002970:	220f      	movs	r2, #15
 8002972:	401a      	ands	r2, r3
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002978:	429a      	cmp	r2, r3
 800297a:	d107      	bne.n	800298c <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 800297c:	697a      	ldr	r2, [r7, #20]
 800297e:	23f0      	movs	r3, #240	@ 0xf0
 8002980:	039b      	lsls	r3, r3, #14
 8002982:	401a      	ands	r2, r3
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002988:	429a      	cmp	r2, r3
 800298a:	d001      	beq.n	8002990 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 800298c:	2301      	movs	r3, #1
 800298e:	e000      	b.n	8002992 <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8002990:	2300      	movs	r3, #0
}
 8002992:	0018      	movs	r0, r3
 8002994:	46bd      	mov	sp, r7
 8002996:	b008      	add	sp, #32
 8002998:	bd80      	pop	{r7, pc}
 800299a:	46c0      	nop			@ (mov r8, r8)
 800299c:	40021000 	.word	0x40021000
 80029a0:	00001388 	.word	0x00001388
 80029a4:	efffffff 	.word	0xefffffff
 80029a8:	feffffff 	.word	0xfeffffff
 80029ac:	ffc2ffff 	.word	0xffc2ffff

080029b0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b084      	sub	sp, #16
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
 80029b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d101      	bne.n	80029c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80029c0:	2301      	movs	r3, #1
 80029c2:	e0b3      	b.n	8002b2c <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80029c4:	4b5b      	ldr	r3, [pc, #364]	@ (8002b34 <HAL_RCC_ClockConfig+0x184>)
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	2201      	movs	r2, #1
 80029ca:	4013      	ands	r3, r2
 80029cc:	683a      	ldr	r2, [r7, #0]
 80029ce:	429a      	cmp	r2, r3
 80029d0:	d911      	bls.n	80029f6 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029d2:	4b58      	ldr	r3, [pc, #352]	@ (8002b34 <HAL_RCC_ClockConfig+0x184>)
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	2201      	movs	r2, #1
 80029d8:	4393      	bics	r3, r2
 80029da:	0019      	movs	r1, r3
 80029dc:	4b55      	ldr	r3, [pc, #340]	@ (8002b34 <HAL_RCC_ClockConfig+0x184>)
 80029de:	683a      	ldr	r2, [r7, #0]
 80029e0:	430a      	orrs	r2, r1
 80029e2:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80029e4:	4b53      	ldr	r3, [pc, #332]	@ (8002b34 <HAL_RCC_ClockConfig+0x184>)
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	2201      	movs	r2, #1
 80029ea:	4013      	ands	r3, r2
 80029ec:	683a      	ldr	r2, [r7, #0]
 80029ee:	429a      	cmp	r2, r3
 80029f0:	d001      	beq.n	80029f6 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80029f2:	2301      	movs	r3, #1
 80029f4:	e09a      	b.n	8002b2c <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	2202      	movs	r2, #2
 80029fc:	4013      	ands	r3, r2
 80029fe:	d015      	beq.n	8002a2c <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	2204      	movs	r2, #4
 8002a06:	4013      	ands	r3, r2
 8002a08:	d006      	beq.n	8002a18 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002a0a:	4b4b      	ldr	r3, [pc, #300]	@ (8002b38 <HAL_RCC_ClockConfig+0x188>)
 8002a0c:	685a      	ldr	r2, [r3, #4]
 8002a0e:	4b4a      	ldr	r3, [pc, #296]	@ (8002b38 <HAL_RCC_ClockConfig+0x188>)
 8002a10:	21e0      	movs	r1, #224	@ 0xe0
 8002a12:	00c9      	lsls	r1, r1, #3
 8002a14:	430a      	orrs	r2, r1
 8002a16:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a18:	4b47      	ldr	r3, [pc, #284]	@ (8002b38 <HAL_RCC_ClockConfig+0x188>)
 8002a1a:	685b      	ldr	r3, [r3, #4]
 8002a1c:	22f0      	movs	r2, #240	@ 0xf0
 8002a1e:	4393      	bics	r3, r2
 8002a20:	0019      	movs	r1, r3
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	689a      	ldr	r2, [r3, #8]
 8002a26:	4b44      	ldr	r3, [pc, #272]	@ (8002b38 <HAL_RCC_ClockConfig+0x188>)
 8002a28:	430a      	orrs	r2, r1
 8002a2a:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	2201      	movs	r2, #1
 8002a32:	4013      	ands	r3, r2
 8002a34:	d040      	beq.n	8002ab8 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	685b      	ldr	r3, [r3, #4]
 8002a3a:	2b01      	cmp	r3, #1
 8002a3c:	d107      	bne.n	8002a4e <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a3e:	4b3e      	ldr	r3, [pc, #248]	@ (8002b38 <HAL_RCC_ClockConfig+0x188>)
 8002a40:	681a      	ldr	r2, [r3, #0]
 8002a42:	2380      	movs	r3, #128	@ 0x80
 8002a44:	029b      	lsls	r3, r3, #10
 8002a46:	4013      	ands	r3, r2
 8002a48:	d114      	bne.n	8002a74 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002a4a:	2301      	movs	r3, #1
 8002a4c:	e06e      	b.n	8002b2c <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	685b      	ldr	r3, [r3, #4]
 8002a52:	2b02      	cmp	r3, #2
 8002a54:	d107      	bne.n	8002a66 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a56:	4b38      	ldr	r3, [pc, #224]	@ (8002b38 <HAL_RCC_ClockConfig+0x188>)
 8002a58:	681a      	ldr	r2, [r3, #0]
 8002a5a:	2380      	movs	r3, #128	@ 0x80
 8002a5c:	049b      	lsls	r3, r3, #18
 8002a5e:	4013      	ands	r3, r2
 8002a60:	d108      	bne.n	8002a74 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002a62:	2301      	movs	r3, #1
 8002a64:	e062      	b.n	8002b2c <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a66:	4b34      	ldr	r3, [pc, #208]	@ (8002b38 <HAL_RCC_ClockConfig+0x188>)
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	2202      	movs	r2, #2
 8002a6c:	4013      	ands	r3, r2
 8002a6e:	d101      	bne.n	8002a74 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002a70:	2301      	movs	r3, #1
 8002a72:	e05b      	b.n	8002b2c <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a74:	4b30      	ldr	r3, [pc, #192]	@ (8002b38 <HAL_RCC_ClockConfig+0x188>)
 8002a76:	685b      	ldr	r3, [r3, #4]
 8002a78:	2203      	movs	r2, #3
 8002a7a:	4393      	bics	r3, r2
 8002a7c:	0019      	movs	r1, r3
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	685a      	ldr	r2, [r3, #4]
 8002a82:	4b2d      	ldr	r3, [pc, #180]	@ (8002b38 <HAL_RCC_ClockConfig+0x188>)
 8002a84:	430a      	orrs	r2, r1
 8002a86:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002a88:	f7ff f9a6 	bl	8001dd8 <HAL_GetTick>
 8002a8c:	0003      	movs	r3, r0
 8002a8e:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a90:	e009      	b.n	8002aa6 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a92:	f7ff f9a1 	bl	8001dd8 <HAL_GetTick>
 8002a96:	0002      	movs	r2, r0
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	1ad3      	subs	r3, r2, r3
 8002a9c:	4a27      	ldr	r2, [pc, #156]	@ (8002b3c <HAL_RCC_ClockConfig+0x18c>)
 8002a9e:	4293      	cmp	r3, r2
 8002aa0:	d901      	bls.n	8002aa6 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8002aa2:	2303      	movs	r3, #3
 8002aa4:	e042      	b.n	8002b2c <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002aa6:	4b24      	ldr	r3, [pc, #144]	@ (8002b38 <HAL_RCC_ClockConfig+0x188>)
 8002aa8:	685b      	ldr	r3, [r3, #4]
 8002aaa:	220c      	movs	r2, #12
 8002aac:	401a      	ands	r2, r3
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	685b      	ldr	r3, [r3, #4]
 8002ab2:	009b      	lsls	r3, r3, #2
 8002ab4:	429a      	cmp	r2, r3
 8002ab6:	d1ec      	bne.n	8002a92 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002ab8:	4b1e      	ldr	r3, [pc, #120]	@ (8002b34 <HAL_RCC_ClockConfig+0x184>)
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	2201      	movs	r2, #1
 8002abe:	4013      	ands	r3, r2
 8002ac0:	683a      	ldr	r2, [r7, #0]
 8002ac2:	429a      	cmp	r2, r3
 8002ac4:	d211      	bcs.n	8002aea <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ac6:	4b1b      	ldr	r3, [pc, #108]	@ (8002b34 <HAL_RCC_ClockConfig+0x184>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	2201      	movs	r2, #1
 8002acc:	4393      	bics	r3, r2
 8002ace:	0019      	movs	r1, r3
 8002ad0:	4b18      	ldr	r3, [pc, #96]	@ (8002b34 <HAL_RCC_ClockConfig+0x184>)
 8002ad2:	683a      	ldr	r2, [r7, #0]
 8002ad4:	430a      	orrs	r2, r1
 8002ad6:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ad8:	4b16      	ldr	r3, [pc, #88]	@ (8002b34 <HAL_RCC_ClockConfig+0x184>)
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	2201      	movs	r2, #1
 8002ade:	4013      	ands	r3, r2
 8002ae0:	683a      	ldr	r2, [r7, #0]
 8002ae2:	429a      	cmp	r2, r3
 8002ae4:	d001      	beq.n	8002aea <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8002ae6:	2301      	movs	r3, #1
 8002ae8:	e020      	b.n	8002b2c <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	2204      	movs	r2, #4
 8002af0:	4013      	ands	r3, r2
 8002af2:	d009      	beq.n	8002b08 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002af4:	4b10      	ldr	r3, [pc, #64]	@ (8002b38 <HAL_RCC_ClockConfig+0x188>)
 8002af6:	685b      	ldr	r3, [r3, #4]
 8002af8:	4a11      	ldr	r2, [pc, #68]	@ (8002b40 <HAL_RCC_ClockConfig+0x190>)
 8002afa:	4013      	ands	r3, r2
 8002afc:	0019      	movs	r1, r3
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	68da      	ldr	r2, [r3, #12]
 8002b02:	4b0d      	ldr	r3, [pc, #52]	@ (8002b38 <HAL_RCC_ClockConfig+0x188>)
 8002b04:	430a      	orrs	r2, r1
 8002b06:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002b08:	f000 f820 	bl	8002b4c <HAL_RCC_GetSysClockFreq>
 8002b0c:	0001      	movs	r1, r0
 8002b0e:	4b0a      	ldr	r3, [pc, #40]	@ (8002b38 <HAL_RCC_ClockConfig+0x188>)
 8002b10:	685b      	ldr	r3, [r3, #4]
 8002b12:	091b      	lsrs	r3, r3, #4
 8002b14:	220f      	movs	r2, #15
 8002b16:	4013      	ands	r3, r2
 8002b18:	4a0a      	ldr	r2, [pc, #40]	@ (8002b44 <HAL_RCC_ClockConfig+0x194>)
 8002b1a:	5cd3      	ldrb	r3, [r2, r3]
 8002b1c:	000a      	movs	r2, r1
 8002b1e:	40da      	lsrs	r2, r3
 8002b20:	4b09      	ldr	r3, [pc, #36]	@ (8002b48 <HAL_RCC_ClockConfig+0x198>)
 8002b22:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8002b24:	2003      	movs	r0, #3
 8002b26:	f7ff f911 	bl	8001d4c <HAL_InitTick>
  
  return HAL_OK;
 8002b2a:	2300      	movs	r3, #0
}
 8002b2c:	0018      	movs	r0, r3
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	b004      	add	sp, #16
 8002b32:	bd80      	pop	{r7, pc}
 8002b34:	40022000 	.word	0x40022000
 8002b38:	40021000 	.word	0x40021000
 8002b3c:	00001388 	.word	0x00001388
 8002b40:	fffff8ff 	.word	0xfffff8ff
 8002b44:	08002dfc 	.word	0x08002dfc
 8002b48:	20000004 	.word	0x20000004

08002b4c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b086      	sub	sp, #24
 8002b50:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002b52:	2300      	movs	r3, #0
 8002b54:	60fb      	str	r3, [r7, #12]
 8002b56:	2300      	movs	r3, #0
 8002b58:	60bb      	str	r3, [r7, #8]
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	617b      	str	r3, [r7, #20]
 8002b5e:	2300      	movs	r3, #0
 8002b60:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002b62:	2300      	movs	r3, #0
 8002b64:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8002b66:	4b20      	ldr	r3, [pc, #128]	@ (8002be8 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002b68:	685b      	ldr	r3, [r3, #4]
 8002b6a:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	220c      	movs	r2, #12
 8002b70:	4013      	ands	r3, r2
 8002b72:	2b04      	cmp	r3, #4
 8002b74:	d002      	beq.n	8002b7c <HAL_RCC_GetSysClockFreq+0x30>
 8002b76:	2b08      	cmp	r3, #8
 8002b78:	d003      	beq.n	8002b82 <HAL_RCC_GetSysClockFreq+0x36>
 8002b7a:	e02c      	b.n	8002bd6 <HAL_RCC_GetSysClockFreq+0x8a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002b7c:	4b1b      	ldr	r3, [pc, #108]	@ (8002bec <HAL_RCC_GetSysClockFreq+0xa0>)
 8002b7e:	613b      	str	r3, [r7, #16]
      break;
 8002b80:	e02c      	b.n	8002bdc <HAL_RCC_GetSysClockFreq+0x90>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	0c9b      	lsrs	r3, r3, #18
 8002b86:	220f      	movs	r2, #15
 8002b88:	4013      	ands	r3, r2
 8002b8a:	4a19      	ldr	r2, [pc, #100]	@ (8002bf0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002b8c:	5cd3      	ldrb	r3, [r2, r3]
 8002b8e:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8002b90:	4b15      	ldr	r3, [pc, #84]	@ (8002be8 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002b92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b94:	220f      	movs	r2, #15
 8002b96:	4013      	ands	r3, r2
 8002b98:	4a16      	ldr	r2, [pc, #88]	@ (8002bf4 <HAL_RCC_GetSysClockFreq+0xa8>)
 8002b9a:	5cd3      	ldrb	r3, [r2, r3]
 8002b9c:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8002b9e:	68fa      	ldr	r2, [r7, #12]
 8002ba0:	2380      	movs	r3, #128	@ 0x80
 8002ba2:	025b      	lsls	r3, r3, #9
 8002ba4:	4013      	ands	r3, r2
 8002ba6:	d009      	beq.n	8002bbc <HAL_RCC_GetSysClockFreq+0x70>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002ba8:	68b9      	ldr	r1, [r7, #8]
 8002baa:	4810      	ldr	r0, [pc, #64]	@ (8002bec <HAL_RCC_GetSysClockFreq+0xa0>)
 8002bac:	f7fd faac 	bl	8000108 <__udivsi3>
 8002bb0:	0003      	movs	r3, r0
 8002bb2:	001a      	movs	r2, r3
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	4353      	muls	r3, r2
 8002bb8:	617b      	str	r3, [r7, #20]
 8002bba:	e009      	b.n	8002bd0 <HAL_RCC_GetSysClockFreq+0x84>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002bbc:	6879      	ldr	r1, [r7, #4]
 8002bbe:	000a      	movs	r2, r1
 8002bc0:	0152      	lsls	r2, r2, #5
 8002bc2:	1a52      	subs	r2, r2, r1
 8002bc4:	0193      	lsls	r3, r2, #6
 8002bc6:	1a9b      	subs	r3, r3, r2
 8002bc8:	00db      	lsls	r3, r3, #3
 8002bca:	185b      	adds	r3, r3, r1
 8002bcc:	021b      	lsls	r3, r3, #8
 8002bce:	617b      	str	r3, [r7, #20]
#endif
      }
      sysclockfreq = pllclk;
 8002bd0:	697b      	ldr	r3, [r7, #20]
 8002bd2:	613b      	str	r3, [r7, #16]
      break;
 8002bd4:	e002      	b.n	8002bdc <HAL_RCC_GetSysClockFreq+0x90>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002bd6:	4b05      	ldr	r3, [pc, #20]	@ (8002bec <HAL_RCC_GetSysClockFreq+0xa0>)
 8002bd8:	613b      	str	r3, [r7, #16]
      break;
 8002bda:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002bdc:	693b      	ldr	r3, [r7, #16]
}
 8002bde:	0018      	movs	r0, r3
 8002be0:	46bd      	mov	sp, r7
 8002be2:	b006      	add	sp, #24
 8002be4:	bd80      	pop	{r7, pc}
 8002be6:	46c0      	nop			@ (mov r8, r8)
 8002be8:	40021000 	.word	0x40021000
 8002bec:	007a1200 	.word	0x007a1200
 8002bf0:	08002e0c 	.word	0x08002e0c
 8002bf4:	08002e1c 	.word	0x08002e1c

08002bf8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b082      	sub	sp, #8
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d101      	bne.n	8002c0a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002c06:	2301      	movs	r3, #1
 8002c08:	e042      	b.n	8002c90 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	223d      	movs	r2, #61	@ 0x3d
 8002c0e:	5c9b      	ldrb	r3, [r3, r2]
 8002c10:	b2db      	uxtb	r3, r3
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d107      	bne.n	8002c26 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	223c      	movs	r2, #60	@ 0x3c
 8002c1a:	2100      	movs	r1, #0
 8002c1c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	0018      	movs	r0, r3
 8002c22:	f7ff f803 	bl	8001c2c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	223d      	movs	r2, #61	@ 0x3d
 8002c2a:	2102      	movs	r1, #2
 8002c2c:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681a      	ldr	r2, [r3, #0]
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	3304      	adds	r3, #4
 8002c36:	0019      	movs	r1, r3
 8002c38:	0010      	movs	r0, r2
 8002c3a:	f000 f82d 	bl	8002c98 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	2246      	movs	r2, #70	@ 0x46
 8002c42:	2101      	movs	r1, #1
 8002c44:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	223e      	movs	r2, #62	@ 0x3e
 8002c4a:	2101      	movs	r1, #1
 8002c4c:	5499      	strb	r1, [r3, r2]
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	223f      	movs	r2, #63	@ 0x3f
 8002c52:	2101      	movs	r1, #1
 8002c54:	5499      	strb	r1, [r3, r2]
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	2240      	movs	r2, #64	@ 0x40
 8002c5a:	2101      	movs	r1, #1
 8002c5c:	5499      	strb	r1, [r3, r2]
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	2241      	movs	r2, #65	@ 0x41
 8002c62:	2101      	movs	r1, #1
 8002c64:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	2242      	movs	r2, #66	@ 0x42
 8002c6a:	2101      	movs	r1, #1
 8002c6c:	5499      	strb	r1, [r3, r2]
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	2243      	movs	r2, #67	@ 0x43
 8002c72:	2101      	movs	r1, #1
 8002c74:	5499      	strb	r1, [r3, r2]
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	2244      	movs	r2, #68	@ 0x44
 8002c7a:	2101      	movs	r1, #1
 8002c7c:	5499      	strb	r1, [r3, r2]
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	2245      	movs	r2, #69	@ 0x45
 8002c82:	2101      	movs	r1, #1
 8002c84:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	223d      	movs	r2, #61	@ 0x3d
 8002c8a:	2101      	movs	r1, #1
 8002c8c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002c8e:	2300      	movs	r3, #0
}
 8002c90:	0018      	movs	r0, r3
 8002c92:	46bd      	mov	sp, r7
 8002c94:	b002      	add	sp, #8
 8002c96:	bd80      	pop	{r7, pc}

08002c98 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b084      	sub	sp, #16
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
 8002ca0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	4a32      	ldr	r2, [pc, #200]	@ (8002d74 <TIM_Base_SetConfig+0xdc>)
 8002cac:	4293      	cmp	r3, r2
 8002cae:	d003      	beq.n	8002cb8 <TIM_Base_SetConfig+0x20>
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	4a31      	ldr	r2, [pc, #196]	@ (8002d78 <TIM_Base_SetConfig+0xe0>)
 8002cb4:	4293      	cmp	r3, r2
 8002cb6:	d108      	bne.n	8002cca <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	2270      	movs	r2, #112	@ 0x70
 8002cbc:	4393      	bics	r3, r2
 8002cbe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002cc0:	683b      	ldr	r3, [r7, #0]
 8002cc2:	685b      	ldr	r3, [r3, #4]
 8002cc4:	68fa      	ldr	r2, [r7, #12]
 8002cc6:	4313      	orrs	r3, r2
 8002cc8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	4a29      	ldr	r2, [pc, #164]	@ (8002d74 <TIM_Base_SetConfig+0xdc>)
 8002cce:	4293      	cmp	r3, r2
 8002cd0:	d00f      	beq.n	8002cf2 <TIM_Base_SetConfig+0x5a>
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	4a28      	ldr	r2, [pc, #160]	@ (8002d78 <TIM_Base_SetConfig+0xe0>)
 8002cd6:	4293      	cmp	r3, r2
 8002cd8:	d00b      	beq.n	8002cf2 <TIM_Base_SetConfig+0x5a>
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	4a27      	ldr	r2, [pc, #156]	@ (8002d7c <TIM_Base_SetConfig+0xe4>)
 8002cde:	4293      	cmp	r3, r2
 8002ce0:	d007      	beq.n	8002cf2 <TIM_Base_SetConfig+0x5a>
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	4a26      	ldr	r2, [pc, #152]	@ (8002d80 <TIM_Base_SetConfig+0xe8>)
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d003      	beq.n	8002cf2 <TIM_Base_SetConfig+0x5a>
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	4a25      	ldr	r2, [pc, #148]	@ (8002d84 <TIM_Base_SetConfig+0xec>)
 8002cee:	4293      	cmp	r3, r2
 8002cf0:	d108      	bne.n	8002d04 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	4a24      	ldr	r2, [pc, #144]	@ (8002d88 <TIM_Base_SetConfig+0xf0>)
 8002cf6:	4013      	ands	r3, r2
 8002cf8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002cfa:	683b      	ldr	r3, [r7, #0]
 8002cfc:	68db      	ldr	r3, [r3, #12]
 8002cfe:	68fa      	ldr	r2, [r7, #12]
 8002d00:	4313      	orrs	r3, r2
 8002d02:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	2280      	movs	r2, #128	@ 0x80
 8002d08:	4393      	bics	r3, r2
 8002d0a:	001a      	movs	r2, r3
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	695b      	ldr	r3, [r3, #20]
 8002d10:	4313      	orrs	r3, r2
 8002d12:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	68fa      	ldr	r2, [r7, #12]
 8002d18:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002d1a:	683b      	ldr	r3, [r7, #0]
 8002d1c:	689a      	ldr	r2, [r3, #8]
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002d22:	683b      	ldr	r3, [r7, #0]
 8002d24:	681a      	ldr	r2, [r3, #0]
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	4a11      	ldr	r2, [pc, #68]	@ (8002d74 <TIM_Base_SetConfig+0xdc>)
 8002d2e:	4293      	cmp	r3, r2
 8002d30:	d007      	beq.n	8002d42 <TIM_Base_SetConfig+0xaa>
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	4a12      	ldr	r2, [pc, #72]	@ (8002d80 <TIM_Base_SetConfig+0xe8>)
 8002d36:	4293      	cmp	r3, r2
 8002d38:	d003      	beq.n	8002d42 <TIM_Base_SetConfig+0xaa>
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	4a11      	ldr	r2, [pc, #68]	@ (8002d84 <TIM_Base_SetConfig+0xec>)
 8002d3e:	4293      	cmp	r3, r2
 8002d40:	d103      	bne.n	8002d4a <TIM_Base_SetConfig+0xb2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002d42:	683b      	ldr	r3, [r7, #0]
 8002d44:	691a      	ldr	r2, [r3, #16]
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	2201      	movs	r2, #1
 8002d4e:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	691b      	ldr	r3, [r3, #16]
 8002d54:	2201      	movs	r2, #1
 8002d56:	4013      	ands	r3, r2
 8002d58:	2b01      	cmp	r3, #1
 8002d5a:	d106      	bne.n	8002d6a <TIM_Base_SetConfig+0xd2>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	691b      	ldr	r3, [r3, #16]
 8002d60:	2201      	movs	r2, #1
 8002d62:	4393      	bics	r3, r2
 8002d64:	001a      	movs	r2, r3
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	611a      	str	r2, [r3, #16]
  }
}
 8002d6a:	46c0      	nop			@ (mov r8, r8)
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	b004      	add	sp, #16
 8002d70:	bd80      	pop	{r7, pc}
 8002d72:	46c0      	nop			@ (mov r8, r8)
 8002d74:	40012c00 	.word	0x40012c00
 8002d78:	40000400 	.word	0x40000400
 8002d7c:	40002000 	.word	0x40002000
 8002d80:	40014400 	.word	0x40014400
 8002d84:	40014800 	.word	0x40014800
 8002d88:	fffffcff 	.word	0xfffffcff

08002d8c <memset>:
 8002d8c:	0003      	movs	r3, r0
 8002d8e:	1882      	adds	r2, r0, r2
 8002d90:	4293      	cmp	r3, r2
 8002d92:	d100      	bne.n	8002d96 <memset+0xa>
 8002d94:	4770      	bx	lr
 8002d96:	7019      	strb	r1, [r3, #0]
 8002d98:	3301      	adds	r3, #1
 8002d9a:	e7f9      	b.n	8002d90 <memset+0x4>

08002d9c <__libc_init_array>:
 8002d9c:	b570      	push	{r4, r5, r6, lr}
 8002d9e:	2600      	movs	r6, #0
 8002da0:	4c0c      	ldr	r4, [pc, #48]	@ (8002dd4 <__libc_init_array+0x38>)
 8002da2:	4d0d      	ldr	r5, [pc, #52]	@ (8002dd8 <__libc_init_array+0x3c>)
 8002da4:	1b64      	subs	r4, r4, r5
 8002da6:	10a4      	asrs	r4, r4, #2
 8002da8:	42a6      	cmp	r6, r4
 8002daa:	d109      	bne.n	8002dc0 <__libc_init_array+0x24>
 8002dac:	2600      	movs	r6, #0
 8002dae:	f000 f819 	bl	8002de4 <_init>
 8002db2:	4c0a      	ldr	r4, [pc, #40]	@ (8002ddc <__libc_init_array+0x40>)
 8002db4:	4d0a      	ldr	r5, [pc, #40]	@ (8002de0 <__libc_init_array+0x44>)
 8002db6:	1b64      	subs	r4, r4, r5
 8002db8:	10a4      	asrs	r4, r4, #2
 8002dba:	42a6      	cmp	r6, r4
 8002dbc:	d105      	bne.n	8002dca <__libc_init_array+0x2e>
 8002dbe:	bd70      	pop	{r4, r5, r6, pc}
 8002dc0:	00b3      	lsls	r3, r6, #2
 8002dc2:	58eb      	ldr	r3, [r5, r3]
 8002dc4:	4798      	blx	r3
 8002dc6:	3601      	adds	r6, #1
 8002dc8:	e7ee      	b.n	8002da8 <__libc_init_array+0xc>
 8002dca:	00b3      	lsls	r3, r6, #2
 8002dcc:	58eb      	ldr	r3, [r5, r3]
 8002dce:	4798      	blx	r3
 8002dd0:	3601      	adds	r6, #1
 8002dd2:	e7f2      	b.n	8002dba <__libc_init_array+0x1e>
 8002dd4:	08002e2c 	.word	0x08002e2c
 8002dd8:	08002e2c 	.word	0x08002e2c
 8002ddc:	08002e30 	.word	0x08002e30
 8002de0:	08002e2c 	.word	0x08002e2c

08002de4 <_init>:
 8002de4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002de6:	46c0      	nop			@ (mov r8, r8)
 8002de8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002dea:	bc08      	pop	{r3}
 8002dec:	469e      	mov	lr, r3
 8002dee:	4770      	bx	lr

08002df0 <_fini>:
 8002df0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002df2:	46c0      	nop			@ (mov r8, r8)
 8002df4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002df6:	bc08      	pop	{r3}
 8002df8:	469e      	mov	lr, r3
 8002dfa:	4770      	bx	lr
