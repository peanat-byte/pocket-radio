
pocket-radio.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001c88  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08001d48  08001d48  00002d48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001d78  08001d78  0000300c  2**0
                  CONTENTS
  4 .ARM          00000000  08001d78  08001d78  0000300c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001d78  08001d78  0000300c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001d78  08001d78  00002d78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08001d7c  08001d7c  00002d7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08001d80  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000070  2000000c  08001d8c  0000300c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000007c  08001d8c  0000307c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000300c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00005f67  00000000  00000000  00003034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001250  00000000  00000000  00008f9b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000790  00000000  00000000  0000a1f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000005e0  00000000  00000000  0000a980  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000eae4  00000000  00000000  0000af60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008695  00000000  00000000  00019a44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0005bafe  00000000  00000000  000220d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0007dbd7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001ab0  00000000  00000000  0007dc1c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  0007f6cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08001d30 	.word	0x08001d30

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08001d30 	.word	0x08001d30

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			@ (mov r8, r8)

08000220 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000224:	f000 fce6 	bl	8000bf4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000228:	f000 f868 	bl	80002fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800022c:	f000 f8d8 	bl	80003e0 <MX_GPIO_Init>
  MX_TIM14_Init();
 8000230:	f000 f8ac 	bl	800038c <MX_TIM14_Init>
//  stable_A = HAL_GPIO_ReadPin(GPIOA, ENC_A_Pin);
//  stable_B = HAL_GPIO_ReadPin(GPIOA, ENC_B_Pin);
//  encoder_state = (stable_A << 1) | stable_B;

  // Start FM receiver by setting RST high;; SCLK needs to be high for 2 wire mode
  HAL_GPIO_WritePin(GPIOA, SCLK_Pin, GPIO_PIN_SET);
 8000234:	2390      	movs	r3, #144	@ 0x90
 8000236:	05db      	lsls	r3, r3, #23
 8000238:	2201      	movs	r2, #1
 800023a:	2102      	movs	r1, #2
 800023c:	0018      	movs	r0, r3
 800023e:	f000 ffcc 	bl	80011da <HAL_GPIO_WritePin>
  HAL_Delay(100);
 8000242:	2064      	movs	r0, #100	@ 0x64
 8000244:	f000 fd3a 	bl	8000cbc <HAL_Delay>
  HAL_GPIO_WritePin(GPIOA, RST_Pin, GPIO_PIN_SET);
 8000248:	2380      	movs	r3, #128	@ 0x80
 800024a:	00d9      	lsls	r1, r3, #3
 800024c:	2390      	movs	r3, #144	@ 0x90
 800024e:	05db      	lsls	r3, r3, #23
 8000250:	2201      	movs	r2, #1
 8000252:	0018      	movs	r0, r3
 8000254:	f000 ffc1 	bl	80011da <HAL_GPIO_WritePin>
  HAL_Delay(100);
 8000258:	2064      	movs	r0, #100	@ 0x64
 800025a:	f000 fd2f 	bl	8000cbc <HAL_Delay>

  // Set SEN low for 7 bit device address 0010001b
  HAL_GPIO_WritePin(GPIOA, SENB_Pin, GPIO_PIN_RESET);
 800025e:	2390      	movs	r3, #144	@ 0x90
 8000260:	05db      	lsls	r3, r3, #23
 8000262:	2200      	movs	r2, #0
 8000264:	2104      	movs	r1, #4
 8000266:	0018      	movs	r0, r3
 8000268:	f000 ffb7 	bl	80011da <HAL_GPIO_WritePin>
  HAL_Delay(100);
 800026c:	2064      	movs	r0, #100	@ 0x64
 800026e:	f000 fd25 	bl	8000cbc <HAL_Delay>

  powerUp();
 8000272:	f000 fa30 	bl	80006d6 <powerUp>
  HAL_GPIO_WritePin(GPIOA, LED_1_Pin, GPIO_PIN_SET);
 8000276:	2390      	movs	r3, #144	@ 0x90
 8000278:	05db      	lsls	r3, r3, #23
 800027a:	2201      	movs	r2, #1
 800027c:	2108      	movs	r1, #8
 800027e:	0018      	movs	r0, r3
 8000280:	f000 ffab 	bl	80011da <HAL_GPIO_WritePin>
  HAL_Delay(500);
 8000284:	23fa      	movs	r3, #250	@ 0xfa
 8000286:	005b      	lsls	r3, r3, #1
 8000288:	0018      	movs	r0, r3
 800028a:	f000 fd17 	bl	8000cbc <HAL_Delay>
  HAL_GPIO_WritePin(GPIOA, LED_1_Pin, GPIO_PIN_RESET);
 800028e:	2390      	movs	r3, #144	@ 0x90
 8000290:	05db      	lsls	r3, r3, #23
 8000292:	2200      	movs	r2, #0
 8000294:	2108      	movs	r1, #8
 8000296:	0018      	movs	r0, r3
 8000298:	f000 ff9f 	bl	80011da <HAL_GPIO_WritePin>
  HAL_Delay(2000);
 800029c:	23fa      	movs	r3, #250	@ 0xfa
 800029e:	00db      	lsls	r3, r3, #3
 80002a0:	0018      	movs	r0, r3
 80002a2:	f000 fd0b 	bl	8000cbc <HAL_Delay>

//  setFreq(channel);
  seek();
 80002a6:	f000 fa8b 	bl	80007c0 <seek>
  HAL_GPIO_WritePin(GPIOA, LED_1_Pin, GPIO_PIN_SET);
 80002aa:	2390      	movs	r3, #144	@ 0x90
 80002ac:	05db      	lsls	r3, r3, #23
 80002ae:	2201      	movs	r2, #1
 80002b0:	2108      	movs	r1, #8
 80002b2:	0018      	movs	r0, r3
 80002b4:	f000 ff91 	bl	80011da <HAL_GPIO_WritePin>
  HAL_Delay(500);
 80002b8:	23fa      	movs	r3, #250	@ 0xfa
 80002ba:	005b      	lsls	r3, r3, #1
 80002bc:	0018      	movs	r0, r3
 80002be:	f000 fcfd 	bl	8000cbc <HAL_Delay>
  HAL_GPIO_WritePin(GPIOA, LED_1_Pin, GPIO_PIN_RESET);
 80002c2:	2390      	movs	r3, #144	@ 0x90
 80002c4:	05db      	lsls	r3, r3, #23
 80002c6:	2200      	movs	r2, #0
 80002c8:	2108      	movs	r1, #8
 80002ca:	0018      	movs	r0, r3
 80002cc:	f000 ff85 	bl	80011da <HAL_GPIO_WritePin>
  HAL_Delay(500);
 80002d0:	23fa      	movs	r3, #250	@ 0xfa
 80002d2:	005b      	lsls	r3, r3, #1
 80002d4:	0018      	movs	r0, r3
 80002d6:	f000 fcf1 	bl	8000cbc <HAL_Delay>

  fm_tune_status();
 80002da:	f000 fb84 	bl	80009e6 <fm_tune_status>
  HAL_Delay(500);
 80002de:	23fa      	movs	r3, #250	@ 0xfa
 80002e0:	005b      	lsls	r3, r3, #1
 80002e2:	0018      	movs	r0, r3
 80002e4:	f000 fcea 	bl	8000cbc <HAL_Delay>
  readStatus(1, 8);
 80002e8:	2108      	movs	r1, #8
 80002ea:	2001      	movs	r0, #1
 80002ec:	f000 facc 	bl	8000888 <readStatus>
//		  sendCommand(channel);
//
//		  channel_changed = 0;
//	  }

	  HAL_Delay(500);
 80002f0:	23fa      	movs	r3, #250	@ 0xfa
 80002f2:	005b      	lsls	r3, r3, #1
 80002f4:	0018      	movs	r0, r3
 80002f6:	f000 fce1 	bl	8000cbc <HAL_Delay>
 80002fa:	e7f9      	b.n	80002f0 <main+0xd0>

080002fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002fc:	b590      	push	{r4, r7, lr}
 80002fe:	b091      	sub	sp, #68	@ 0x44
 8000300:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000302:	2410      	movs	r4, #16
 8000304:	193b      	adds	r3, r7, r4
 8000306:	0018      	movs	r0, r3
 8000308:	2330      	movs	r3, #48	@ 0x30
 800030a:	001a      	movs	r2, r3
 800030c:	2100      	movs	r1, #0
 800030e:	f001 fce3 	bl	8001cd8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000312:	003b      	movs	r3, r7
 8000314:	0018      	movs	r0, r3
 8000316:	2310      	movs	r3, #16
 8000318:	001a      	movs	r2, r3
 800031a:	2100      	movs	r1, #0
 800031c:	f001 fcdc 	bl	8001cd8 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000320:	0021      	movs	r1, r4
 8000322:	187b      	adds	r3, r7, r1
 8000324:	2201      	movs	r2, #1
 8000326:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000328:	187b      	adds	r3, r7, r1
 800032a:	2201      	movs	r2, #1
 800032c:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800032e:	187b      	adds	r3, r7, r1
 8000330:	2202      	movs	r2, #2
 8000332:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000334:	187b      	adds	r3, r7, r1
 8000336:	2280      	movs	r2, #128	@ 0x80
 8000338:	0252      	lsls	r2, r2, #9
 800033a:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 800033c:	187b      	adds	r3, r7, r1
 800033e:	2200      	movs	r2, #0
 8000340:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000342:	187b      	adds	r3, r7, r1
 8000344:	2200      	movs	r2, #0
 8000346:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000348:	187b      	adds	r3, r7, r1
 800034a:	0018      	movs	r0, r3
 800034c:	f000 ff7e 	bl	800124c <HAL_RCC_OscConfig>
 8000350:	1e03      	subs	r3, r0, #0
 8000352:	d001      	beq.n	8000358 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8000354:	f000 fbab 	bl	8000aae <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000358:	003b      	movs	r3, r7
 800035a:	2207      	movs	r2, #7
 800035c:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800035e:	003b      	movs	r3, r7
 8000360:	2202      	movs	r2, #2
 8000362:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000364:	003b      	movs	r3, r7
 8000366:	2200      	movs	r2, #0
 8000368:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800036a:	003b      	movs	r3, r7
 800036c:	2200      	movs	r2, #0
 800036e:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000370:	003b      	movs	r3, r7
 8000372:	2100      	movs	r1, #0
 8000374:	0018      	movs	r0, r3
 8000376:	f001 fa83 	bl	8001880 <HAL_RCC_ClockConfig>
 800037a:	1e03      	subs	r3, r0, #0
 800037c:	d001      	beq.n	8000382 <SystemClock_Config+0x86>
  {
    Error_Handler();
 800037e:	f000 fb96 	bl	8000aae <Error_Handler>
  }
}
 8000382:	46c0      	nop			@ (mov r8, r8)
 8000384:	46bd      	mov	sp, r7
 8000386:	b011      	add	sp, #68	@ 0x44
 8000388:	bd90      	pop	{r4, r7, pc}
	...

0800038c <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 800038c:	b580      	push	{r7, lr}
 800038e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8000390:	4b10      	ldr	r3, [pc, #64]	@ (80003d4 <MX_TIM14_Init+0x48>)
 8000392:	4a11      	ldr	r2, [pc, #68]	@ (80003d8 <MX_TIM14_Init+0x4c>)
 8000394:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 79;
 8000396:	4b0f      	ldr	r3, [pc, #60]	@ (80003d4 <MX_TIM14_Init+0x48>)
 8000398:	224f      	movs	r2, #79	@ 0x4f
 800039a:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 800039c:	4b0d      	ldr	r3, [pc, #52]	@ (80003d4 <MX_TIM14_Init+0x48>)
 800039e:	2200      	movs	r2, #0
 80003a0:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 65535;
 80003a2:	4b0c      	ldr	r3, [pc, #48]	@ (80003d4 <MX_TIM14_Init+0x48>)
 80003a4:	4a0d      	ldr	r2, [pc, #52]	@ (80003dc <MX_TIM14_Init+0x50>)
 80003a6:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80003a8:	4b0a      	ldr	r3, [pc, #40]	@ (80003d4 <MX_TIM14_Init+0x48>)
 80003aa:	2200      	movs	r2, #0
 80003ac:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80003ae:	4b09      	ldr	r3, [pc, #36]	@ (80003d4 <MX_TIM14_Init+0x48>)
 80003b0:	2200      	movs	r2, #0
 80003b2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 80003b4:	4b07      	ldr	r3, [pc, #28]	@ (80003d4 <MX_TIM14_Init+0x48>)
 80003b6:	0018      	movs	r0, r3
 80003b8:	f001 fb86 	bl	8001ac8 <HAL_TIM_Base_Init>
 80003bc:	1e03      	subs	r3, r0, #0
 80003be:	d001      	beq.n	80003c4 <MX_TIM14_Init+0x38>
  {
    Error_Handler();
 80003c0:	f000 fb75 	bl	8000aae <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */
  HAL_TIM_Base_Start(&htim14);
 80003c4:	4b03      	ldr	r3, [pc, #12]	@ (80003d4 <MX_TIM14_Init+0x48>)
 80003c6:	0018      	movs	r0, r3
 80003c8:	f001 fbce 	bl	8001b68 <HAL_TIM_Base_Start>
  /* USER CODE END TIM14_Init 2 */

}
 80003cc:	46c0      	nop			@ (mov r8, r8)
 80003ce:	46bd      	mov	sp, r7
 80003d0:	bd80      	pop	{r7, pc}
 80003d2:	46c0      	nop			@ (mov r8, r8)
 80003d4:	20000028 	.word	0x20000028
 80003d8:	40002000 	.word	0x40002000
 80003dc:	0000ffff 	.word	0x0000ffff

080003e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003e0:	b590      	push	{r4, r7, lr}
 80003e2:	b089      	sub	sp, #36	@ 0x24
 80003e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003e6:	240c      	movs	r4, #12
 80003e8:	193b      	adds	r3, r7, r4
 80003ea:	0018      	movs	r0, r3
 80003ec:	2314      	movs	r3, #20
 80003ee:	001a      	movs	r2, r3
 80003f0:	2100      	movs	r1, #0
 80003f2:	f001 fc71 	bl	8001cd8 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80003f6:	4b3c      	ldr	r3, [pc, #240]	@ (80004e8 <MX_GPIO_Init+0x108>)
 80003f8:	695a      	ldr	r2, [r3, #20]
 80003fa:	4b3b      	ldr	r3, [pc, #236]	@ (80004e8 <MX_GPIO_Init+0x108>)
 80003fc:	2180      	movs	r1, #128	@ 0x80
 80003fe:	03c9      	lsls	r1, r1, #15
 8000400:	430a      	orrs	r2, r1
 8000402:	615a      	str	r2, [r3, #20]
 8000404:	4b38      	ldr	r3, [pc, #224]	@ (80004e8 <MX_GPIO_Init+0x108>)
 8000406:	695a      	ldr	r2, [r3, #20]
 8000408:	2380      	movs	r3, #128	@ 0x80
 800040a:	03db      	lsls	r3, r3, #15
 800040c:	4013      	ands	r3, r2
 800040e:	60bb      	str	r3, [r7, #8]
 8000410:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000412:	4b35      	ldr	r3, [pc, #212]	@ (80004e8 <MX_GPIO_Init+0x108>)
 8000414:	695a      	ldr	r2, [r3, #20]
 8000416:	4b34      	ldr	r3, [pc, #208]	@ (80004e8 <MX_GPIO_Init+0x108>)
 8000418:	2180      	movs	r1, #128	@ 0x80
 800041a:	0289      	lsls	r1, r1, #10
 800041c:	430a      	orrs	r2, r1
 800041e:	615a      	str	r2, [r3, #20]
 8000420:	4b31      	ldr	r3, [pc, #196]	@ (80004e8 <MX_GPIO_Init+0x108>)
 8000422:	695a      	ldr	r2, [r3, #20]
 8000424:	2380      	movs	r3, #128	@ 0x80
 8000426:	029b      	lsls	r3, r3, #10
 8000428:	4013      	ands	r3, r2
 800042a:	607b      	str	r3, [r7, #4]
 800042c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SDIO_Pin|SCLK_Pin|SENB_Pin|LED_1_Pin
 800042e:	492f      	ldr	r1, [pc, #188]	@ (80004ec <MX_GPIO_Init+0x10c>)
 8000430:	2390      	movs	r3, #144	@ 0x90
 8000432:	05db      	lsls	r3, r3, #23
 8000434:	2200      	movs	r2, #0
 8000436:	0018      	movs	r0, r3
 8000438:	f000 fecf 	bl	80011da <HAL_GPIO_WritePin>
                          |LED_2_Pin|RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : SDIO_Pin */
  GPIO_InitStruct.Pin = SDIO_Pin;
 800043c:	193b      	adds	r3, r7, r4
 800043e:	2201      	movs	r2, #1
 8000440:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000442:	193b      	adds	r3, r7, r4
 8000444:	2211      	movs	r2, #17
 8000446:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000448:	193b      	adds	r3, r7, r4
 800044a:	2201      	movs	r2, #1
 800044c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800044e:	193b      	adds	r3, r7, r4
 8000450:	2200      	movs	r2, #0
 8000452:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(SDIO_GPIO_Port, &GPIO_InitStruct);
 8000454:	193a      	adds	r2, r7, r4
 8000456:	2390      	movs	r3, #144	@ 0x90
 8000458:	05db      	lsls	r3, r3, #23
 800045a:	0011      	movs	r1, r2
 800045c:	0018      	movs	r0, r3
 800045e:	f000 fd2f 	bl	8000ec0 <HAL_GPIO_Init>

  /*Configure GPIO pins : SCLK_Pin SENB_Pin LED_1_Pin LED_2_Pin
                           RST_Pin */
  GPIO_InitStruct.Pin = SCLK_Pin|SENB_Pin|LED_1_Pin|LED_2_Pin
 8000462:	193b      	adds	r3, r7, r4
 8000464:	4a22      	ldr	r2, [pc, #136]	@ (80004f0 <MX_GPIO_Init+0x110>)
 8000466:	601a      	str	r2, [r3, #0]
                          |RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000468:	193b      	adds	r3, r7, r4
 800046a:	2201      	movs	r2, #1
 800046c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800046e:	193b      	adds	r3, r7, r4
 8000470:	2200      	movs	r2, #0
 8000472:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000474:	193b      	adds	r3, r7, r4
 8000476:	2200      	movs	r2, #0
 8000478:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800047a:	193a      	adds	r2, r7, r4
 800047c:	2390      	movs	r3, #144	@ 0x90
 800047e:	05db      	lsls	r3, r3, #23
 8000480:	0011      	movs	r1, r2
 8000482:	0018      	movs	r0, r3
 8000484:	f000 fd1c 	bl	8000ec0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ENC_B_Pin */
  GPIO_InitStruct.Pin = ENC_B_Pin;
 8000488:	193b      	adds	r3, r7, r4
 800048a:	2220      	movs	r2, #32
 800048c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800048e:	193b      	adds	r3, r7, r4
 8000490:	2200      	movs	r2, #0
 8000492:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000494:	193b      	adds	r3, r7, r4
 8000496:	2201      	movs	r2, #1
 8000498:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(ENC_B_GPIO_Port, &GPIO_InitStruct);
 800049a:	193a      	adds	r2, r7, r4
 800049c:	2390      	movs	r3, #144	@ 0x90
 800049e:	05db      	lsls	r3, r3, #23
 80004a0:	0011      	movs	r1, r2
 80004a2:	0018      	movs	r0, r3
 80004a4:	f000 fd0c 	bl	8000ec0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ENC_A_Pin BUTTON_1_Pin BUTTON_2_Pin */
  GPIO_InitStruct.Pin = ENC_A_Pin|BUTTON_1_Pin|BUTTON_2_Pin;
 80004a8:	0021      	movs	r1, r4
 80004aa:	187b      	adds	r3, r7, r1
 80004ac:	22b0      	movs	r2, #176	@ 0xb0
 80004ae:	0092      	lsls	r2, r2, #2
 80004b0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80004b2:	187b      	adds	r3, r7, r1
 80004b4:	2288      	movs	r2, #136	@ 0x88
 80004b6:	0352      	lsls	r2, r2, #13
 80004b8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80004ba:	187b      	adds	r3, r7, r1
 80004bc:	2201      	movs	r2, #1
 80004be:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004c0:	187a      	adds	r2, r7, r1
 80004c2:	2390      	movs	r3, #144	@ 0x90
 80004c4:	05db      	lsls	r3, r3, #23
 80004c6:	0011      	movs	r1, r2
 80004c8:	0018      	movs	r0, r3
 80004ca:	f000 fcf9 	bl	8000ec0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 80004ce:	2200      	movs	r2, #0
 80004d0:	2100      	movs	r1, #0
 80004d2:	2007      	movs	r0, #7
 80004d4:	f000 fcc2 	bl	8000e5c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 80004d8:	2007      	movs	r0, #7
 80004da:	f000 fcd4 	bl	8000e86 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80004de:	46c0      	nop			@ (mov r8, r8)
 80004e0:	46bd      	mov	sp, r7
 80004e2:	b009      	add	sp, #36	@ 0x24
 80004e4:	bd90      	pop	{r4, r7, pc}
 80004e6:	46c0      	nop			@ (mov r8, r8)
 80004e8:	40021000 	.word	0x40021000
 80004ec:	0000041f 	.word	0x0000041f
 80004f0:	0000041e 	.word	0x0000041e

080004f4 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80004f4:	b5b0      	push	{r4, r5, r7, lr}
 80004f6:	b084      	sub	sp, #16
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	0002      	movs	r2, r0
 80004fc:	1dbb      	adds	r3, r7, #6
 80004fe:	801a      	strh	r2, [r3, #0]
  if(GPIO_Pin == ENC_A_Pin) {
 8000500:	1dbb      	adds	r3, r7, #6
 8000502:	881b      	ldrh	r3, [r3, #0]
 8000504:	2b40      	cmp	r3, #64	@ 0x40
 8000506:	d142      	bne.n	800058e <HAL_GPIO_EXTI_Callback+0x9a>
	  uint32_t current_time = HAL_GetTick();
 8000508:	f000 fbce 	bl	8000ca8 <HAL_GetTick>
 800050c:	0003      	movs	r3, r0
 800050e:	60fb      	str	r3, [r7, #12]
	  if ((current_time - prev_enc_time) < ENC_DELAY) {
 8000510:	4b22      	ldr	r3, [pc, #136]	@ (800059c <HAL_GPIO_EXTI_Callback+0xa8>)
 8000512:	681b      	ldr	r3, [r3, #0]
 8000514:	68fa      	ldr	r2, [r7, #12]
 8000516:	1ad3      	subs	r3, r2, r3
 8000518:	2bc7      	cmp	r3, #199	@ 0xc7
 800051a:	d93a      	bls.n	8000592 <HAL_GPIO_EXTI_Callback+0x9e>
		  return;
	  }
	  prev_enc_time = current_time;
 800051c:	4b1f      	ldr	r3, [pc, #124]	@ (800059c <HAL_GPIO_EXTI_Callback+0xa8>)
 800051e:	68fa      	ldr	r2, [r7, #12]
 8000520:	601a      	str	r2, [r3, #0]

//	  uint8_t current_A = HAL_GPIO_ReadPin(GPIOA, ENC_A_Pin);
	  uint8_t current_B = HAL_GPIO_ReadPin(GPIOA, ENC_B_Pin);
 8000522:	250b      	movs	r5, #11
 8000524:	197c      	adds	r4, r7, r5
 8000526:	2390      	movs	r3, #144	@ 0x90
 8000528:	05db      	lsls	r3, r3, #23
 800052a:	2120      	movs	r1, #32
 800052c:	0018      	movs	r0, r3
 800052e:	f000 fe37 	bl	80011a0 <HAL_GPIO_ReadPin>
 8000532:	0003      	movs	r3, r0
 8000534:	7023      	strb	r3, [r4, #0]

	  if (current_B == 0) {
 8000536:	197b      	adds	r3, r7, r5
 8000538:	781b      	ldrb	r3, [r3, #0]
 800053a:	2b00      	cmp	r3, #0
 800053c:	d109      	bne.n	8000552 <HAL_GPIO_EXTI_Callback+0x5e>
		  encoder_position++;
 800053e:	4b18      	ldr	r3, [pc, #96]	@ (80005a0 <HAL_GPIO_EXTI_Callback+0xac>)
 8000540:	781b      	ldrb	r3, [r3, #0]
 8000542:	b25b      	sxtb	r3, r3
 8000544:	b2db      	uxtb	r3, r3
 8000546:	3301      	adds	r3, #1
 8000548:	b2db      	uxtb	r3, r3
 800054a:	b25a      	sxtb	r2, r3
 800054c:	4b14      	ldr	r3, [pc, #80]	@ (80005a0 <HAL_GPIO_EXTI_Callback+0xac>)
 800054e:	701a      	strb	r2, [r3, #0]
 8000550:	e008      	b.n	8000564 <HAL_GPIO_EXTI_Callback+0x70>
	  }
	  else {
		  encoder_position--;
 8000552:	4b13      	ldr	r3, [pc, #76]	@ (80005a0 <HAL_GPIO_EXTI_Callback+0xac>)
 8000554:	781b      	ldrb	r3, [r3, #0]
 8000556:	b25b      	sxtb	r3, r3
 8000558:	b2db      	uxtb	r3, r3
 800055a:	3b01      	subs	r3, #1
 800055c:	b2db      	uxtb	r3, r3
 800055e:	b25a      	sxtb	r2, r3
 8000560:	4b0f      	ldr	r3, [pc, #60]	@ (80005a0 <HAL_GPIO_EXTI_Callback+0xac>)
 8000562:	701a      	strb	r2, [r3, #0]
	  }

	  if (encoder_position > ENC_POS_MAX) {
 8000564:	4b0e      	ldr	r3, [pc, #56]	@ (80005a0 <HAL_GPIO_EXTI_Callback+0xac>)
 8000566:	781b      	ldrb	r3, [r3, #0]
 8000568:	b25b      	sxtb	r3, r3
 800056a:	2b14      	cmp	r3, #20
 800056c:	dd03      	ble.n	8000576 <HAL_GPIO_EXTI_Callback+0x82>
		  encoder_position = ENC_POS_MAX;
 800056e:	4b0c      	ldr	r3, [pc, #48]	@ (80005a0 <HAL_GPIO_EXTI_Callback+0xac>)
 8000570:	2214      	movs	r2, #20
 8000572:	701a      	strb	r2, [r3, #0]
 8000574:	e007      	b.n	8000586 <HAL_GPIO_EXTI_Callback+0x92>
	  }
	  else if (encoder_position < 0) {
 8000576:	4b0a      	ldr	r3, [pc, #40]	@ (80005a0 <HAL_GPIO_EXTI_Callback+0xac>)
 8000578:	781b      	ldrb	r3, [r3, #0]
 800057a:	b25b      	sxtb	r3, r3
 800057c:	2b00      	cmp	r3, #0
 800057e:	da02      	bge.n	8000586 <HAL_GPIO_EXTI_Callback+0x92>
		  encoder_position = 0;
 8000580:	4b07      	ldr	r3, [pc, #28]	@ (80005a0 <HAL_GPIO_EXTI_Callback+0xac>)
 8000582:	2200      	movs	r2, #0
 8000584:	701a      	strb	r2, [r3, #0]
	  }

	  channel_changed = 1;
 8000586:	4b07      	ldr	r3, [pc, #28]	@ (80005a4 <HAL_GPIO_EXTI_Callback+0xb0>)
 8000588:	2201      	movs	r2, #1
 800058a:	701a      	strb	r2, [r3, #0]
 800058c:	e002      	b.n	8000594 <HAL_GPIO_EXTI_Callback+0xa0>
//
//		  channel_changed = 1;
//	  }
  }
  else {
	  __NOP();
 800058e:	46c0      	nop			@ (mov r8, r8)
 8000590:	e000      	b.n	8000594 <HAL_GPIO_EXTI_Callback+0xa0>
		  return;
 8000592:	46c0      	nop			@ (mov r8, r8)
  }
}
 8000594:	46bd      	mov	sp, r7
 8000596:	b004      	add	sp, #16
 8000598:	bdb0      	pop	{r4, r5, r7, pc}
 800059a:	46c0      	nop			@ (mov r8, r8)
 800059c:	20000070 	.word	0x20000070
 80005a0:	20000074 	.word	0x20000074
 80005a4:	20000075 	.word	0x20000075

080005a8 <delay10us>:

void delay10us(int mult) {
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b082      	sub	sp, #8
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	6078      	str	r0, [r7, #4]
	// Timer is running at 16/80 = 0.2 MHz, so ticks are 5 us
	__HAL_TIM_SET_COUNTER(&htim14, 0);
 80005b0:	4b09      	ldr	r3, [pc, #36]	@ (80005d8 <delay10us+0x30>)
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	2200      	movs	r2, #0
 80005b6:	625a      	str	r2, [r3, #36]	@ 0x24
	while ((uint16_t)__HAL_TIM_GET_COUNTER(&htim14) < 2*mult);
 80005b8:	46c0      	nop			@ (mov r8, r8)
 80005ba:	4b07      	ldr	r3, [pc, #28]	@ (80005d8 <delay10us+0x30>)
 80005bc:	681b      	ldr	r3, [r3, #0]
 80005be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80005c0:	b29b      	uxth	r3, r3
 80005c2:	001a      	movs	r2, r3
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	005b      	lsls	r3, r3, #1
 80005c8:	429a      	cmp	r2, r3
 80005ca:	dbf6      	blt.n	80005ba <delay10us+0x12>
}
 80005cc:	46c0      	nop			@ (mov r8, r8)
 80005ce:	46c0      	nop			@ (mov r8, r8)
 80005d0:	46bd      	mov	sp, r7
 80005d2:	b002      	add	sp, #8
 80005d4:	bd80      	pop	{r7, pc}
 80005d6:	46c0      	nop			@ (mov r8, r8)
 80005d8:	20000028 	.word	0x20000028

080005dc <start>:
//	delay10us(10);
//	HAL_GPIO_WritePin(GPIOA, SCLK_Pin, GPIO_PIN_RESET);
//	delay10us(10);
//}

void start() {
 80005dc:	b580      	push	{r7, lr}
 80005de:	af00      	add	r7, sp, #0
	// Start (SDIO falls while SCLK is high)
	HAL_GPIO_WritePin(GPIOA, SDIO_Pin, GPIO_PIN_SET);
 80005e0:	2390      	movs	r3, #144	@ 0x90
 80005e2:	05db      	lsls	r3, r3, #23
 80005e4:	2201      	movs	r2, #1
 80005e6:	2101      	movs	r1, #1
 80005e8:	0018      	movs	r0, r3
 80005ea:	f000 fdf6 	bl	80011da <HAL_GPIO_WritePin>
	delay10us(10);
 80005ee:	200a      	movs	r0, #10
 80005f0:	f7ff ffda 	bl	80005a8 <delay10us>
	HAL_GPIO_WritePin(GPIOA, SCLK_Pin, GPIO_PIN_SET);
 80005f4:	2390      	movs	r3, #144	@ 0x90
 80005f6:	05db      	lsls	r3, r3, #23
 80005f8:	2201      	movs	r2, #1
 80005fa:	2102      	movs	r1, #2
 80005fc:	0018      	movs	r0, r3
 80005fe:	f000 fdec 	bl	80011da <HAL_GPIO_WritePin>
	delay10us(10);
 8000602:	200a      	movs	r0, #10
 8000604:	f7ff ffd0 	bl	80005a8 <delay10us>
	HAL_GPIO_WritePin(GPIOA, SDIO_Pin, GPIO_PIN_RESET);
 8000608:	2390      	movs	r3, #144	@ 0x90
 800060a:	05db      	lsls	r3, r3, #23
 800060c:	2200      	movs	r2, #0
 800060e:	2101      	movs	r1, #1
 8000610:	0018      	movs	r0, r3
 8000612:	f000 fde2 	bl	80011da <HAL_GPIO_WritePin>
	delay10us(10);
 8000616:	200a      	movs	r0, #10
 8000618:	f7ff ffc6 	bl	80005a8 <delay10us>
	HAL_GPIO_WritePin(GPIOA, SCLK_Pin, GPIO_PIN_RESET);
 800061c:	2390      	movs	r3, #144	@ 0x90
 800061e:	05db      	lsls	r3, r3, #23
 8000620:	2200      	movs	r2, #0
 8000622:	2102      	movs	r1, #2
 8000624:	0018      	movs	r0, r3
 8000626:	f000 fdd8 	bl	80011da <HAL_GPIO_WritePin>
	delay10us(10);
 800062a:	200a      	movs	r0, #10
 800062c:	f7ff ffbc 	bl	80005a8 <delay10us>
}
 8000630:	46c0      	nop			@ (mov r8, r8)
 8000632:	46bd      	mov	sp, r7
 8000634:	bd80      	pop	{r7, pc}

08000636 <end>:

void end() {
 8000636:	b580      	push	{r7, lr}
 8000638:	af00      	add	r7, sp, #0
	// End (SDIO rises while SCLK is high)
	HAL_GPIO_WritePin(GPIOA, SDIO_Pin, GPIO_PIN_RESET);
 800063a:	2390      	movs	r3, #144	@ 0x90
 800063c:	05db      	lsls	r3, r3, #23
 800063e:	2200      	movs	r2, #0
 8000640:	2101      	movs	r1, #1
 8000642:	0018      	movs	r0, r3
 8000644:	f000 fdc9 	bl	80011da <HAL_GPIO_WritePin>
	delay10us(10);
 8000648:	200a      	movs	r0, #10
 800064a:	f7ff ffad 	bl	80005a8 <delay10us>
	HAL_GPIO_WritePin(GPIOA, SCLK_Pin, GPIO_PIN_SET);
 800064e:	2390      	movs	r3, #144	@ 0x90
 8000650:	05db      	lsls	r3, r3, #23
 8000652:	2201      	movs	r2, #1
 8000654:	2102      	movs	r1, #2
 8000656:	0018      	movs	r0, r3
 8000658:	f000 fdbf 	bl	80011da <HAL_GPIO_WritePin>
	delay10us(10);
 800065c:	200a      	movs	r0, #10
 800065e:	f7ff ffa3 	bl	80005a8 <delay10us>
	HAL_GPIO_WritePin(GPIOA, SDIO_Pin, GPIO_PIN_SET);
 8000662:	2390      	movs	r3, #144	@ 0x90
 8000664:	05db      	lsls	r3, r3, #23
 8000666:	2201      	movs	r2, #1
 8000668:	2101      	movs	r1, #1
 800066a:	0018      	movs	r0, r3
 800066c:	f000 fdb5 	bl	80011da <HAL_GPIO_WritePin>
	delay10us(10);
 8000670:	200a      	movs	r0, #10
 8000672:	f7ff ff99 	bl	80005a8 <delay10us>
	HAL_GPIO_WritePin(GPIOA, SCLK_Pin, GPIO_PIN_RESET);
 8000676:	2390      	movs	r3, #144	@ 0x90
 8000678:	05db      	lsls	r3, r3, #23
 800067a:	2200      	movs	r2, #0
 800067c:	2102      	movs	r1, #2
 800067e:	0018      	movs	r0, r3
 8000680:	f000 fdab 	bl	80011da <HAL_GPIO_WritePin>
	delay10us(10);
 8000684:	200a      	movs	r0, #10
 8000686:	f7ff ff8f 	bl	80005a8 <delay10us>
}
 800068a:	46c0      	nop			@ (mov r8, r8)
 800068c:	46bd      	mov	sp, r7
 800068e:	bd80      	pop	{r7, pc}

08000690 <ack>:

void ack() {
 8000690:	b580      	push	{r7, lr}
 8000692:	af00      	add	r7, sp, #0
	// Let FM receiver drive the acknowledgment bit (SDIO high is open drain with pull-up)
	HAL_GPIO_WritePin(GPIOA, SDIO_Pin, GPIO_PIN_SET);
 8000694:	2390      	movs	r3, #144	@ 0x90
 8000696:	05db      	lsls	r3, r3, #23
 8000698:	2201      	movs	r2, #1
 800069a:	2101      	movs	r1, #1
 800069c:	0018      	movs	r0, r3
 800069e:	f000 fd9c 	bl	80011da <HAL_GPIO_WritePin>
	delay10us(10);
 80006a2:	200a      	movs	r0, #10
 80006a4:	f7ff ff80 	bl	80005a8 <delay10us>
	HAL_GPIO_WritePin(GPIOA, SCLK_Pin, GPIO_PIN_SET);
 80006a8:	2390      	movs	r3, #144	@ 0x90
 80006aa:	05db      	lsls	r3, r3, #23
 80006ac:	2201      	movs	r2, #1
 80006ae:	2102      	movs	r1, #2
 80006b0:	0018      	movs	r0, r3
 80006b2:	f000 fd92 	bl	80011da <HAL_GPIO_WritePin>
	delay10us(10);
 80006b6:	200a      	movs	r0, #10
 80006b8:	f7ff ff76 	bl	80005a8 <delay10us>
	HAL_GPIO_WritePin(GPIOA, SCLK_Pin, GPIO_PIN_RESET);
 80006bc:	2390      	movs	r3, #144	@ 0x90
 80006be:	05db      	lsls	r3, r3, #23
 80006c0:	2200      	movs	r2, #0
 80006c2:	2102      	movs	r1, #2
 80006c4:	0018      	movs	r0, r3
 80006c6:	f000 fd88 	bl	80011da <HAL_GPIO_WritePin>
	delay10us(10);
 80006ca:	200a      	movs	r0, #10
 80006cc:	f7ff ff6c 	bl	80005a8 <delay10us>
}
 80006d0:	46c0      	nop			@ (mov r8, r8)
 80006d2:	46bd      	mov	sp, r7
 80006d4:	bd80      	pop	{r7, pc}

080006d6 <powerUp>:

void powerUp() {
 80006d6:	b5b0      	push	{r4, r5, r7, lr}
 80006d8:	b086      	sub	sp, #24
 80006da:	af00      	add	r7, sp, #0
	uint8_t CTL = 0x22;
 80006dc:	210f      	movs	r1, #15
 80006de:	187b      	adds	r3, r7, r1
 80006e0:	2222      	movs	r2, #34	@ 0x22
 80006e2:	701a      	strb	r2, [r3, #0]
	uint8_t CMD = 0x01;
 80006e4:	200e      	movs	r0, #14
 80006e6:	183b      	adds	r3, r7, r0
 80006e8:	2201      	movs	r2, #1
 80006ea:	701a      	strb	r2, [r3, #0]
	// FM receive mode (see https://media.digikey.com/pdf/Data%20Sheets/Silicon%20Laboratories%20PDFs/Si47xx_ProgGuide.pdf)
	uint8_t ARG1 = 0x00;
 80006ec:	240d      	movs	r4, #13
 80006ee:	193b      	adds	r3, r7, r4
 80006f0:	2200      	movs	r2, #0
 80006f2:	701a      	strb	r2, [r3, #0]
	// Analog out
	uint8_t ARG2 = 0x05;
 80006f4:	250c      	movs	r5, #12
 80006f6:	197b      	adds	r3, r7, r5
 80006f8:	2205      	movs	r2, #5
 80006fa:	701a      	strb	r2, [r3, #0]

	uint8_t MSG[4] = {CTL, CMD, ARG1, ARG2};
 80006fc:	1d3b      	adds	r3, r7, #4
 80006fe:	187a      	adds	r2, r7, r1
 8000700:	7812      	ldrb	r2, [r2, #0]
 8000702:	701a      	strb	r2, [r3, #0]
 8000704:	1d3b      	adds	r3, r7, #4
 8000706:	183a      	adds	r2, r7, r0
 8000708:	7812      	ldrb	r2, [r2, #0]
 800070a:	705a      	strb	r2, [r3, #1]
 800070c:	1d3b      	adds	r3, r7, #4
 800070e:	193a      	adds	r2, r7, r4
 8000710:	7812      	ldrb	r2, [r2, #0]
 8000712:	709a      	strb	r2, [r3, #2]
 8000714:	1d3b      	adds	r3, r7, #4
 8000716:	197a      	adds	r2, r7, r5
 8000718:	7812      	ldrb	r2, [r2, #0]
 800071a:	70da      	strb	r2, [r3, #3]

	start();
 800071c:	f7ff ff5e 	bl	80005dc <start>

	for (int i = 0; i < 4; i++) {
 8000720:	2300      	movs	r3, #0
 8000722:	617b      	str	r3, [r7, #20]
 8000724:	e043      	b.n	80007ae <powerUp+0xd8>
		uint8_t data = MSG[i];
 8000726:	230b      	movs	r3, #11
 8000728:	18fb      	adds	r3, r7, r3
 800072a:	1d39      	adds	r1, r7, #4
 800072c:	697a      	ldr	r2, [r7, #20]
 800072e:	188a      	adds	r2, r1, r2
 8000730:	7812      	ldrb	r2, [r2, #0]
 8000732:	701a      	strb	r2, [r3, #0]

		for (int bit = 7; bit >= 0; bit--) {
 8000734:	2307      	movs	r3, #7
 8000736:	613b      	str	r3, [r7, #16]
 8000738:	e031      	b.n	800079e <powerUp+0xc8>
			if (data & (1 << bit)) {
 800073a:	230b      	movs	r3, #11
 800073c:	18fb      	adds	r3, r7, r3
 800073e:	781a      	ldrb	r2, [r3, #0]
 8000740:	693b      	ldr	r3, [r7, #16]
 8000742:	411a      	asrs	r2, r3
 8000744:	0013      	movs	r3, r2
 8000746:	2201      	movs	r2, #1
 8000748:	4013      	ands	r3, r2
 800074a:	d007      	beq.n	800075c <powerUp+0x86>
				HAL_GPIO_WritePin(GPIOA, SDIO_Pin, GPIO_PIN_SET);
 800074c:	2390      	movs	r3, #144	@ 0x90
 800074e:	05db      	lsls	r3, r3, #23
 8000750:	2201      	movs	r2, #1
 8000752:	2101      	movs	r1, #1
 8000754:	0018      	movs	r0, r3
 8000756:	f000 fd40 	bl	80011da <HAL_GPIO_WritePin>
 800075a:	e006      	b.n	800076a <powerUp+0x94>
			}
			else {
				HAL_GPIO_WritePin(GPIOA, SDIO_Pin, GPIO_PIN_RESET);
 800075c:	2390      	movs	r3, #144	@ 0x90
 800075e:	05db      	lsls	r3, r3, #23
 8000760:	2200      	movs	r2, #0
 8000762:	2101      	movs	r1, #1
 8000764:	0018      	movs	r0, r3
 8000766:	f000 fd38 	bl	80011da <HAL_GPIO_WritePin>
			}
			delay10us(10);
 800076a:	200a      	movs	r0, #10
 800076c:	f7ff ff1c 	bl	80005a8 <delay10us>

			// Toggle clock
			HAL_GPIO_WritePin(GPIOA, SCLK_Pin, GPIO_PIN_SET);
 8000770:	2390      	movs	r3, #144	@ 0x90
 8000772:	05db      	lsls	r3, r3, #23
 8000774:	2201      	movs	r2, #1
 8000776:	2102      	movs	r1, #2
 8000778:	0018      	movs	r0, r3
 800077a:	f000 fd2e 	bl	80011da <HAL_GPIO_WritePin>
			delay10us(10);
 800077e:	200a      	movs	r0, #10
 8000780:	f7ff ff12 	bl	80005a8 <delay10us>
			HAL_GPIO_WritePin(GPIOA, SCLK_Pin, GPIO_PIN_RESET);
 8000784:	2390      	movs	r3, #144	@ 0x90
 8000786:	05db      	lsls	r3, r3, #23
 8000788:	2200      	movs	r2, #0
 800078a:	2102      	movs	r1, #2
 800078c:	0018      	movs	r0, r3
 800078e:	f000 fd24 	bl	80011da <HAL_GPIO_WritePin>
			delay10us(10);
 8000792:	200a      	movs	r0, #10
 8000794:	f7ff ff08 	bl	80005a8 <delay10us>
		for (int bit = 7; bit >= 0; bit--) {
 8000798:	693b      	ldr	r3, [r7, #16]
 800079a:	3b01      	subs	r3, #1
 800079c:	613b      	str	r3, [r7, #16]
 800079e:	693b      	ldr	r3, [r7, #16]
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	daca      	bge.n	800073a <powerUp+0x64>
		}

		ack();
 80007a4:	f7ff ff74 	bl	8000690 <ack>
	for (int i = 0; i < 4; i++) {
 80007a8:	697b      	ldr	r3, [r7, #20]
 80007aa:	3301      	adds	r3, #1
 80007ac:	617b      	str	r3, [r7, #20]
 80007ae:	697b      	ldr	r3, [r7, #20]
 80007b0:	2b03      	cmp	r3, #3
 80007b2:	ddb8      	ble.n	8000726 <powerUp+0x50>
	}

	end();
 80007b4:	f7ff ff3f 	bl	8000636 <end>
}
 80007b8:	46c0      	nop			@ (mov r8, r8)
 80007ba:	46bd      	mov	sp, r7
 80007bc:	b006      	add	sp, #24
 80007be:	bdb0      	pop	{r4, r5, r7, pc}

080007c0 <seek>:
	}

	end();
}

void seek() {
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b084      	sub	sp, #16
 80007c4:	af00      	add	r7, sp, #0
	uint8_t CTL = 0x22;
 80007c6:	1dfb      	adds	r3, r7, #7
 80007c8:	2222      	movs	r2, #34	@ 0x22
 80007ca:	701a      	strb	r2, [r3, #0]
	uint8_t CMD = 0x21;
 80007cc:	1dbb      	adds	r3, r7, #6
 80007ce:	2221      	movs	r2, #33	@ 0x21
 80007d0:	701a      	strb	r2, [r3, #0]
	uint8_t MSG[3] = {CTL, CMD, 0x0C}; // 00001100 for seek up and wrap
 80007d2:	003b      	movs	r3, r7
 80007d4:	1dfa      	adds	r2, r7, #7
 80007d6:	7812      	ldrb	r2, [r2, #0]
 80007d8:	701a      	strb	r2, [r3, #0]
 80007da:	003b      	movs	r3, r7
 80007dc:	1dba      	adds	r2, r7, #6
 80007de:	7812      	ldrb	r2, [r2, #0]
 80007e0:	705a      	strb	r2, [r3, #1]
 80007e2:	003b      	movs	r3, r7
 80007e4:	220c      	movs	r2, #12
 80007e6:	709a      	strb	r2, [r3, #2]

	start();
 80007e8:	f7ff fef8 	bl	80005dc <start>

	for (int i = 0; i < 3; i++) {
 80007ec:	2300      	movs	r3, #0
 80007ee:	60fb      	str	r3, [r7, #12]
 80007f0:	e041      	b.n	8000876 <seek+0xb6>
		uint8_t data = MSG[i];
 80007f2:	1d7b      	adds	r3, r7, #5
 80007f4:	0039      	movs	r1, r7
 80007f6:	68fa      	ldr	r2, [r7, #12]
 80007f8:	188a      	adds	r2, r1, r2
 80007fa:	7812      	ldrb	r2, [r2, #0]
 80007fc:	701a      	strb	r2, [r3, #0]

		for (int bit = 7; bit >= 0; bit--) {
 80007fe:	2307      	movs	r3, #7
 8000800:	60bb      	str	r3, [r7, #8]
 8000802:	e030      	b.n	8000866 <seek+0xa6>
			if (data & (1 << bit)) {
 8000804:	1d7b      	adds	r3, r7, #5
 8000806:	781a      	ldrb	r2, [r3, #0]
 8000808:	68bb      	ldr	r3, [r7, #8]
 800080a:	411a      	asrs	r2, r3
 800080c:	0013      	movs	r3, r2
 800080e:	2201      	movs	r2, #1
 8000810:	4013      	ands	r3, r2
 8000812:	d007      	beq.n	8000824 <seek+0x64>
				HAL_GPIO_WritePin(GPIOA, SDIO_Pin, GPIO_PIN_SET);
 8000814:	2390      	movs	r3, #144	@ 0x90
 8000816:	05db      	lsls	r3, r3, #23
 8000818:	2201      	movs	r2, #1
 800081a:	2101      	movs	r1, #1
 800081c:	0018      	movs	r0, r3
 800081e:	f000 fcdc 	bl	80011da <HAL_GPIO_WritePin>
 8000822:	e006      	b.n	8000832 <seek+0x72>
			}
			else {
				HAL_GPIO_WritePin(GPIOA, SDIO_Pin, GPIO_PIN_RESET);
 8000824:	2390      	movs	r3, #144	@ 0x90
 8000826:	05db      	lsls	r3, r3, #23
 8000828:	2200      	movs	r2, #0
 800082a:	2101      	movs	r1, #1
 800082c:	0018      	movs	r0, r3
 800082e:	f000 fcd4 	bl	80011da <HAL_GPIO_WritePin>
			}
			delay10us(10);
 8000832:	200a      	movs	r0, #10
 8000834:	f7ff feb8 	bl	80005a8 <delay10us>

			// Toggle clock
			HAL_GPIO_WritePin(GPIOA, SCLK_Pin, GPIO_PIN_SET);
 8000838:	2390      	movs	r3, #144	@ 0x90
 800083a:	05db      	lsls	r3, r3, #23
 800083c:	2201      	movs	r2, #1
 800083e:	2102      	movs	r1, #2
 8000840:	0018      	movs	r0, r3
 8000842:	f000 fcca 	bl	80011da <HAL_GPIO_WritePin>
			delay10us(10);
 8000846:	200a      	movs	r0, #10
 8000848:	f7ff feae 	bl	80005a8 <delay10us>
			HAL_GPIO_WritePin(GPIOA, SCLK_Pin, GPIO_PIN_RESET);
 800084c:	2390      	movs	r3, #144	@ 0x90
 800084e:	05db      	lsls	r3, r3, #23
 8000850:	2200      	movs	r2, #0
 8000852:	2102      	movs	r1, #2
 8000854:	0018      	movs	r0, r3
 8000856:	f000 fcc0 	bl	80011da <HAL_GPIO_WritePin>
			delay10us(10);
 800085a:	200a      	movs	r0, #10
 800085c:	f7ff fea4 	bl	80005a8 <delay10us>
		for (int bit = 7; bit >= 0; bit--) {
 8000860:	68bb      	ldr	r3, [r7, #8]
 8000862:	3b01      	subs	r3, #1
 8000864:	60bb      	str	r3, [r7, #8]
 8000866:	68bb      	ldr	r3, [r7, #8]
 8000868:	2b00      	cmp	r3, #0
 800086a:	dacb      	bge.n	8000804 <seek+0x44>
		}

		ack();
 800086c:	f7ff ff10 	bl	8000690 <ack>
	for (int i = 0; i < 3; i++) {
 8000870:	68fb      	ldr	r3, [r7, #12]
 8000872:	3301      	adds	r3, #1
 8000874:	60fb      	str	r3, [r7, #12]
 8000876:	68fb      	ldr	r3, [r7, #12]
 8000878:	2b02      	cmp	r3, #2
 800087a:	ddba      	ble.n	80007f2 <seek+0x32>
	}

	end();
 800087c:	f7ff fedb 	bl	8000636 <end>
}
 8000880:	46c0      	nop			@ (mov r8, r8)
 8000882:	46bd      	mov	sp, r7
 8000884:	b004      	add	sp, #16
 8000886:	bd80      	pop	{r7, pc}

08000888 <readStatus>:

void readStatus(uint8_t cont, uint8_t bytes_to_read) {
 8000888:	b580      	push	{r7, lr}
 800088a:	b086      	sub	sp, #24
 800088c:	af00      	add	r7, sp, #0
 800088e:	0002      	movs	r2, r0
 8000890:	1dfb      	adds	r3, r7, #7
 8000892:	701a      	strb	r2, [r3, #0]
 8000894:	1dbb      	adds	r3, r7, #6
 8000896:	1c0a      	adds	r2, r1, #0
 8000898:	701a      	strb	r2, [r3, #0]
	uint8_t CTL = 0x23;
 800089a:	230b      	movs	r3, #11
 800089c:	18fb      	adds	r3, r7, r3
 800089e:	2223      	movs	r2, #35	@ 0x23
 80008a0:	701a      	strb	r2, [r3, #0]

	start();
 80008a2:	f7ff fe9b 	bl	80005dc <start>

	for (int bit = 7; bit >= 0; bit--) {
 80008a6:	2307      	movs	r3, #7
 80008a8:	617b      	str	r3, [r7, #20]
 80008aa:	e031      	b.n	8000910 <readStatus+0x88>
		if (CTL & (1 << bit)) {
 80008ac:	230b      	movs	r3, #11
 80008ae:	18fb      	adds	r3, r7, r3
 80008b0:	781a      	ldrb	r2, [r3, #0]
 80008b2:	697b      	ldr	r3, [r7, #20]
 80008b4:	411a      	asrs	r2, r3
 80008b6:	0013      	movs	r3, r2
 80008b8:	2201      	movs	r2, #1
 80008ba:	4013      	ands	r3, r2
 80008bc:	d007      	beq.n	80008ce <readStatus+0x46>
			HAL_GPIO_WritePin(GPIOA, SDIO_Pin, GPIO_PIN_SET);
 80008be:	2390      	movs	r3, #144	@ 0x90
 80008c0:	05db      	lsls	r3, r3, #23
 80008c2:	2201      	movs	r2, #1
 80008c4:	2101      	movs	r1, #1
 80008c6:	0018      	movs	r0, r3
 80008c8:	f000 fc87 	bl	80011da <HAL_GPIO_WritePin>
 80008cc:	e006      	b.n	80008dc <readStatus+0x54>
		}
		else {
			HAL_GPIO_WritePin(GPIOA, SDIO_Pin, GPIO_PIN_RESET);
 80008ce:	2390      	movs	r3, #144	@ 0x90
 80008d0:	05db      	lsls	r3, r3, #23
 80008d2:	2200      	movs	r2, #0
 80008d4:	2101      	movs	r1, #1
 80008d6:	0018      	movs	r0, r3
 80008d8:	f000 fc7f 	bl	80011da <HAL_GPIO_WritePin>
		}
		delay10us(10);
 80008dc:	200a      	movs	r0, #10
 80008de:	f7ff fe63 	bl	80005a8 <delay10us>

		// Toggle clock
		HAL_GPIO_WritePin(GPIOA, SCLK_Pin, GPIO_PIN_SET);
 80008e2:	2390      	movs	r3, #144	@ 0x90
 80008e4:	05db      	lsls	r3, r3, #23
 80008e6:	2201      	movs	r2, #1
 80008e8:	2102      	movs	r1, #2
 80008ea:	0018      	movs	r0, r3
 80008ec:	f000 fc75 	bl	80011da <HAL_GPIO_WritePin>
		delay10us(10);
 80008f0:	200a      	movs	r0, #10
 80008f2:	f7ff fe59 	bl	80005a8 <delay10us>
		HAL_GPIO_WritePin(GPIOA, SCLK_Pin, GPIO_PIN_RESET);
 80008f6:	2390      	movs	r3, #144	@ 0x90
 80008f8:	05db      	lsls	r3, r3, #23
 80008fa:	2200      	movs	r2, #0
 80008fc:	2102      	movs	r1, #2
 80008fe:	0018      	movs	r0, r3
 8000900:	f000 fc6b 	bl	80011da <HAL_GPIO_WritePin>
		delay10us(10);
 8000904:	200a      	movs	r0, #10
 8000906:	f7ff fe4f 	bl	80005a8 <delay10us>
	for (int bit = 7; bit >= 0; bit--) {
 800090a:	697b      	ldr	r3, [r7, #20]
 800090c:	3b01      	subs	r3, #1
 800090e:	617b      	str	r3, [r7, #20]
 8000910:	697b      	ldr	r3, [r7, #20]
 8000912:	2b00      	cmp	r3, #0
 8000914:	daca      	bge.n	80008ac <readStatus+0x24>
	}
	ack();
 8000916:	f7ff febb 	bl	8000690 <ack>

	for (int i = 0; i < bytes_to_read; i++) {
 800091a:	2300      	movs	r3, #0
 800091c:	613b      	str	r3, [r7, #16]
 800091e:	e057      	b.n	80009d0 <readStatus+0x148>
		for (int bit = 7; bit >= 0; bit--) {
 8000920:	2307      	movs	r3, #7
 8000922:	60fb      	str	r3, [r7, #12]
 8000924:	e020      	b.n	8000968 <readStatus+0xe0>
			HAL_GPIO_WritePin(GPIOA, SDIO_Pin, GPIO_PIN_SET);
 8000926:	2390      	movs	r3, #144	@ 0x90
 8000928:	05db      	lsls	r3, r3, #23
 800092a:	2201      	movs	r2, #1
 800092c:	2101      	movs	r1, #1
 800092e:	0018      	movs	r0, r3
 8000930:	f000 fc53 	bl	80011da <HAL_GPIO_WritePin>
			delay10us(10);
 8000934:	200a      	movs	r0, #10
 8000936:	f7ff fe37 	bl	80005a8 <delay10us>

			// Toggle clock
			HAL_GPIO_WritePin(GPIOA, SCLK_Pin, GPIO_PIN_SET);
 800093a:	2390      	movs	r3, #144	@ 0x90
 800093c:	05db      	lsls	r3, r3, #23
 800093e:	2201      	movs	r2, #1
 8000940:	2102      	movs	r1, #2
 8000942:	0018      	movs	r0, r3
 8000944:	f000 fc49 	bl	80011da <HAL_GPIO_WritePin>
			delay10us(10);
 8000948:	200a      	movs	r0, #10
 800094a:	f7ff fe2d 	bl	80005a8 <delay10us>
			HAL_GPIO_WritePin(GPIOA, SCLK_Pin, GPIO_PIN_RESET);
 800094e:	2390      	movs	r3, #144	@ 0x90
 8000950:	05db      	lsls	r3, r3, #23
 8000952:	2200      	movs	r2, #0
 8000954:	2102      	movs	r1, #2
 8000956:	0018      	movs	r0, r3
 8000958:	f000 fc3f 	bl	80011da <HAL_GPIO_WritePin>
			delay10us(10);
 800095c:	200a      	movs	r0, #10
 800095e:	f7ff fe23 	bl	80005a8 <delay10us>
		for (int bit = 7; bit >= 0; bit--) {
 8000962:	68fb      	ldr	r3, [r7, #12]
 8000964:	3b01      	subs	r3, #1
 8000966:	60fb      	str	r3, [r7, #12]
 8000968:	68fb      	ldr	r3, [r7, #12]
 800096a:	2b00      	cmp	r3, #0
 800096c:	dadb      	bge.n	8000926 <readStatus+0x9e>
		}

		if (cont == 0) {
 800096e:	1dfb      	adds	r3, r7, #7
 8000970:	781b      	ldrb	r3, [r3, #0]
 8000972:	2b00      	cmp	r3, #0
 8000974:	d102      	bne.n	800097c <readStatus+0xf4>
			ack();
 8000976:	f7ff fe8b 	bl	8000690 <ack>
			break;
 800097a:	e02e      	b.n	80009da <readStatus+0x152>
		}
		else if (i == (bytes_to_read - 1)) {
 800097c:	1dbb      	adds	r3, r7, #6
 800097e:	781b      	ldrb	r3, [r3, #0]
 8000980:	3b01      	subs	r3, #1
 8000982:	693a      	ldr	r2, [r7, #16]
 8000984:	429a      	cmp	r2, r3
 8000986:	d102      	bne.n	800098e <readStatus+0x106>
			ack();
 8000988:	f7ff fe82 	bl	8000690 <ack>
 800098c:	e01d      	b.n	80009ca <readStatus+0x142>
		}
		else {
			HAL_GPIO_WritePin(GPIOA, SDIO_Pin, GPIO_PIN_RESET);
 800098e:	2390      	movs	r3, #144	@ 0x90
 8000990:	05db      	lsls	r3, r3, #23
 8000992:	2200      	movs	r2, #0
 8000994:	2101      	movs	r1, #1
 8000996:	0018      	movs	r0, r3
 8000998:	f000 fc1f 	bl	80011da <HAL_GPIO_WritePin>
			delay10us(10);
 800099c:	200a      	movs	r0, #10
 800099e:	f7ff fe03 	bl	80005a8 <delay10us>
			HAL_GPIO_WritePin(GPIOA, SCLK_Pin, GPIO_PIN_SET);
 80009a2:	2390      	movs	r3, #144	@ 0x90
 80009a4:	05db      	lsls	r3, r3, #23
 80009a6:	2201      	movs	r2, #1
 80009a8:	2102      	movs	r1, #2
 80009aa:	0018      	movs	r0, r3
 80009ac:	f000 fc15 	bl	80011da <HAL_GPIO_WritePin>
			delay10us(10);
 80009b0:	200a      	movs	r0, #10
 80009b2:	f7ff fdf9 	bl	80005a8 <delay10us>
			HAL_GPIO_WritePin(GPIOA, SCLK_Pin, GPIO_PIN_RESET);
 80009b6:	2390      	movs	r3, #144	@ 0x90
 80009b8:	05db      	lsls	r3, r3, #23
 80009ba:	2200      	movs	r2, #0
 80009bc:	2102      	movs	r1, #2
 80009be:	0018      	movs	r0, r3
 80009c0:	f000 fc0b 	bl	80011da <HAL_GPIO_WritePin>
			delay10us(10);
 80009c4:	200a      	movs	r0, #10
 80009c6:	f7ff fdef 	bl	80005a8 <delay10us>
	for (int i = 0; i < bytes_to_read; i++) {
 80009ca:	693b      	ldr	r3, [r7, #16]
 80009cc:	3301      	adds	r3, #1
 80009ce:	613b      	str	r3, [r7, #16]
 80009d0:	1dbb      	adds	r3, r7, #6
 80009d2:	781b      	ldrb	r3, [r3, #0]
 80009d4:	693a      	ldr	r2, [r7, #16]
 80009d6:	429a      	cmp	r2, r3
 80009d8:	dba2      	blt.n	8000920 <readStatus+0x98>
		}
	}

	end();
 80009da:	f7ff fe2c 	bl	8000636 <end>
}
 80009de:	46c0      	nop			@ (mov r8, r8)
 80009e0:	46bd      	mov	sp, r7
 80009e2:	b006      	add	sp, #24
 80009e4:	bd80      	pop	{r7, pc}

080009e6 <fm_tune_status>:

void fm_tune_status() {
 80009e6:	b580      	push	{r7, lr}
 80009e8:	b084      	sub	sp, #16
 80009ea:	af00      	add	r7, sp, #0
	uint8_t CTL = 0x22;
 80009ec:	1dfb      	adds	r3, r7, #7
 80009ee:	2222      	movs	r2, #34	@ 0x22
 80009f0:	701a      	strb	r2, [r3, #0]
	uint8_t CMD = 0x22;
 80009f2:	1dbb      	adds	r3, r7, #6
 80009f4:	2222      	movs	r2, #34	@ 0x22
 80009f6:	701a      	strb	r2, [r3, #0]

	uint8_t MSG[3] = {CTL, CMD, 0x00};
 80009f8:	003b      	movs	r3, r7
 80009fa:	1dfa      	adds	r2, r7, #7
 80009fc:	7812      	ldrb	r2, [r2, #0]
 80009fe:	701a      	strb	r2, [r3, #0]
 8000a00:	003b      	movs	r3, r7
 8000a02:	1dba      	adds	r2, r7, #6
 8000a04:	7812      	ldrb	r2, [r2, #0]
 8000a06:	705a      	strb	r2, [r3, #1]
 8000a08:	003b      	movs	r3, r7
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	709a      	strb	r2, [r3, #2]

	start();
 8000a0e:	f7ff fde5 	bl	80005dc <start>

	for (int i = 0; i < 3; i++) {
 8000a12:	2300      	movs	r3, #0
 8000a14:	60fb      	str	r3, [r7, #12]
 8000a16:	e041      	b.n	8000a9c <fm_tune_status+0xb6>
		uint8_t data = MSG[i];
 8000a18:	1d7b      	adds	r3, r7, #5
 8000a1a:	0039      	movs	r1, r7
 8000a1c:	68fa      	ldr	r2, [r7, #12]
 8000a1e:	188a      	adds	r2, r1, r2
 8000a20:	7812      	ldrb	r2, [r2, #0]
 8000a22:	701a      	strb	r2, [r3, #0]

		for (int bit = 7; bit >= 0; bit--) {
 8000a24:	2307      	movs	r3, #7
 8000a26:	60bb      	str	r3, [r7, #8]
 8000a28:	e030      	b.n	8000a8c <fm_tune_status+0xa6>
			if (data & (1 << bit)) {
 8000a2a:	1d7b      	adds	r3, r7, #5
 8000a2c:	781a      	ldrb	r2, [r3, #0]
 8000a2e:	68bb      	ldr	r3, [r7, #8]
 8000a30:	411a      	asrs	r2, r3
 8000a32:	0013      	movs	r3, r2
 8000a34:	2201      	movs	r2, #1
 8000a36:	4013      	ands	r3, r2
 8000a38:	d007      	beq.n	8000a4a <fm_tune_status+0x64>
				HAL_GPIO_WritePin(GPIOA, SDIO_Pin, GPIO_PIN_SET);
 8000a3a:	2390      	movs	r3, #144	@ 0x90
 8000a3c:	05db      	lsls	r3, r3, #23
 8000a3e:	2201      	movs	r2, #1
 8000a40:	2101      	movs	r1, #1
 8000a42:	0018      	movs	r0, r3
 8000a44:	f000 fbc9 	bl	80011da <HAL_GPIO_WritePin>
 8000a48:	e006      	b.n	8000a58 <fm_tune_status+0x72>
			}
			else {
				HAL_GPIO_WritePin(GPIOA, SDIO_Pin, GPIO_PIN_RESET);
 8000a4a:	2390      	movs	r3, #144	@ 0x90
 8000a4c:	05db      	lsls	r3, r3, #23
 8000a4e:	2200      	movs	r2, #0
 8000a50:	2101      	movs	r1, #1
 8000a52:	0018      	movs	r0, r3
 8000a54:	f000 fbc1 	bl	80011da <HAL_GPIO_WritePin>
			}
			delay10us(10);
 8000a58:	200a      	movs	r0, #10
 8000a5a:	f7ff fda5 	bl	80005a8 <delay10us>

			// Toggle clock
			HAL_GPIO_WritePin(GPIOA, SCLK_Pin, GPIO_PIN_SET);
 8000a5e:	2390      	movs	r3, #144	@ 0x90
 8000a60:	05db      	lsls	r3, r3, #23
 8000a62:	2201      	movs	r2, #1
 8000a64:	2102      	movs	r1, #2
 8000a66:	0018      	movs	r0, r3
 8000a68:	f000 fbb7 	bl	80011da <HAL_GPIO_WritePin>
			delay10us(10);
 8000a6c:	200a      	movs	r0, #10
 8000a6e:	f7ff fd9b 	bl	80005a8 <delay10us>
			HAL_GPIO_WritePin(GPIOA, SCLK_Pin, GPIO_PIN_RESET);
 8000a72:	2390      	movs	r3, #144	@ 0x90
 8000a74:	05db      	lsls	r3, r3, #23
 8000a76:	2200      	movs	r2, #0
 8000a78:	2102      	movs	r1, #2
 8000a7a:	0018      	movs	r0, r3
 8000a7c:	f000 fbad 	bl	80011da <HAL_GPIO_WritePin>
			delay10us(10);
 8000a80:	200a      	movs	r0, #10
 8000a82:	f7ff fd91 	bl	80005a8 <delay10us>
		for (int bit = 7; bit >= 0; bit--) {
 8000a86:	68bb      	ldr	r3, [r7, #8]
 8000a88:	3b01      	subs	r3, #1
 8000a8a:	60bb      	str	r3, [r7, #8]
 8000a8c:	68bb      	ldr	r3, [r7, #8]
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	dacb      	bge.n	8000a2a <fm_tune_status+0x44>
		}

		ack();
 8000a92:	f7ff fdfd 	bl	8000690 <ack>
	for (int i = 0; i < 3; i++) {
 8000a96:	68fb      	ldr	r3, [r7, #12]
 8000a98:	3301      	adds	r3, #1
 8000a9a:	60fb      	str	r3, [r7, #12]
 8000a9c:	68fb      	ldr	r3, [r7, #12]
 8000a9e:	2b02      	cmp	r3, #2
 8000aa0:	ddba      	ble.n	8000a18 <fm_tune_status+0x32>
	}

	end();
 8000aa2:	f7ff fdc8 	bl	8000636 <end>
}
 8000aa6:	46c0      	nop			@ (mov r8, r8)
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	b004      	add	sp, #16
 8000aac:	bd80      	pop	{r7, pc}

08000aae <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000aae:	b580      	push	{r7, lr}
 8000ab0:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ab2:	b672      	cpsid	i
}
 8000ab4:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ab6:	46c0      	nop			@ (mov r8, r8)
 8000ab8:	e7fd      	b.n	8000ab6 <Error_Handler+0x8>
	...

08000abc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b082      	sub	sp, #8
 8000ac0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ac2:	4b0f      	ldr	r3, [pc, #60]	@ (8000b00 <HAL_MspInit+0x44>)
 8000ac4:	699a      	ldr	r2, [r3, #24]
 8000ac6:	4b0e      	ldr	r3, [pc, #56]	@ (8000b00 <HAL_MspInit+0x44>)
 8000ac8:	2101      	movs	r1, #1
 8000aca:	430a      	orrs	r2, r1
 8000acc:	619a      	str	r2, [r3, #24]
 8000ace:	4b0c      	ldr	r3, [pc, #48]	@ (8000b00 <HAL_MspInit+0x44>)
 8000ad0:	699b      	ldr	r3, [r3, #24]
 8000ad2:	2201      	movs	r2, #1
 8000ad4:	4013      	ands	r3, r2
 8000ad6:	607b      	str	r3, [r7, #4]
 8000ad8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ada:	4b09      	ldr	r3, [pc, #36]	@ (8000b00 <HAL_MspInit+0x44>)
 8000adc:	69da      	ldr	r2, [r3, #28]
 8000ade:	4b08      	ldr	r3, [pc, #32]	@ (8000b00 <HAL_MspInit+0x44>)
 8000ae0:	2180      	movs	r1, #128	@ 0x80
 8000ae2:	0549      	lsls	r1, r1, #21
 8000ae4:	430a      	orrs	r2, r1
 8000ae6:	61da      	str	r2, [r3, #28]
 8000ae8:	4b05      	ldr	r3, [pc, #20]	@ (8000b00 <HAL_MspInit+0x44>)
 8000aea:	69da      	ldr	r2, [r3, #28]
 8000aec:	2380      	movs	r3, #128	@ 0x80
 8000aee:	055b      	lsls	r3, r3, #21
 8000af0:	4013      	ands	r3, r2
 8000af2:	603b      	str	r3, [r7, #0]
 8000af4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000af6:	46c0      	nop			@ (mov r8, r8)
 8000af8:	46bd      	mov	sp, r7
 8000afa:	b002      	add	sp, #8
 8000afc:	bd80      	pop	{r7, pc}
 8000afe:	46c0      	nop			@ (mov r8, r8)
 8000b00:	40021000 	.word	0x40021000

08000b04 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b084      	sub	sp, #16
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM14)
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	4a0a      	ldr	r2, [pc, #40]	@ (8000b3c <HAL_TIM_Base_MspInit+0x38>)
 8000b12:	4293      	cmp	r3, r2
 8000b14:	d10d      	bne.n	8000b32 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM14_MspInit 0 */

  /* USER CODE END TIM14_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 8000b16:	4b0a      	ldr	r3, [pc, #40]	@ (8000b40 <HAL_TIM_Base_MspInit+0x3c>)
 8000b18:	69da      	ldr	r2, [r3, #28]
 8000b1a:	4b09      	ldr	r3, [pc, #36]	@ (8000b40 <HAL_TIM_Base_MspInit+0x3c>)
 8000b1c:	2180      	movs	r1, #128	@ 0x80
 8000b1e:	0049      	lsls	r1, r1, #1
 8000b20:	430a      	orrs	r2, r1
 8000b22:	61da      	str	r2, [r3, #28]
 8000b24:	4b06      	ldr	r3, [pc, #24]	@ (8000b40 <HAL_TIM_Base_MspInit+0x3c>)
 8000b26:	69da      	ldr	r2, [r3, #28]
 8000b28:	2380      	movs	r3, #128	@ 0x80
 8000b2a:	005b      	lsls	r3, r3, #1
 8000b2c:	4013      	ands	r3, r2
 8000b2e:	60fb      	str	r3, [r7, #12]
 8000b30:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM14_MspInit 1 */

  }

}
 8000b32:	46c0      	nop			@ (mov r8, r8)
 8000b34:	46bd      	mov	sp, r7
 8000b36:	b004      	add	sp, #16
 8000b38:	bd80      	pop	{r7, pc}
 8000b3a:	46c0      	nop			@ (mov r8, r8)
 8000b3c:	40002000 	.word	0x40002000
 8000b40:	40021000 	.word	0x40021000

08000b44 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b48:	46c0      	nop			@ (mov r8, r8)
 8000b4a:	e7fd      	b.n	8000b48 <NMI_Handler+0x4>

08000b4c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b50:	46c0      	nop			@ (mov r8, r8)
 8000b52:	e7fd      	b.n	8000b50 <HardFault_Handler+0x4>

08000b54 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000b58:	46c0      	nop			@ (mov r8, r8)
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bd80      	pop	{r7, pc}

08000b5e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b5e:	b580      	push	{r7, lr}
 8000b60:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b62:	46c0      	nop			@ (mov r8, r8)
 8000b64:	46bd      	mov	sp, r7
 8000b66:	bd80      	pop	{r7, pc}

08000b68 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b6c:	f000 f88a 	bl	8000c84 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b70:	46c0      	nop			@ (mov r8, r8)
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bd80      	pop	{r7, pc}

08000b76 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8000b76:	b580      	push	{r7, lr}
 8000b78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ENC_A_Pin);
 8000b7a:	2040      	movs	r0, #64	@ 0x40
 8000b7c:	f000 fb4a 	bl	8001214 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON_1_Pin);
 8000b80:	2080      	movs	r0, #128	@ 0x80
 8000b82:	f000 fb47 	bl	8001214 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON_2_Pin);
 8000b86:	2380      	movs	r3, #128	@ 0x80
 8000b88:	009b      	lsls	r3, r3, #2
 8000b8a:	0018      	movs	r0, r3
 8000b8c:	f000 fb42 	bl	8001214 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8000b90:	46c0      	nop			@ (mov r8, r8)
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bd80      	pop	{r7, pc}

08000b96 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b96:	b580      	push	{r7, lr}
 8000b98:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000b9a:	46c0      	nop			@ (mov r8, r8)
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	bd80      	pop	{r7, pc}

08000ba0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000ba0:	480d      	ldr	r0, [pc, #52]	@ (8000bd8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000ba2:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000ba4:	f7ff fff7 	bl	8000b96 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ba8:	480c      	ldr	r0, [pc, #48]	@ (8000bdc <LoopForever+0x6>)
  ldr r1, =_edata
 8000baa:	490d      	ldr	r1, [pc, #52]	@ (8000be0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000bac:	4a0d      	ldr	r2, [pc, #52]	@ (8000be4 <LoopForever+0xe>)
  movs r3, #0
 8000bae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bb0:	e002      	b.n	8000bb8 <LoopCopyDataInit>

08000bb2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bb2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bb4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bb6:	3304      	adds	r3, #4

08000bb8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bb8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bbc:	d3f9      	bcc.n	8000bb2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bbe:	4a0a      	ldr	r2, [pc, #40]	@ (8000be8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000bc0:	4c0a      	ldr	r4, [pc, #40]	@ (8000bec <LoopForever+0x16>)
  movs r3, #0
 8000bc2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bc4:	e001      	b.n	8000bca <LoopFillZerobss>

08000bc6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bc6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bc8:	3204      	adds	r2, #4

08000bca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bcc:	d3fb      	bcc.n	8000bc6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000bce:	f001 f88b 	bl	8001ce8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000bd2:	f7ff fb25 	bl	8000220 <main>

08000bd6 <LoopForever>:

LoopForever:
    b LoopForever
 8000bd6:	e7fe      	b.n	8000bd6 <LoopForever>
  ldr   r0, =_estack
 8000bd8:	20001000 	.word	0x20001000
  ldr r0, =_sdata
 8000bdc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000be0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000be4:	08001d80 	.word	0x08001d80
  ldr r2, =_sbss
 8000be8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000bec:	2000007c 	.word	0x2000007c

08000bf0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000bf0:	e7fe      	b.n	8000bf0 <ADC1_IRQHandler>
	...

08000bf4 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000bf8:	4b07      	ldr	r3, [pc, #28]	@ (8000c18 <HAL_Init+0x24>)
 8000bfa:	681a      	ldr	r2, [r3, #0]
 8000bfc:	4b06      	ldr	r3, [pc, #24]	@ (8000c18 <HAL_Init+0x24>)
 8000bfe:	2110      	movs	r1, #16
 8000c00:	430a      	orrs	r2, r1
 8000c02:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000c04:	2003      	movs	r0, #3
 8000c06:	f000 f809 	bl	8000c1c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c0a:	f7ff ff57 	bl	8000abc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c0e:	2300      	movs	r3, #0
}
 8000c10:	0018      	movs	r0, r3
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bd80      	pop	{r7, pc}
 8000c16:	46c0      	nop			@ (mov r8, r8)
 8000c18:	40022000 	.word	0x40022000

08000c1c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c1c:	b590      	push	{r4, r7, lr}
 8000c1e:	b083      	sub	sp, #12
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c24:	4b14      	ldr	r3, [pc, #80]	@ (8000c78 <HAL_InitTick+0x5c>)
 8000c26:	681c      	ldr	r4, [r3, #0]
 8000c28:	4b14      	ldr	r3, [pc, #80]	@ (8000c7c <HAL_InitTick+0x60>)
 8000c2a:	781b      	ldrb	r3, [r3, #0]
 8000c2c:	0019      	movs	r1, r3
 8000c2e:	23fa      	movs	r3, #250	@ 0xfa
 8000c30:	0098      	lsls	r0, r3, #2
 8000c32:	f7ff fa69 	bl	8000108 <__udivsi3>
 8000c36:	0003      	movs	r3, r0
 8000c38:	0019      	movs	r1, r3
 8000c3a:	0020      	movs	r0, r4
 8000c3c:	f7ff fa64 	bl	8000108 <__udivsi3>
 8000c40:	0003      	movs	r3, r0
 8000c42:	0018      	movs	r0, r3
 8000c44:	f000 f92f 	bl	8000ea6 <HAL_SYSTICK_Config>
 8000c48:	1e03      	subs	r3, r0, #0
 8000c4a:	d001      	beq.n	8000c50 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000c4c:	2301      	movs	r3, #1
 8000c4e:	e00f      	b.n	8000c70 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	2b03      	cmp	r3, #3
 8000c54:	d80b      	bhi.n	8000c6e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c56:	6879      	ldr	r1, [r7, #4]
 8000c58:	2301      	movs	r3, #1
 8000c5a:	425b      	negs	r3, r3
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	0018      	movs	r0, r3
 8000c60:	f000 f8fc 	bl	8000e5c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c64:	4b06      	ldr	r3, [pc, #24]	@ (8000c80 <HAL_InitTick+0x64>)
 8000c66:	687a      	ldr	r2, [r7, #4]
 8000c68:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	e000      	b.n	8000c70 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000c6e:	2301      	movs	r3, #1
}
 8000c70:	0018      	movs	r0, r3
 8000c72:	46bd      	mov	sp, r7
 8000c74:	b003      	add	sp, #12
 8000c76:	bd90      	pop	{r4, r7, pc}
 8000c78:	20000000 	.word	0x20000000
 8000c7c:	20000008 	.word	0x20000008
 8000c80:	20000004 	.word	0x20000004

08000c84 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c88:	4b05      	ldr	r3, [pc, #20]	@ (8000ca0 <HAL_IncTick+0x1c>)
 8000c8a:	781b      	ldrb	r3, [r3, #0]
 8000c8c:	001a      	movs	r2, r3
 8000c8e:	4b05      	ldr	r3, [pc, #20]	@ (8000ca4 <HAL_IncTick+0x20>)
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	18d2      	adds	r2, r2, r3
 8000c94:	4b03      	ldr	r3, [pc, #12]	@ (8000ca4 <HAL_IncTick+0x20>)
 8000c96:	601a      	str	r2, [r3, #0]
}
 8000c98:	46c0      	nop			@ (mov r8, r8)
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bd80      	pop	{r7, pc}
 8000c9e:	46c0      	nop			@ (mov r8, r8)
 8000ca0:	20000008 	.word	0x20000008
 8000ca4:	20000078 	.word	0x20000078

08000ca8 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	af00      	add	r7, sp, #0
  return uwTick;
 8000cac:	4b02      	ldr	r3, [pc, #8]	@ (8000cb8 <HAL_GetTick+0x10>)
 8000cae:	681b      	ldr	r3, [r3, #0]
}
 8000cb0:	0018      	movs	r0, r3
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bd80      	pop	{r7, pc}
 8000cb6:	46c0      	nop			@ (mov r8, r8)
 8000cb8:	20000078 	.word	0x20000078

08000cbc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b084      	sub	sp, #16
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000cc4:	f7ff fff0 	bl	8000ca8 <HAL_GetTick>
 8000cc8:	0003      	movs	r3, r0
 8000cca:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000cd0:	68fb      	ldr	r3, [r7, #12]
 8000cd2:	3301      	adds	r3, #1
 8000cd4:	d005      	beq.n	8000ce2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000cd6:	4b0a      	ldr	r3, [pc, #40]	@ (8000d00 <HAL_Delay+0x44>)
 8000cd8:	781b      	ldrb	r3, [r3, #0]
 8000cda:	001a      	movs	r2, r3
 8000cdc:	68fb      	ldr	r3, [r7, #12]
 8000cde:	189b      	adds	r3, r3, r2
 8000ce0:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000ce2:	46c0      	nop			@ (mov r8, r8)
 8000ce4:	f7ff ffe0 	bl	8000ca8 <HAL_GetTick>
 8000ce8:	0002      	movs	r2, r0
 8000cea:	68bb      	ldr	r3, [r7, #8]
 8000cec:	1ad3      	subs	r3, r2, r3
 8000cee:	68fa      	ldr	r2, [r7, #12]
 8000cf0:	429a      	cmp	r2, r3
 8000cf2:	d8f7      	bhi.n	8000ce4 <HAL_Delay+0x28>
  {
  }
}
 8000cf4:	46c0      	nop			@ (mov r8, r8)
 8000cf6:	46c0      	nop			@ (mov r8, r8)
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	b004      	add	sp, #16
 8000cfc:	bd80      	pop	{r7, pc}
 8000cfe:	46c0      	nop			@ (mov r8, r8)
 8000d00:	20000008 	.word	0x20000008

08000d04 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b082      	sub	sp, #8
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	0002      	movs	r2, r0
 8000d0c:	1dfb      	adds	r3, r7, #7
 8000d0e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000d10:	1dfb      	adds	r3, r7, #7
 8000d12:	781b      	ldrb	r3, [r3, #0]
 8000d14:	2b7f      	cmp	r3, #127	@ 0x7f
 8000d16:	d809      	bhi.n	8000d2c <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d18:	1dfb      	adds	r3, r7, #7
 8000d1a:	781b      	ldrb	r3, [r3, #0]
 8000d1c:	001a      	movs	r2, r3
 8000d1e:	231f      	movs	r3, #31
 8000d20:	401a      	ands	r2, r3
 8000d22:	4b04      	ldr	r3, [pc, #16]	@ (8000d34 <__NVIC_EnableIRQ+0x30>)
 8000d24:	2101      	movs	r1, #1
 8000d26:	4091      	lsls	r1, r2
 8000d28:	000a      	movs	r2, r1
 8000d2a:	601a      	str	r2, [r3, #0]
  }
}
 8000d2c:	46c0      	nop			@ (mov r8, r8)
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	b002      	add	sp, #8
 8000d32:	bd80      	pop	{r7, pc}
 8000d34:	e000e100 	.word	0xe000e100

08000d38 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d38:	b590      	push	{r4, r7, lr}
 8000d3a:	b083      	sub	sp, #12
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	0002      	movs	r2, r0
 8000d40:	6039      	str	r1, [r7, #0]
 8000d42:	1dfb      	adds	r3, r7, #7
 8000d44:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000d46:	1dfb      	adds	r3, r7, #7
 8000d48:	781b      	ldrb	r3, [r3, #0]
 8000d4a:	2b7f      	cmp	r3, #127	@ 0x7f
 8000d4c:	d828      	bhi.n	8000da0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d4e:	4a2f      	ldr	r2, [pc, #188]	@ (8000e0c <__NVIC_SetPriority+0xd4>)
 8000d50:	1dfb      	adds	r3, r7, #7
 8000d52:	781b      	ldrb	r3, [r3, #0]
 8000d54:	b25b      	sxtb	r3, r3
 8000d56:	089b      	lsrs	r3, r3, #2
 8000d58:	33c0      	adds	r3, #192	@ 0xc0
 8000d5a:	009b      	lsls	r3, r3, #2
 8000d5c:	589b      	ldr	r3, [r3, r2]
 8000d5e:	1dfa      	adds	r2, r7, #7
 8000d60:	7812      	ldrb	r2, [r2, #0]
 8000d62:	0011      	movs	r1, r2
 8000d64:	2203      	movs	r2, #3
 8000d66:	400a      	ands	r2, r1
 8000d68:	00d2      	lsls	r2, r2, #3
 8000d6a:	21ff      	movs	r1, #255	@ 0xff
 8000d6c:	4091      	lsls	r1, r2
 8000d6e:	000a      	movs	r2, r1
 8000d70:	43d2      	mvns	r2, r2
 8000d72:	401a      	ands	r2, r3
 8000d74:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000d76:	683b      	ldr	r3, [r7, #0]
 8000d78:	019b      	lsls	r3, r3, #6
 8000d7a:	22ff      	movs	r2, #255	@ 0xff
 8000d7c:	401a      	ands	r2, r3
 8000d7e:	1dfb      	adds	r3, r7, #7
 8000d80:	781b      	ldrb	r3, [r3, #0]
 8000d82:	0018      	movs	r0, r3
 8000d84:	2303      	movs	r3, #3
 8000d86:	4003      	ands	r3, r0
 8000d88:	00db      	lsls	r3, r3, #3
 8000d8a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d8c:	481f      	ldr	r0, [pc, #124]	@ (8000e0c <__NVIC_SetPriority+0xd4>)
 8000d8e:	1dfb      	adds	r3, r7, #7
 8000d90:	781b      	ldrb	r3, [r3, #0]
 8000d92:	b25b      	sxtb	r3, r3
 8000d94:	089b      	lsrs	r3, r3, #2
 8000d96:	430a      	orrs	r2, r1
 8000d98:	33c0      	adds	r3, #192	@ 0xc0
 8000d9a:	009b      	lsls	r3, r3, #2
 8000d9c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000d9e:	e031      	b.n	8000e04 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000da0:	4a1b      	ldr	r2, [pc, #108]	@ (8000e10 <__NVIC_SetPriority+0xd8>)
 8000da2:	1dfb      	adds	r3, r7, #7
 8000da4:	781b      	ldrb	r3, [r3, #0]
 8000da6:	0019      	movs	r1, r3
 8000da8:	230f      	movs	r3, #15
 8000daa:	400b      	ands	r3, r1
 8000dac:	3b08      	subs	r3, #8
 8000dae:	089b      	lsrs	r3, r3, #2
 8000db0:	3306      	adds	r3, #6
 8000db2:	009b      	lsls	r3, r3, #2
 8000db4:	18d3      	adds	r3, r2, r3
 8000db6:	3304      	adds	r3, #4
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	1dfa      	adds	r2, r7, #7
 8000dbc:	7812      	ldrb	r2, [r2, #0]
 8000dbe:	0011      	movs	r1, r2
 8000dc0:	2203      	movs	r2, #3
 8000dc2:	400a      	ands	r2, r1
 8000dc4:	00d2      	lsls	r2, r2, #3
 8000dc6:	21ff      	movs	r1, #255	@ 0xff
 8000dc8:	4091      	lsls	r1, r2
 8000dca:	000a      	movs	r2, r1
 8000dcc:	43d2      	mvns	r2, r2
 8000dce:	401a      	ands	r2, r3
 8000dd0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000dd2:	683b      	ldr	r3, [r7, #0]
 8000dd4:	019b      	lsls	r3, r3, #6
 8000dd6:	22ff      	movs	r2, #255	@ 0xff
 8000dd8:	401a      	ands	r2, r3
 8000dda:	1dfb      	adds	r3, r7, #7
 8000ddc:	781b      	ldrb	r3, [r3, #0]
 8000dde:	0018      	movs	r0, r3
 8000de0:	2303      	movs	r3, #3
 8000de2:	4003      	ands	r3, r0
 8000de4:	00db      	lsls	r3, r3, #3
 8000de6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000de8:	4809      	ldr	r0, [pc, #36]	@ (8000e10 <__NVIC_SetPriority+0xd8>)
 8000dea:	1dfb      	adds	r3, r7, #7
 8000dec:	781b      	ldrb	r3, [r3, #0]
 8000dee:	001c      	movs	r4, r3
 8000df0:	230f      	movs	r3, #15
 8000df2:	4023      	ands	r3, r4
 8000df4:	3b08      	subs	r3, #8
 8000df6:	089b      	lsrs	r3, r3, #2
 8000df8:	430a      	orrs	r2, r1
 8000dfa:	3306      	adds	r3, #6
 8000dfc:	009b      	lsls	r3, r3, #2
 8000dfe:	18c3      	adds	r3, r0, r3
 8000e00:	3304      	adds	r3, #4
 8000e02:	601a      	str	r2, [r3, #0]
}
 8000e04:	46c0      	nop			@ (mov r8, r8)
 8000e06:	46bd      	mov	sp, r7
 8000e08:	b003      	add	sp, #12
 8000e0a:	bd90      	pop	{r4, r7, pc}
 8000e0c:	e000e100 	.word	0xe000e100
 8000e10:	e000ed00 	.word	0xe000ed00

08000e14 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b082      	sub	sp, #8
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	1e5a      	subs	r2, r3, #1
 8000e20:	2380      	movs	r3, #128	@ 0x80
 8000e22:	045b      	lsls	r3, r3, #17
 8000e24:	429a      	cmp	r2, r3
 8000e26:	d301      	bcc.n	8000e2c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e28:	2301      	movs	r3, #1
 8000e2a:	e010      	b.n	8000e4e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e2c:	4b0a      	ldr	r3, [pc, #40]	@ (8000e58 <SysTick_Config+0x44>)
 8000e2e:	687a      	ldr	r2, [r7, #4]
 8000e30:	3a01      	subs	r2, #1
 8000e32:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e34:	2301      	movs	r3, #1
 8000e36:	425b      	negs	r3, r3
 8000e38:	2103      	movs	r1, #3
 8000e3a:	0018      	movs	r0, r3
 8000e3c:	f7ff ff7c 	bl	8000d38 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e40:	4b05      	ldr	r3, [pc, #20]	@ (8000e58 <SysTick_Config+0x44>)
 8000e42:	2200      	movs	r2, #0
 8000e44:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e46:	4b04      	ldr	r3, [pc, #16]	@ (8000e58 <SysTick_Config+0x44>)
 8000e48:	2207      	movs	r2, #7
 8000e4a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e4c:	2300      	movs	r3, #0
}
 8000e4e:	0018      	movs	r0, r3
 8000e50:	46bd      	mov	sp, r7
 8000e52:	b002      	add	sp, #8
 8000e54:	bd80      	pop	{r7, pc}
 8000e56:	46c0      	nop			@ (mov r8, r8)
 8000e58:	e000e010 	.word	0xe000e010

08000e5c <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b084      	sub	sp, #16
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	60b9      	str	r1, [r7, #8]
 8000e64:	607a      	str	r2, [r7, #4]
 8000e66:	210f      	movs	r1, #15
 8000e68:	187b      	adds	r3, r7, r1
 8000e6a:	1c02      	adds	r2, r0, #0
 8000e6c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000e6e:	68ba      	ldr	r2, [r7, #8]
 8000e70:	187b      	adds	r3, r7, r1
 8000e72:	781b      	ldrb	r3, [r3, #0]
 8000e74:	b25b      	sxtb	r3, r3
 8000e76:	0011      	movs	r1, r2
 8000e78:	0018      	movs	r0, r3
 8000e7a:	f7ff ff5d 	bl	8000d38 <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
}
 8000e7e:	46c0      	nop			@ (mov r8, r8)
 8000e80:	46bd      	mov	sp, r7
 8000e82:	b004      	add	sp, #16
 8000e84:	bd80      	pop	{r7, pc}

08000e86 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e86:	b580      	push	{r7, lr}
 8000e88:	b082      	sub	sp, #8
 8000e8a:	af00      	add	r7, sp, #0
 8000e8c:	0002      	movs	r2, r0
 8000e8e:	1dfb      	adds	r3, r7, #7
 8000e90:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e92:	1dfb      	adds	r3, r7, #7
 8000e94:	781b      	ldrb	r3, [r3, #0]
 8000e96:	b25b      	sxtb	r3, r3
 8000e98:	0018      	movs	r0, r3
 8000e9a:	f7ff ff33 	bl	8000d04 <__NVIC_EnableIRQ>
}
 8000e9e:	46c0      	nop			@ (mov r8, r8)
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	b002      	add	sp, #8
 8000ea4:	bd80      	pop	{r7, pc}

08000ea6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ea6:	b580      	push	{r7, lr}
 8000ea8:	b082      	sub	sp, #8
 8000eaa:	af00      	add	r7, sp, #0
 8000eac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	0018      	movs	r0, r3
 8000eb2:	f7ff ffaf 	bl	8000e14 <SysTick_Config>
 8000eb6:	0003      	movs	r3, r0
}
 8000eb8:	0018      	movs	r0, r3
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	b002      	add	sp, #8
 8000ebe:	bd80      	pop	{r7, pc}

08000ec0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b086      	sub	sp, #24
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
 8000ec8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ece:	e14f      	b.n	8001170 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000ed0:	683b      	ldr	r3, [r7, #0]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	2101      	movs	r1, #1
 8000ed6:	697a      	ldr	r2, [r7, #20]
 8000ed8:	4091      	lsls	r1, r2
 8000eda:	000a      	movs	r2, r1
 8000edc:	4013      	ands	r3, r2
 8000ede:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000ee0:	68fb      	ldr	r3, [r7, #12]
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d100      	bne.n	8000ee8 <HAL_GPIO_Init+0x28>
 8000ee6:	e140      	b.n	800116a <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000ee8:	683b      	ldr	r3, [r7, #0]
 8000eea:	685b      	ldr	r3, [r3, #4]
 8000eec:	2203      	movs	r2, #3
 8000eee:	4013      	ands	r3, r2
 8000ef0:	2b01      	cmp	r3, #1
 8000ef2:	d005      	beq.n	8000f00 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000ef4:	683b      	ldr	r3, [r7, #0]
 8000ef6:	685b      	ldr	r3, [r3, #4]
 8000ef8:	2203      	movs	r2, #3
 8000efa:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000efc:	2b02      	cmp	r3, #2
 8000efe:	d130      	bne.n	8000f62 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	689b      	ldr	r3, [r3, #8]
 8000f04:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000f06:	697b      	ldr	r3, [r7, #20]
 8000f08:	005b      	lsls	r3, r3, #1
 8000f0a:	2203      	movs	r2, #3
 8000f0c:	409a      	lsls	r2, r3
 8000f0e:	0013      	movs	r3, r2
 8000f10:	43da      	mvns	r2, r3
 8000f12:	693b      	ldr	r3, [r7, #16]
 8000f14:	4013      	ands	r3, r2
 8000f16:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000f18:	683b      	ldr	r3, [r7, #0]
 8000f1a:	68da      	ldr	r2, [r3, #12]
 8000f1c:	697b      	ldr	r3, [r7, #20]
 8000f1e:	005b      	lsls	r3, r3, #1
 8000f20:	409a      	lsls	r2, r3
 8000f22:	0013      	movs	r3, r2
 8000f24:	693a      	ldr	r2, [r7, #16]
 8000f26:	4313      	orrs	r3, r2
 8000f28:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	693a      	ldr	r2, [r7, #16]
 8000f2e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	685b      	ldr	r3, [r3, #4]
 8000f34:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f36:	2201      	movs	r2, #1
 8000f38:	697b      	ldr	r3, [r7, #20]
 8000f3a:	409a      	lsls	r2, r3
 8000f3c:	0013      	movs	r3, r2
 8000f3e:	43da      	mvns	r2, r3
 8000f40:	693b      	ldr	r3, [r7, #16]
 8000f42:	4013      	ands	r3, r2
 8000f44:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f46:	683b      	ldr	r3, [r7, #0]
 8000f48:	685b      	ldr	r3, [r3, #4]
 8000f4a:	091b      	lsrs	r3, r3, #4
 8000f4c:	2201      	movs	r2, #1
 8000f4e:	401a      	ands	r2, r3
 8000f50:	697b      	ldr	r3, [r7, #20]
 8000f52:	409a      	lsls	r2, r3
 8000f54:	0013      	movs	r3, r2
 8000f56:	693a      	ldr	r2, [r7, #16]
 8000f58:	4313      	orrs	r3, r2
 8000f5a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	693a      	ldr	r2, [r7, #16]
 8000f60:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f62:	683b      	ldr	r3, [r7, #0]
 8000f64:	685b      	ldr	r3, [r3, #4]
 8000f66:	2203      	movs	r2, #3
 8000f68:	4013      	ands	r3, r2
 8000f6a:	2b03      	cmp	r3, #3
 8000f6c:	d017      	beq.n	8000f9e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	68db      	ldr	r3, [r3, #12]
 8000f72:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000f74:	697b      	ldr	r3, [r7, #20]
 8000f76:	005b      	lsls	r3, r3, #1
 8000f78:	2203      	movs	r2, #3
 8000f7a:	409a      	lsls	r2, r3
 8000f7c:	0013      	movs	r3, r2
 8000f7e:	43da      	mvns	r2, r3
 8000f80:	693b      	ldr	r3, [r7, #16]
 8000f82:	4013      	ands	r3, r2
 8000f84:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000f86:	683b      	ldr	r3, [r7, #0]
 8000f88:	689a      	ldr	r2, [r3, #8]
 8000f8a:	697b      	ldr	r3, [r7, #20]
 8000f8c:	005b      	lsls	r3, r3, #1
 8000f8e:	409a      	lsls	r2, r3
 8000f90:	0013      	movs	r3, r2
 8000f92:	693a      	ldr	r2, [r7, #16]
 8000f94:	4313      	orrs	r3, r2
 8000f96:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	693a      	ldr	r2, [r7, #16]
 8000f9c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f9e:	683b      	ldr	r3, [r7, #0]
 8000fa0:	685b      	ldr	r3, [r3, #4]
 8000fa2:	2203      	movs	r2, #3
 8000fa4:	4013      	ands	r3, r2
 8000fa6:	2b02      	cmp	r3, #2
 8000fa8:	d123      	bne.n	8000ff2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000faa:	697b      	ldr	r3, [r7, #20]
 8000fac:	08da      	lsrs	r2, r3, #3
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	3208      	adds	r2, #8
 8000fb2:	0092      	lsls	r2, r2, #2
 8000fb4:	58d3      	ldr	r3, [r2, r3]
 8000fb6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000fb8:	697b      	ldr	r3, [r7, #20]
 8000fba:	2207      	movs	r2, #7
 8000fbc:	4013      	ands	r3, r2
 8000fbe:	009b      	lsls	r3, r3, #2
 8000fc0:	220f      	movs	r2, #15
 8000fc2:	409a      	lsls	r2, r3
 8000fc4:	0013      	movs	r3, r2
 8000fc6:	43da      	mvns	r2, r3
 8000fc8:	693b      	ldr	r3, [r7, #16]
 8000fca:	4013      	ands	r3, r2
 8000fcc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000fce:	683b      	ldr	r3, [r7, #0]
 8000fd0:	691a      	ldr	r2, [r3, #16]
 8000fd2:	697b      	ldr	r3, [r7, #20]
 8000fd4:	2107      	movs	r1, #7
 8000fd6:	400b      	ands	r3, r1
 8000fd8:	009b      	lsls	r3, r3, #2
 8000fda:	409a      	lsls	r2, r3
 8000fdc:	0013      	movs	r3, r2
 8000fde:	693a      	ldr	r2, [r7, #16]
 8000fe0:	4313      	orrs	r3, r2
 8000fe2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000fe4:	697b      	ldr	r3, [r7, #20]
 8000fe6:	08da      	lsrs	r2, r3, #3
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	3208      	adds	r2, #8
 8000fec:	0092      	lsls	r2, r2, #2
 8000fee:	6939      	ldr	r1, [r7, #16]
 8000ff0:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000ff8:	697b      	ldr	r3, [r7, #20]
 8000ffa:	005b      	lsls	r3, r3, #1
 8000ffc:	2203      	movs	r2, #3
 8000ffe:	409a      	lsls	r2, r3
 8001000:	0013      	movs	r3, r2
 8001002:	43da      	mvns	r2, r3
 8001004:	693b      	ldr	r3, [r7, #16]
 8001006:	4013      	ands	r3, r2
 8001008:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800100a:	683b      	ldr	r3, [r7, #0]
 800100c:	685b      	ldr	r3, [r3, #4]
 800100e:	2203      	movs	r2, #3
 8001010:	401a      	ands	r2, r3
 8001012:	697b      	ldr	r3, [r7, #20]
 8001014:	005b      	lsls	r3, r3, #1
 8001016:	409a      	lsls	r2, r3
 8001018:	0013      	movs	r3, r2
 800101a:	693a      	ldr	r2, [r7, #16]
 800101c:	4313      	orrs	r3, r2
 800101e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	693a      	ldr	r2, [r7, #16]
 8001024:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001026:	683b      	ldr	r3, [r7, #0]
 8001028:	685a      	ldr	r2, [r3, #4]
 800102a:	23c0      	movs	r3, #192	@ 0xc0
 800102c:	029b      	lsls	r3, r3, #10
 800102e:	4013      	ands	r3, r2
 8001030:	d100      	bne.n	8001034 <HAL_GPIO_Init+0x174>
 8001032:	e09a      	b.n	800116a <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001034:	4b54      	ldr	r3, [pc, #336]	@ (8001188 <HAL_GPIO_Init+0x2c8>)
 8001036:	699a      	ldr	r2, [r3, #24]
 8001038:	4b53      	ldr	r3, [pc, #332]	@ (8001188 <HAL_GPIO_Init+0x2c8>)
 800103a:	2101      	movs	r1, #1
 800103c:	430a      	orrs	r2, r1
 800103e:	619a      	str	r2, [r3, #24]
 8001040:	4b51      	ldr	r3, [pc, #324]	@ (8001188 <HAL_GPIO_Init+0x2c8>)
 8001042:	699b      	ldr	r3, [r3, #24]
 8001044:	2201      	movs	r2, #1
 8001046:	4013      	ands	r3, r2
 8001048:	60bb      	str	r3, [r7, #8]
 800104a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800104c:	4a4f      	ldr	r2, [pc, #316]	@ (800118c <HAL_GPIO_Init+0x2cc>)
 800104e:	697b      	ldr	r3, [r7, #20]
 8001050:	089b      	lsrs	r3, r3, #2
 8001052:	3302      	adds	r3, #2
 8001054:	009b      	lsls	r3, r3, #2
 8001056:	589b      	ldr	r3, [r3, r2]
 8001058:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800105a:	697b      	ldr	r3, [r7, #20]
 800105c:	2203      	movs	r2, #3
 800105e:	4013      	ands	r3, r2
 8001060:	009b      	lsls	r3, r3, #2
 8001062:	220f      	movs	r2, #15
 8001064:	409a      	lsls	r2, r3
 8001066:	0013      	movs	r3, r2
 8001068:	43da      	mvns	r2, r3
 800106a:	693b      	ldr	r3, [r7, #16]
 800106c:	4013      	ands	r3, r2
 800106e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001070:	687a      	ldr	r2, [r7, #4]
 8001072:	2390      	movs	r3, #144	@ 0x90
 8001074:	05db      	lsls	r3, r3, #23
 8001076:	429a      	cmp	r2, r3
 8001078:	d013      	beq.n	80010a2 <HAL_GPIO_Init+0x1e2>
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	4a44      	ldr	r2, [pc, #272]	@ (8001190 <HAL_GPIO_Init+0x2d0>)
 800107e:	4293      	cmp	r3, r2
 8001080:	d00d      	beq.n	800109e <HAL_GPIO_Init+0x1de>
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	4a43      	ldr	r2, [pc, #268]	@ (8001194 <HAL_GPIO_Init+0x2d4>)
 8001086:	4293      	cmp	r3, r2
 8001088:	d007      	beq.n	800109a <HAL_GPIO_Init+0x1da>
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	4a42      	ldr	r2, [pc, #264]	@ (8001198 <HAL_GPIO_Init+0x2d8>)
 800108e:	4293      	cmp	r3, r2
 8001090:	d101      	bne.n	8001096 <HAL_GPIO_Init+0x1d6>
 8001092:	2303      	movs	r3, #3
 8001094:	e006      	b.n	80010a4 <HAL_GPIO_Init+0x1e4>
 8001096:	2305      	movs	r3, #5
 8001098:	e004      	b.n	80010a4 <HAL_GPIO_Init+0x1e4>
 800109a:	2302      	movs	r3, #2
 800109c:	e002      	b.n	80010a4 <HAL_GPIO_Init+0x1e4>
 800109e:	2301      	movs	r3, #1
 80010a0:	e000      	b.n	80010a4 <HAL_GPIO_Init+0x1e4>
 80010a2:	2300      	movs	r3, #0
 80010a4:	697a      	ldr	r2, [r7, #20]
 80010a6:	2103      	movs	r1, #3
 80010a8:	400a      	ands	r2, r1
 80010aa:	0092      	lsls	r2, r2, #2
 80010ac:	4093      	lsls	r3, r2
 80010ae:	693a      	ldr	r2, [r7, #16]
 80010b0:	4313      	orrs	r3, r2
 80010b2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80010b4:	4935      	ldr	r1, [pc, #212]	@ (800118c <HAL_GPIO_Init+0x2cc>)
 80010b6:	697b      	ldr	r3, [r7, #20]
 80010b8:	089b      	lsrs	r3, r3, #2
 80010ba:	3302      	adds	r3, #2
 80010bc:	009b      	lsls	r3, r3, #2
 80010be:	693a      	ldr	r2, [r7, #16]
 80010c0:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80010c2:	4b36      	ldr	r3, [pc, #216]	@ (800119c <HAL_GPIO_Init+0x2dc>)
 80010c4:	689b      	ldr	r3, [r3, #8]
 80010c6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	43da      	mvns	r2, r3
 80010cc:	693b      	ldr	r3, [r7, #16]
 80010ce:	4013      	ands	r3, r2
 80010d0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80010d2:	683b      	ldr	r3, [r7, #0]
 80010d4:	685a      	ldr	r2, [r3, #4]
 80010d6:	2380      	movs	r3, #128	@ 0x80
 80010d8:	035b      	lsls	r3, r3, #13
 80010da:	4013      	ands	r3, r2
 80010dc:	d003      	beq.n	80010e6 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 80010de:	693a      	ldr	r2, [r7, #16]
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	4313      	orrs	r3, r2
 80010e4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80010e6:	4b2d      	ldr	r3, [pc, #180]	@ (800119c <HAL_GPIO_Init+0x2dc>)
 80010e8:	693a      	ldr	r2, [r7, #16]
 80010ea:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80010ec:	4b2b      	ldr	r3, [pc, #172]	@ (800119c <HAL_GPIO_Init+0x2dc>)
 80010ee:	68db      	ldr	r3, [r3, #12]
 80010f0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010f2:	68fb      	ldr	r3, [r7, #12]
 80010f4:	43da      	mvns	r2, r3
 80010f6:	693b      	ldr	r3, [r7, #16]
 80010f8:	4013      	ands	r3, r2
 80010fa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80010fc:	683b      	ldr	r3, [r7, #0]
 80010fe:	685a      	ldr	r2, [r3, #4]
 8001100:	2380      	movs	r3, #128	@ 0x80
 8001102:	039b      	lsls	r3, r3, #14
 8001104:	4013      	ands	r3, r2
 8001106:	d003      	beq.n	8001110 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8001108:	693a      	ldr	r2, [r7, #16]
 800110a:	68fb      	ldr	r3, [r7, #12]
 800110c:	4313      	orrs	r3, r2
 800110e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001110:	4b22      	ldr	r3, [pc, #136]	@ (800119c <HAL_GPIO_Init+0x2dc>)
 8001112:	693a      	ldr	r2, [r7, #16]
 8001114:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8001116:	4b21      	ldr	r3, [pc, #132]	@ (800119c <HAL_GPIO_Init+0x2dc>)
 8001118:	685b      	ldr	r3, [r3, #4]
 800111a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	43da      	mvns	r2, r3
 8001120:	693b      	ldr	r3, [r7, #16]
 8001122:	4013      	ands	r3, r2
 8001124:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001126:	683b      	ldr	r3, [r7, #0]
 8001128:	685a      	ldr	r2, [r3, #4]
 800112a:	2380      	movs	r3, #128	@ 0x80
 800112c:	029b      	lsls	r3, r3, #10
 800112e:	4013      	ands	r3, r2
 8001130:	d003      	beq.n	800113a <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8001132:	693a      	ldr	r2, [r7, #16]
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	4313      	orrs	r3, r2
 8001138:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800113a:	4b18      	ldr	r3, [pc, #96]	@ (800119c <HAL_GPIO_Init+0x2dc>)
 800113c:	693a      	ldr	r2, [r7, #16]
 800113e:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8001140:	4b16      	ldr	r3, [pc, #88]	@ (800119c <HAL_GPIO_Init+0x2dc>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001146:	68fb      	ldr	r3, [r7, #12]
 8001148:	43da      	mvns	r2, r3
 800114a:	693b      	ldr	r3, [r7, #16]
 800114c:	4013      	ands	r3, r2
 800114e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001150:	683b      	ldr	r3, [r7, #0]
 8001152:	685a      	ldr	r2, [r3, #4]
 8001154:	2380      	movs	r3, #128	@ 0x80
 8001156:	025b      	lsls	r3, r3, #9
 8001158:	4013      	ands	r3, r2
 800115a:	d003      	beq.n	8001164 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 800115c:	693a      	ldr	r2, [r7, #16]
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	4313      	orrs	r3, r2
 8001162:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001164:	4b0d      	ldr	r3, [pc, #52]	@ (800119c <HAL_GPIO_Init+0x2dc>)
 8001166:	693a      	ldr	r2, [r7, #16]
 8001168:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800116a:	697b      	ldr	r3, [r7, #20]
 800116c:	3301      	adds	r3, #1
 800116e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001170:	683b      	ldr	r3, [r7, #0]
 8001172:	681a      	ldr	r2, [r3, #0]
 8001174:	697b      	ldr	r3, [r7, #20]
 8001176:	40da      	lsrs	r2, r3
 8001178:	1e13      	subs	r3, r2, #0
 800117a:	d000      	beq.n	800117e <HAL_GPIO_Init+0x2be>
 800117c:	e6a8      	b.n	8000ed0 <HAL_GPIO_Init+0x10>
  } 
}
 800117e:	46c0      	nop			@ (mov r8, r8)
 8001180:	46c0      	nop			@ (mov r8, r8)
 8001182:	46bd      	mov	sp, r7
 8001184:	b006      	add	sp, #24
 8001186:	bd80      	pop	{r7, pc}
 8001188:	40021000 	.word	0x40021000
 800118c:	40010000 	.word	0x40010000
 8001190:	48000400 	.word	0x48000400
 8001194:	48000800 	.word	0x48000800
 8001198:	48000c00 	.word	0x48000c00
 800119c:	40010400 	.word	0x40010400

080011a0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b084      	sub	sp, #16
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
 80011a8:	000a      	movs	r2, r1
 80011aa:	1cbb      	adds	r3, r7, #2
 80011ac:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	691b      	ldr	r3, [r3, #16]
 80011b2:	1cba      	adds	r2, r7, #2
 80011b4:	8812      	ldrh	r2, [r2, #0]
 80011b6:	4013      	ands	r3, r2
 80011b8:	d004      	beq.n	80011c4 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 80011ba:	230f      	movs	r3, #15
 80011bc:	18fb      	adds	r3, r7, r3
 80011be:	2201      	movs	r2, #1
 80011c0:	701a      	strb	r2, [r3, #0]
 80011c2:	e003      	b.n	80011cc <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80011c4:	230f      	movs	r3, #15
 80011c6:	18fb      	adds	r3, r7, r3
 80011c8:	2200      	movs	r2, #0
 80011ca:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 80011cc:	230f      	movs	r3, #15
 80011ce:	18fb      	adds	r3, r7, r3
 80011d0:	781b      	ldrb	r3, [r3, #0]
  }
 80011d2:	0018      	movs	r0, r3
 80011d4:	46bd      	mov	sp, r7
 80011d6:	b004      	add	sp, #16
 80011d8:	bd80      	pop	{r7, pc}

080011da <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011da:	b580      	push	{r7, lr}
 80011dc:	b082      	sub	sp, #8
 80011de:	af00      	add	r7, sp, #0
 80011e0:	6078      	str	r0, [r7, #4]
 80011e2:	0008      	movs	r0, r1
 80011e4:	0011      	movs	r1, r2
 80011e6:	1cbb      	adds	r3, r7, #2
 80011e8:	1c02      	adds	r2, r0, #0
 80011ea:	801a      	strh	r2, [r3, #0]
 80011ec:	1c7b      	adds	r3, r7, #1
 80011ee:	1c0a      	adds	r2, r1, #0
 80011f0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80011f2:	1c7b      	adds	r3, r7, #1
 80011f4:	781b      	ldrb	r3, [r3, #0]
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d004      	beq.n	8001204 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80011fa:	1cbb      	adds	r3, r7, #2
 80011fc:	881a      	ldrh	r2, [r3, #0]
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001202:	e003      	b.n	800120c <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001204:	1cbb      	adds	r3, r7, #2
 8001206:	881a      	ldrh	r2, [r3, #0]
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800120c:	46c0      	nop			@ (mov r8, r8)
 800120e:	46bd      	mov	sp, r7
 8001210:	b002      	add	sp, #8
 8001212:	bd80      	pop	{r7, pc}

08001214 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b082      	sub	sp, #8
 8001218:	af00      	add	r7, sp, #0
 800121a:	0002      	movs	r2, r0
 800121c:	1dbb      	adds	r3, r7, #6
 800121e:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001220:	4b09      	ldr	r3, [pc, #36]	@ (8001248 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8001222:	695b      	ldr	r3, [r3, #20]
 8001224:	1dba      	adds	r2, r7, #6
 8001226:	8812      	ldrh	r2, [r2, #0]
 8001228:	4013      	ands	r3, r2
 800122a:	d008      	beq.n	800123e <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800122c:	4b06      	ldr	r3, [pc, #24]	@ (8001248 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 800122e:	1dba      	adds	r2, r7, #6
 8001230:	8812      	ldrh	r2, [r2, #0]
 8001232:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001234:	1dbb      	adds	r3, r7, #6
 8001236:	881b      	ldrh	r3, [r3, #0]
 8001238:	0018      	movs	r0, r3
 800123a:	f7ff f95b 	bl	80004f4 <HAL_GPIO_EXTI_Callback>
  }
}
 800123e:	46c0      	nop			@ (mov r8, r8)
 8001240:	46bd      	mov	sp, r7
 8001242:	b002      	add	sp, #8
 8001244:	bd80      	pop	{r7, pc}
 8001246:	46c0      	nop			@ (mov r8, r8)
 8001248:	40010400 	.word	0x40010400

0800124c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b088      	sub	sp, #32
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	2b00      	cmp	r3, #0
 8001258:	d101      	bne.n	800125e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800125a:	2301      	movs	r3, #1
 800125c:	e301      	b.n	8001862 <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	2201      	movs	r2, #1
 8001264:	4013      	ands	r3, r2
 8001266:	d100      	bne.n	800126a <HAL_RCC_OscConfig+0x1e>
 8001268:	e08d      	b.n	8001386 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800126a:	4bc3      	ldr	r3, [pc, #780]	@ (8001578 <HAL_RCC_OscConfig+0x32c>)
 800126c:	685b      	ldr	r3, [r3, #4]
 800126e:	220c      	movs	r2, #12
 8001270:	4013      	ands	r3, r2
 8001272:	2b04      	cmp	r3, #4
 8001274:	d00e      	beq.n	8001294 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001276:	4bc0      	ldr	r3, [pc, #768]	@ (8001578 <HAL_RCC_OscConfig+0x32c>)
 8001278:	685b      	ldr	r3, [r3, #4]
 800127a:	220c      	movs	r2, #12
 800127c:	4013      	ands	r3, r2
 800127e:	2b08      	cmp	r3, #8
 8001280:	d116      	bne.n	80012b0 <HAL_RCC_OscConfig+0x64>
 8001282:	4bbd      	ldr	r3, [pc, #756]	@ (8001578 <HAL_RCC_OscConfig+0x32c>)
 8001284:	685a      	ldr	r2, [r3, #4]
 8001286:	2380      	movs	r3, #128	@ 0x80
 8001288:	025b      	lsls	r3, r3, #9
 800128a:	401a      	ands	r2, r3
 800128c:	2380      	movs	r3, #128	@ 0x80
 800128e:	025b      	lsls	r3, r3, #9
 8001290:	429a      	cmp	r2, r3
 8001292:	d10d      	bne.n	80012b0 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001294:	4bb8      	ldr	r3, [pc, #736]	@ (8001578 <HAL_RCC_OscConfig+0x32c>)
 8001296:	681a      	ldr	r2, [r3, #0]
 8001298:	2380      	movs	r3, #128	@ 0x80
 800129a:	029b      	lsls	r3, r3, #10
 800129c:	4013      	ands	r3, r2
 800129e:	d100      	bne.n	80012a2 <HAL_RCC_OscConfig+0x56>
 80012a0:	e070      	b.n	8001384 <HAL_RCC_OscConfig+0x138>
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	685b      	ldr	r3, [r3, #4]
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d000      	beq.n	80012ac <HAL_RCC_OscConfig+0x60>
 80012aa:	e06b      	b.n	8001384 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 80012ac:	2301      	movs	r3, #1
 80012ae:	e2d8      	b.n	8001862 <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	685b      	ldr	r3, [r3, #4]
 80012b4:	2b01      	cmp	r3, #1
 80012b6:	d107      	bne.n	80012c8 <HAL_RCC_OscConfig+0x7c>
 80012b8:	4baf      	ldr	r3, [pc, #700]	@ (8001578 <HAL_RCC_OscConfig+0x32c>)
 80012ba:	681a      	ldr	r2, [r3, #0]
 80012bc:	4bae      	ldr	r3, [pc, #696]	@ (8001578 <HAL_RCC_OscConfig+0x32c>)
 80012be:	2180      	movs	r1, #128	@ 0x80
 80012c0:	0249      	lsls	r1, r1, #9
 80012c2:	430a      	orrs	r2, r1
 80012c4:	601a      	str	r2, [r3, #0]
 80012c6:	e02f      	b.n	8001328 <HAL_RCC_OscConfig+0xdc>
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	685b      	ldr	r3, [r3, #4]
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d10c      	bne.n	80012ea <HAL_RCC_OscConfig+0x9e>
 80012d0:	4ba9      	ldr	r3, [pc, #676]	@ (8001578 <HAL_RCC_OscConfig+0x32c>)
 80012d2:	681a      	ldr	r2, [r3, #0]
 80012d4:	4ba8      	ldr	r3, [pc, #672]	@ (8001578 <HAL_RCC_OscConfig+0x32c>)
 80012d6:	49a9      	ldr	r1, [pc, #676]	@ (800157c <HAL_RCC_OscConfig+0x330>)
 80012d8:	400a      	ands	r2, r1
 80012da:	601a      	str	r2, [r3, #0]
 80012dc:	4ba6      	ldr	r3, [pc, #664]	@ (8001578 <HAL_RCC_OscConfig+0x32c>)
 80012de:	681a      	ldr	r2, [r3, #0]
 80012e0:	4ba5      	ldr	r3, [pc, #660]	@ (8001578 <HAL_RCC_OscConfig+0x32c>)
 80012e2:	49a7      	ldr	r1, [pc, #668]	@ (8001580 <HAL_RCC_OscConfig+0x334>)
 80012e4:	400a      	ands	r2, r1
 80012e6:	601a      	str	r2, [r3, #0]
 80012e8:	e01e      	b.n	8001328 <HAL_RCC_OscConfig+0xdc>
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	685b      	ldr	r3, [r3, #4]
 80012ee:	2b05      	cmp	r3, #5
 80012f0:	d10e      	bne.n	8001310 <HAL_RCC_OscConfig+0xc4>
 80012f2:	4ba1      	ldr	r3, [pc, #644]	@ (8001578 <HAL_RCC_OscConfig+0x32c>)
 80012f4:	681a      	ldr	r2, [r3, #0]
 80012f6:	4ba0      	ldr	r3, [pc, #640]	@ (8001578 <HAL_RCC_OscConfig+0x32c>)
 80012f8:	2180      	movs	r1, #128	@ 0x80
 80012fa:	02c9      	lsls	r1, r1, #11
 80012fc:	430a      	orrs	r2, r1
 80012fe:	601a      	str	r2, [r3, #0]
 8001300:	4b9d      	ldr	r3, [pc, #628]	@ (8001578 <HAL_RCC_OscConfig+0x32c>)
 8001302:	681a      	ldr	r2, [r3, #0]
 8001304:	4b9c      	ldr	r3, [pc, #624]	@ (8001578 <HAL_RCC_OscConfig+0x32c>)
 8001306:	2180      	movs	r1, #128	@ 0x80
 8001308:	0249      	lsls	r1, r1, #9
 800130a:	430a      	orrs	r2, r1
 800130c:	601a      	str	r2, [r3, #0]
 800130e:	e00b      	b.n	8001328 <HAL_RCC_OscConfig+0xdc>
 8001310:	4b99      	ldr	r3, [pc, #612]	@ (8001578 <HAL_RCC_OscConfig+0x32c>)
 8001312:	681a      	ldr	r2, [r3, #0]
 8001314:	4b98      	ldr	r3, [pc, #608]	@ (8001578 <HAL_RCC_OscConfig+0x32c>)
 8001316:	4999      	ldr	r1, [pc, #612]	@ (800157c <HAL_RCC_OscConfig+0x330>)
 8001318:	400a      	ands	r2, r1
 800131a:	601a      	str	r2, [r3, #0]
 800131c:	4b96      	ldr	r3, [pc, #600]	@ (8001578 <HAL_RCC_OscConfig+0x32c>)
 800131e:	681a      	ldr	r2, [r3, #0]
 8001320:	4b95      	ldr	r3, [pc, #596]	@ (8001578 <HAL_RCC_OscConfig+0x32c>)
 8001322:	4997      	ldr	r1, [pc, #604]	@ (8001580 <HAL_RCC_OscConfig+0x334>)
 8001324:	400a      	ands	r2, r1
 8001326:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	685b      	ldr	r3, [r3, #4]
 800132c:	2b00      	cmp	r3, #0
 800132e:	d014      	beq.n	800135a <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001330:	f7ff fcba 	bl	8000ca8 <HAL_GetTick>
 8001334:	0003      	movs	r3, r0
 8001336:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001338:	e008      	b.n	800134c <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800133a:	f7ff fcb5 	bl	8000ca8 <HAL_GetTick>
 800133e:	0002      	movs	r2, r0
 8001340:	69bb      	ldr	r3, [r7, #24]
 8001342:	1ad3      	subs	r3, r2, r3
 8001344:	2b64      	cmp	r3, #100	@ 0x64
 8001346:	d901      	bls.n	800134c <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8001348:	2303      	movs	r3, #3
 800134a:	e28a      	b.n	8001862 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800134c:	4b8a      	ldr	r3, [pc, #552]	@ (8001578 <HAL_RCC_OscConfig+0x32c>)
 800134e:	681a      	ldr	r2, [r3, #0]
 8001350:	2380      	movs	r3, #128	@ 0x80
 8001352:	029b      	lsls	r3, r3, #10
 8001354:	4013      	ands	r3, r2
 8001356:	d0f0      	beq.n	800133a <HAL_RCC_OscConfig+0xee>
 8001358:	e015      	b.n	8001386 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800135a:	f7ff fca5 	bl	8000ca8 <HAL_GetTick>
 800135e:	0003      	movs	r3, r0
 8001360:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001362:	e008      	b.n	8001376 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001364:	f7ff fca0 	bl	8000ca8 <HAL_GetTick>
 8001368:	0002      	movs	r2, r0
 800136a:	69bb      	ldr	r3, [r7, #24]
 800136c:	1ad3      	subs	r3, r2, r3
 800136e:	2b64      	cmp	r3, #100	@ 0x64
 8001370:	d901      	bls.n	8001376 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8001372:	2303      	movs	r3, #3
 8001374:	e275      	b.n	8001862 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001376:	4b80      	ldr	r3, [pc, #512]	@ (8001578 <HAL_RCC_OscConfig+0x32c>)
 8001378:	681a      	ldr	r2, [r3, #0]
 800137a:	2380      	movs	r3, #128	@ 0x80
 800137c:	029b      	lsls	r3, r3, #10
 800137e:	4013      	ands	r3, r2
 8001380:	d1f0      	bne.n	8001364 <HAL_RCC_OscConfig+0x118>
 8001382:	e000      	b.n	8001386 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001384:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	2202      	movs	r2, #2
 800138c:	4013      	ands	r3, r2
 800138e:	d100      	bne.n	8001392 <HAL_RCC_OscConfig+0x146>
 8001390:	e069      	b.n	8001466 <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001392:	4b79      	ldr	r3, [pc, #484]	@ (8001578 <HAL_RCC_OscConfig+0x32c>)
 8001394:	685b      	ldr	r3, [r3, #4]
 8001396:	220c      	movs	r2, #12
 8001398:	4013      	ands	r3, r2
 800139a:	d00b      	beq.n	80013b4 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800139c:	4b76      	ldr	r3, [pc, #472]	@ (8001578 <HAL_RCC_OscConfig+0x32c>)
 800139e:	685b      	ldr	r3, [r3, #4]
 80013a0:	220c      	movs	r2, #12
 80013a2:	4013      	ands	r3, r2
 80013a4:	2b08      	cmp	r3, #8
 80013a6:	d11c      	bne.n	80013e2 <HAL_RCC_OscConfig+0x196>
 80013a8:	4b73      	ldr	r3, [pc, #460]	@ (8001578 <HAL_RCC_OscConfig+0x32c>)
 80013aa:	685a      	ldr	r2, [r3, #4]
 80013ac:	2380      	movs	r3, #128	@ 0x80
 80013ae:	025b      	lsls	r3, r3, #9
 80013b0:	4013      	ands	r3, r2
 80013b2:	d116      	bne.n	80013e2 <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013b4:	4b70      	ldr	r3, [pc, #448]	@ (8001578 <HAL_RCC_OscConfig+0x32c>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	2202      	movs	r2, #2
 80013ba:	4013      	ands	r3, r2
 80013bc:	d005      	beq.n	80013ca <HAL_RCC_OscConfig+0x17e>
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	68db      	ldr	r3, [r3, #12]
 80013c2:	2b01      	cmp	r3, #1
 80013c4:	d001      	beq.n	80013ca <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80013c6:	2301      	movs	r3, #1
 80013c8:	e24b      	b.n	8001862 <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013ca:	4b6b      	ldr	r3, [pc, #428]	@ (8001578 <HAL_RCC_OscConfig+0x32c>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	22f8      	movs	r2, #248	@ 0xf8
 80013d0:	4393      	bics	r3, r2
 80013d2:	0019      	movs	r1, r3
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	691b      	ldr	r3, [r3, #16]
 80013d8:	00da      	lsls	r2, r3, #3
 80013da:	4b67      	ldr	r3, [pc, #412]	@ (8001578 <HAL_RCC_OscConfig+0x32c>)
 80013dc:	430a      	orrs	r2, r1
 80013de:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013e0:	e041      	b.n	8001466 <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	68db      	ldr	r3, [r3, #12]
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d024      	beq.n	8001434 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80013ea:	4b63      	ldr	r3, [pc, #396]	@ (8001578 <HAL_RCC_OscConfig+0x32c>)
 80013ec:	681a      	ldr	r2, [r3, #0]
 80013ee:	4b62      	ldr	r3, [pc, #392]	@ (8001578 <HAL_RCC_OscConfig+0x32c>)
 80013f0:	2101      	movs	r1, #1
 80013f2:	430a      	orrs	r2, r1
 80013f4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013f6:	f7ff fc57 	bl	8000ca8 <HAL_GetTick>
 80013fa:	0003      	movs	r3, r0
 80013fc:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013fe:	e008      	b.n	8001412 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001400:	f7ff fc52 	bl	8000ca8 <HAL_GetTick>
 8001404:	0002      	movs	r2, r0
 8001406:	69bb      	ldr	r3, [r7, #24]
 8001408:	1ad3      	subs	r3, r2, r3
 800140a:	2b02      	cmp	r3, #2
 800140c:	d901      	bls.n	8001412 <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 800140e:	2303      	movs	r3, #3
 8001410:	e227      	b.n	8001862 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001412:	4b59      	ldr	r3, [pc, #356]	@ (8001578 <HAL_RCC_OscConfig+0x32c>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	2202      	movs	r2, #2
 8001418:	4013      	ands	r3, r2
 800141a:	d0f1      	beq.n	8001400 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800141c:	4b56      	ldr	r3, [pc, #344]	@ (8001578 <HAL_RCC_OscConfig+0x32c>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	22f8      	movs	r2, #248	@ 0xf8
 8001422:	4393      	bics	r3, r2
 8001424:	0019      	movs	r1, r3
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	691b      	ldr	r3, [r3, #16]
 800142a:	00da      	lsls	r2, r3, #3
 800142c:	4b52      	ldr	r3, [pc, #328]	@ (8001578 <HAL_RCC_OscConfig+0x32c>)
 800142e:	430a      	orrs	r2, r1
 8001430:	601a      	str	r2, [r3, #0]
 8001432:	e018      	b.n	8001466 <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001434:	4b50      	ldr	r3, [pc, #320]	@ (8001578 <HAL_RCC_OscConfig+0x32c>)
 8001436:	681a      	ldr	r2, [r3, #0]
 8001438:	4b4f      	ldr	r3, [pc, #316]	@ (8001578 <HAL_RCC_OscConfig+0x32c>)
 800143a:	2101      	movs	r1, #1
 800143c:	438a      	bics	r2, r1
 800143e:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001440:	f7ff fc32 	bl	8000ca8 <HAL_GetTick>
 8001444:	0003      	movs	r3, r0
 8001446:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001448:	e008      	b.n	800145c <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800144a:	f7ff fc2d 	bl	8000ca8 <HAL_GetTick>
 800144e:	0002      	movs	r2, r0
 8001450:	69bb      	ldr	r3, [r7, #24]
 8001452:	1ad3      	subs	r3, r2, r3
 8001454:	2b02      	cmp	r3, #2
 8001456:	d901      	bls.n	800145c <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8001458:	2303      	movs	r3, #3
 800145a:	e202      	b.n	8001862 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800145c:	4b46      	ldr	r3, [pc, #280]	@ (8001578 <HAL_RCC_OscConfig+0x32c>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	2202      	movs	r2, #2
 8001462:	4013      	ands	r3, r2
 8001464:	d1f1      	bne.n	800144a <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	2208      	movs	r2, #8
 800146c:	4013      	ands	r3, r2
 800146e:	d036      	beq.n	80014de <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	69db      	ldr	r3, [r3, #28]
 8001474:	2b00      	cmp	r3, #0
 8001476:	d019      	beq.n	80014ac <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001478:	4b3f      	ldr	r3, [pc, #252]	@ (8001578 <HAL_RCC_OscConfig+0x32c>)
 800147a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800147c:	4b3e      	ldr	r3, [pc, #248]	@ (8001578 <HAL_RCC_OscConfig+0x32c>)
 800147e:	2101      	movs	r1, #1
 8001480:	430a      	orrs	r2, r1
 8001482:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001484:	f7ff fc10 	bl	8000ca8 <HAL_GetTick>
 8001488:	0003      	movs	r3, r0
 800148a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800148c:	e008      	b.n	80014a0 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800148e:	f7ff fc0b 	bl	8000ca8 <HAL_GetTick>
 8001492:	0002      	movs	r2, r0
 8001494:	69bb      	ldr	r3, [r7, #24]
 8001496:	1ad3      	subs	r3, r2, r3
 8001498:	2b02      	cmp	r3, #2
 800149a:	d901      	bls.n	80014a0 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 800149c:	2303      	movs	r3, #3
 800149e:	e1e0      	b.n	8001862 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014a0:	4b35      	ldr	r3, [pc, #212]	@ (8001578 <HAL_RCC_OscConfig+0x32c>)
 80014a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014a4:	2202      	movs	r2, #2
 80014a6:	4013      	ands	r3, r2
 80014a8:	d0f1      	beq.n	800148e <HAL_RCC_OscConfig+0x242>
 80014aa:	e018      	b.n	80014de <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80014ac:	4b32      	ldr	r3, [pc, #200]	@ (8001578 <HAL_RCC_OscConfig+0x32c>)
 80014ae:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80014b0:	4b31      	ldr	r3, [pc, #196]	@ (8001578 <HAL_RCC_OscConfig+0x32c>)
 80014b2:	2101      	movs	r1, #1
 80014b4:	438a      	bics	r2, r1
 80014b6:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014b8:	f7ff fbf6 	bl	8000ca8 <HAL_GetTick>
 80014bc:	0003      	movs	r3, r0
 80014be:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014c0:	e008      	b.n	80014d4 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80014c2:	f7ff fbf1 	bl	8000ca8 <HAL_GetTick>
 80014c6:	0002      	movs	r2, r0
 80014c8:	69bb      	ldr	r3, [r7, #24]
 80014ca:	1ad3      	subs	r3, r2, r3
 80014cc:	2b02      	cmp	r3, #2
 80014ce:	d901      	bls.n	80014d4 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 80014d0:	2303      	movs	r3, #3
 80014d2:	e1c6      	b.n	8001862 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014d4:	4b28      	ldr	r3, [pc, #160]	@ (8001578 <HAL_RCC_OscConfig+0x32c>)
 80014d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014d8:	2202      	movs	r2, #2
 80014da:	4013      	ands	r3, r2
 80014dc:	d1f1      	bne.n	80014c2 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	2204      	movs	r2, #4
 80014e4:	4013      	ands	r3, r2
 80014e6:	d100      	bne.n	80014ea <HAL_RCC_OscConfig+0x29e>
 80014e8:	e0b4      	b.n	8001654 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 80014ea:	201f      	movs	r0, #31
 80014ec:	183b      	adds	r3, r7, r0
 80014ee:	2200      	movs	r2, #0
 80014f0:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80014f2:	4b21      	ldr	r3, [pc, #132]	@ (8001578 <HAL_RCC_OscConfig+0x32c>)
 80014f4:	69da      	ldr	r2, [r3, #28]
 80014f6:	2380      	movs	r3, #128	@ 0x80
 80014f8:	055b      	lsls	r3, r3, #21
 80014fa:	4013      	ands	r3, r2
 80014fc:	d110      	bne.n	8001520 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80014fe:	4b1e      	ldr	r3, [pc, #120]	@ (8001578 <HAL_RCC_OscConfig+0x32c>)
 8001500:	69da      	ldr	r2, [r3, #28]
 8001502:	4b1d      	ldr	r3, [pc, #116]	@ (8001578 <HAL_RCC_OscConfig+0x32c>)
 8001504:	2180      	movs	r1, #128	@ 0x80
 8001506:	0549      	lsls	r1, r1, #21
 8001508:	430a      	orrs	r2, r1
 800150a:	61da      	str	r2, [r3, #28]
 800150c:	4b1a      	ldr	r3, [pc, #104]	@ (8001578 <HAL_RCC_OscConfig+0x32c>)
 800150e:	69da      	ldr	r2, [r3, #28]
 8001510:	2380      	movs	r3, #128	@ 0x80
 8001512:	055b      	lsls	r3, r3, #21
 8001514:	4013      	ands	r3, r2
 8001516:	60fb      	str	r3, [r7, #12]
 8001518:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800151a:	183b      	adds	r3, r7, r0
 800151c:	2201      	movs	r2, #1
 800151e:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001520:	4b18      	ldr	r3, [pc, #96]	@ (8001584 <HAL_RCC_OscConfig+0x338>)
 8001522:	681a      	ldr	r2, [r3, #0]
 8001524:	2380      	movs	r3, #128	@ 0x80
 8001526:	005b      	lsls	r3, r3, #1
 8001528:	4013      	ands	r3, r2
 800152a:	d11a      	bne.n	8001562 <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800152c:	4b15      	ldr	r3, [pc, #84]	@ (8001584 <HAL_RCC_OscConfig+0x338>)
 800152e:	681a      	ldr	r2, [r3, #0]
 8001530:	4b14      	ldr	r3, [pc, #80]	@ (8001584 <HAL_RCC_OscConfig+0x338>)
 8001532:	2180      	movs	r1, #128	@ 0x80
 8001534:	0049      	lsls	r1, r1, #1
 8001536:	430a      	orrs	r2, r1
 8001538:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800153a:	f7ff fbb5 	bl	8000ca8 <HAL_GetTick>
 800153e:	0003      	movs	r3, r0
 8001540:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001542:	e008      	b.n	8001556 <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001544:	f7ff fbb0 	bl	8000ca8 <HAL_GetTick>
 8001548:	0002      	movs	r2, r0
 800154a:	69bb      	ldr	r3, [r7, #24]
 800154c:	1ad3      	subs	r3, r2, r3
 800154e:	2b64      	cmp	r3, #100	@ 0x64
 8001550:	d901      	bls.n	8001556 <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 8001552:	2303      	movs	r3, #3
 8001554:	e185      	b.n	8001862 <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001556:	4b0b      	ldr	r3, [pc, #44]	@ (8001584 <HAL_RCC_OscConfig+0x338>)
 8001558:	681a      	ldr	r2, [r3, #0]
 800155a:	2380      	movs	r3, #128	@ 0x80
 800155c:	005b      	lsls	r3, r3, #1
 800155e:	4013      	ands	r3, r2
 8001560:	d0f0      	beq.n	8001544 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	689b      	ldr	r3, [r3, #8]
 8001566:	2b01      	cmp	r3, #1
 8001568:	d10e      	bne.n	8001588 <HAL_RCC_OscConfig+0x33c>
 800156a:	4b03      	ldr	r3, [pc, #12]	@ (8001578 <HAL_RCC_OscConfig+0x32c>)
 800156c:	6a1a      	ldr	r2, [r3, #32]
 800156e:	4b02      	ldr	r3, [pc, #8]	@ (8001578 <HAL_RCC_OscConfig+0x32c>)
 8001570:	2101      	movs	r1, #1
 8001572:	430a      	orrs	r2, r1
 8001574:	621a      	str	r2, [r3, #32]
 8001576:	e035      	b.n	80015e4 <HAL_RCC_OscConfig+0x398>
 8001578:	40021000 	.word	0x40021000
 800157c:	fffeffff 	.word	0xfffeffff
 8001580:	fffbffff 	.word	0xfffbffff
 8001584:	40007000 	.word	0x40007000
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	689b      	ldr	r3, [r3, #8]
 800158c:	2b00      	cmp	r3, #0
 800158e:	d10c      	bne.n	80015aa <HAL_RCC_OscConfig+0x35e>
 8001590:	4bb6      	ldr	r3, [pc, #728]	@ (800186c <HAL_RCC_OscConfig+0x620>)
 8001592:	6a1a      	ldr	r2, [r3, #32]
 8001594:	4bb5      	ldr	r3, [pc, #724]	@ (800186c <HAL_RCC_OscConfig+0x620>)
 8001596:	2101      	movs	r1, #1
 8001598:	438a      	bics	r2, r1
 800159a:	621a      	str	r2, [r3, #32]
 800159c:	4bb3      	ldr	r3, [pc, #716]	@ (800186c <HAL_RCC_OscConfig+0x620>)
 800159e:	6a1a      	ldr	r2, [r3, #32]
 80015a0:	4bb2      	ldr	r3, [pc, #712]	@ (800186c <HAL_RCC_OscConfig+0x620>)
 80015a2:	2104      	movs	r1, #4
 80015a4:	438a      	bics	r2, r1
 80015a6:	621a      	str	r2, [r3, #32]
 80015a8:	e01c      	b.n	80015e4 <HAL_RCC_OscConfig+0x398>
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	689b      	ldr	r3, [r3, #8]
 80015ae:	2b05      	cmp	r3, #5
 80015b0:	d10c      	bne.n	80015cc <HAL_RCC_OscConfig+0x380>
 80015b2:	4bae      	ldr	r3, [pc, #696]	@ (800186c <HAL_RCC_OscConfig+0x620>)
 80015b4:	6a1a      	ldr	r2, [r3, #32]
 80015b6:	4bad      	ldr	r3, [pc, #692]	@ (800186c <HAL_RCC_OscConfig+0x620>)
 80015b8:	2104      	movs	r1, #4
 80015ba:	430a      	orrs	r2, r1
 80015bc:	621a      	str	r2, [r3, #32]
 80015be:	4bab      	ldr	r3, [pc, #684]	@ (800186c <HAL_RCC_OscConfig+0x620>)
 80015c0:	6a1a      	ldr	r2, [r3, #32]
 80015c2:	4baa      	ldr	r3, [pc, #680]	@ (800186c <HAL_RCC_OscConfig+0x620>)
 80015c4:	2101      	movs	r1, #1
 80015c6:	430a      	orrs	r2, r1
 80015c8:	621a      	str	r2, [r3, #32]
 80015ca:	e00b      	b.n	80015e4 <HAL_RCC_OscConfig+0x398>
 80015cc:	4ba7      	ldr	r3, [pc, #668]	@ (800186c <HAL_RCC_OscConfig+0x620>)
 80015ce:	6a1a      	ldr	r2, [r3, #32]
 80015d0:	4ba6      	ldr	r3, [pc, #664]	@ (800186c <HAL_RCC_OscConfig+0x620>)
 80015d2:	2101      	movs	r1, #1
 80015d4:	438a      	bics	r2, r1
 80015d6:	621a      	str	r2, [r3, #32]
 80015d8:	4ba4      	ldr	r3, [pc, #656]	@ (800186c <HAL_RCC_OscConfig+0x620>)
 80015da:	6a1a      	ldr	r2, [r3, #32]
 80015dc:	4ba3      	ldr	r3, [pc, #652]	@ (800186c <HAL_RCC_OscConfig+0x620>)
 80015de:	2104      	movs	r1, #4
 80015e0:	438a      	bics	r2, r1
 80015e2:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	689b      	ldr	r3, [r3, #8]
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d014      	beq.n	8001616 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015ec:	f7ff fb5c 	bl	8000ca8 <HAL_GetTick>
 80015f0:	0003      	movs	r3, r0
 80015f2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015f4:	e009      	b.n	800160a <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80015f6:	f7ff fb57 	bl	8000ca8 <HAL_GetTick>
 80015fa:	0002      	movs	r2, r0
 80015fc:	69bb      	ldr	r3, [r7, #24]
 80015fe:	1ad3      	subs	r3, r2, r3
 8001600:	4a9b      	ldr	r2, [pc, #620]	@ (8001870 <HAL_RCC_OscConfig+0x624>)
 8001602:	4293      	cmp	r3, r2
 8001604:	d901      	bls.n	800160a <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 8001606:	2303      	movs	r3, #3
 8001608:	e12b      	b.n	8001862 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800160a:	4b98      	ldr	r3, [pc, #608]	@ (800186c <HAL_RCC_OscConfig+0x620>)
 800160c:	6a1b      	ldr	r3, [r3, #32]
 800160e:	2202      	movs	r2, #2
 8001610:	4013      	ands	r3, r2
 8001612:	d0f0      	beq.n	80015f6 <HAL_RCC_OscConfig+0x3aa>
 8001614:	e013      	b.n	800163e <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001616:	f7ff fb47 	bl	8000ca8 <HAL_GetTick>
 800161a:	0003      	movs	r3, r0
 800161c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800161e:	e009      	b.n	8001634 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001620:	f7ff fb42 	bl	8000ca8 <HAL_GetTick>
 8001624:	0002      	movs	r2, r0
 8001626:	69bb      	ldr	r3, [r7, #24]
 8001628:	1ad3      	subs	r3, r2, r3
 800162a:	4a91      	ldr	r2, [pc, #580]	@ (8001870 <HAL_RCC_OscConfig+0x624>)
 800162c:	4293      	cmp	r3, r2
 800162e:	d901      	bls.n	8001634 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8001630:	2303      	movs	r3, #3
 8001632:	e116      	b.n	8001862 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001634:	4b8d      	ldr	r3, [pc, #564]	@ (800186c <HAL_RCC_OscConfig+0x620>)
 8001636:	6a1b      	ldr	r3, [r3, #32]
 8001638:	2202      	movs	r2, #2
 800163a:	4013      	ands	r3, r2
 800163c:	d1f0      	bne.n	8001620 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800163e:	231f      	movs	r3, #31
 8001640:	18fb      	adds	r3, r7, r3
 8001642:	781b      	ldrb	r3, [r3, #0]
 8001644:	2b01      	cmp	r3, #1
 8001646:	d105      	bne.n	8001654 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001648:	4b88      	ldr	r3, [pc, #544]	@ (800186c <HAL_RCC_OscConfig+0x620>)
 800164a:	69da      	ldr	r2, [r3, #28]
 800164c:	4b87      	ldr	r3, [pc, #540]	@ (800186c <HAL_RCC_OscConfig+0x620>)
 800164e:	4989      	ldr	r1, [pc, #548]	@ (8001874 <HAL_RCC_OscConfig+0x628>)
 8001650:	400a      	ands	r2, r1
 8001652:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	2210      	movs	r2, #16
 800165a:	4013      	ands	r3, r2
 800165c:	d063      	beq.n	8001726 <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	695b      	ldr	r3, [r3, #20]
 8001662:	2b01      	cmp	r3, #1
 8001664:	d12a      	bne.n	80016bc <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001666:	4b81      	ldr	r3, [pc, #516]	@ (800186c <HAL_RCC_OscConfig+0x620>)
 8001668:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800166a:	4b80      	ldr	r3, [pc, #512]	@ (800186c <HAL_RCC_OscConfig+0x620>)
 800166c:	2104      	movs	r1, #4
 800166e:	430a      	orrs	r2, r1
 8001670:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8001672:	4b7e      	ldr	r3, [pc, #504]	@ (800186c <HAL_RCC_OscConfig+0x620>)
 8001674:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001676:	4b7d      	ldr	r3, [pc, #500]	@ (800186c <HAL_RCC_OscConfig+0x620>)
 8001678:	2101      	movs	r1, #1
 800167a:	430a      	orrs	r2, r1
 800167c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800167e:	f7ff fb13 	bl	8000ca8 <HAL_GetTick>
 8001682:	0003      	movs	r3, r0
 8001684:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001686:	e008      	b.n	800169a <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001688:	f7ff fb0e 	bl	8000ca8 <HAL_GetTick>
 800168c:	0002      	movs	r2, r0
 800168e:	69bb      	ldr	r3, [r7, #24]
 8001690:	1ad3      	subs	r3, r2, r3
 8001692:	2b02      	cmp	r3, #2
 8001694:	d901      	bls.n	800169a <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 8001696:	2303      	movs	r3, #3
 8001698:	e0e3      	b.n	8001862 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800169a:	4b74      	ldr	r3, [pc, #464]	@ (800186c <HAL_RCC_OscConfig+0x620>)
 800169c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800169e:	2202      	movs	r2, #2
 80016a0:	4013      	ands	r3, r2
 80016a2:	d0f1      	beq.n	8001688 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80016a4:	4b71      	ldr	r3, [pc, #452]	@ (800186c <HAL_RCC_OscConfig+0x620>)
 80016a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80016a8:	22f8      	movs	r2, #248	@ 0xf8
 80016aa:	4393      	bics	r3, r2
 80016ac:	0019      	movs	r1, r3
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	699b      	ldr	r3, [r3, #24]
 80016b2:	00da      	lsls	r2, r3, #3
 80016b4:	4b6d      	ldr	r3, [pc, #436]	@ (800186c <HAL_RCC_OscConfig+0x620>)
 80016b6:	430a      	orrs	r2, r1
 80016b8:	635a      	str	r2, [r3, #52]	@ 0x34
 80016ba:	e034      	b.n	8001726 <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	695b      	ldr	r3, [r3, #20]
 80016c0:	3305      	adds	r3, #5
 80016c2:	d111      	bne.n	80016e8 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80016c4:	4b69      	ldr	r3, [pc, #420]	@ (800186c <HAL_RCC_OscConfig+0x620>)
 80016c6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80016c8:	4b68      	ldr	r3, [pc, #416]	@ (800186c <HAL_RCC_OscConfig+0x620>)
 80016ca:	2104      	movs	r1, #4
 80016cc:	438a      	bics	r2, r1
 80016ce:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80016d0:	4b66      	ldr	r3, [pc, #408]	@ (800186c <HAL_RCC_OscConfig+0x620>)
 80016d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80016d4:	22f8      	movs	r2, #248	@ 0xf8
 80016d6:	4393      	bics	r3, r2
 80016d8:	0019      	movs	r1, r3
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	699b      	ldr	r3, [r3, #24]
 80016de:	00da      	lsls	r2, r3, #3
 80016e0:	4b62      	ldr	r3, [pc, #392]	@ (800186c <HAL_RCC_OscConfig+0x620>)
 80016e2:	430a      	orrs	r2, r1
 80016e4:	635a      	str	r2, [r3, #52]	@ 0x34
 80016e6:	e01e      	b.n	8001726 <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80016e8:	4b60      	ldr	r3, [pc, #384]	@ (800186c <HAL_RCC_OscConfig+0x620>)
 80016ea:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80016ec:	4b5f      	ldr	r3, [pc, #380]	@ (800186c <HAL_RCC_OscConfig+0x620>)
 80016ee:	2104      	movs	r1, #4
 80016f0:	430a      	orrs	r2, r1
 80016f2:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80016f4:	4b5d      	ldr	r3, [pc, #372]	@ (800186c <HAL_RCC_OscConfig+0x620>)
 80016f6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80016f8:	4b5c      	ldr	r3, [pc, #368]	@ (800186c <HAL_RCC_OscConfig+0x620>)
 80016fa:	2101      	movs	r1, #1
 80016fc:	438a      	bics	r2, r1
 80016fe:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001700:	f7ff fad2 	bl	8000ca8 <HAL_GetTick>
 8001704:	0003      	movs	r3, r0
 8001706:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001708:	e008      	b.n	800171c <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800170a:	f7ff facd 	bl	8000ca8 <HAL_GetTick>
 800170e:	0002      	movs	r2, r0
 8001710:	69bb      	ldr	r3, [r7, #24]
 8001712:	1ad3      	subs	r3, r2, r3
 8001714:	2b02      	cmp	r3, #2
 8001716:	d901      	bls.n	800171c <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 8001718:	2303      	movs	r3, #3
 800171a:	e0a2      	b.n	8001862 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800171c:	4b53      	ldr	r3, [pc, #332]	@ (800186c <HAL_RCC_OscConfig+0x620>)
 800171e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001720:	2202      	movs	r2, #2
 8001722:	4013      	ands	r3, r2
 8001724:	d1f1      	bne.n	800170a <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	6a1b      	ldr	r3, [r3, #32]
 800172a:	2b00      	cmp	r3, #0
 800172c:	d100      	bne.n	8001730 <HAL_RCC_OscConfig+0x4e4>
 800172e:	e097      	b.n	8001860 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001730:	4b4e      	ldr	r3, [pc, #312]	@ (800186c <HAL_RCC_OscConfig+0x620>)
 8001732:	685b      	ldr	r3, [r3, #4]
 8001734:	220c      	movs	r2, #12
 8001736:	4013      	ands	r3, r2
 8001738:	2b08      	cmp	r3, #8
 800173a:	d100      	bne.n	800173e <HAL_RCC_OscConfig+0x4f2>
 800173c:	e06b      	b.n	8001816 <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	6a1b      	ldr	r3, [r3, #32]
 8001742:	2b02      	cmp	r3, #2
 8001744:	d14c      	bne.n	80017e0 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001746:	4b49      	ldr	r3, [pc, #292]	@ (800186c <HAL_RCC_OscConfig+0x620>)
 8001748:	681a      	ldr	r2, [r3, #0]
 800174a:	4b48      	ldr	r3, [pc, #288]	@ (800186c <HAL_RCC_OscConfig+0x620>)
 800174c:	494a      	ldr	r1, [pc, #296]	@ (8001878 <HAL_RCC_OscConfig+0x62c>)
 800174e:	400a      	ands	r2, r1
 8001750:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001752:	f7ff faa9 	bl	8000ca8 <HAL_GetTick>
 8001756:	0003      	movs	r3, r0
 8001758:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800175a:	e008      	b.n	800176e <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800175c:	f7ff faa4 	bl	8000ca8 <HAL_GetTick>
 8001760:	0002      	movs	r2, r0
 8001762:	69bb      	ldr	r3, [r7, #24]
 8001764:	1ad3      	subs	r3, r2, r3
 8001766:	2b02      	cmp	r3, #2
 8001768:	d901      	bls.n	800176e <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 800176a:	2303      	movs	r3, #3
 800176c:	e079      	b.n	8001862 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800176e:	4b3f      	ldr	r3, [pc, #252]	@ (800186c <HAL_RCC_OscConfig+0x620>)
 8001770:	681a      	ldr	r2, [r3, #0]
 8001772:	2380      	movs	r3, #128	@ 0x80
 8001774:	049b      	lsls	r3, r3, #18
 8001776:	4013      	ands	r3, r2
 8001778:	d1f0      	bne.n	800175c <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800177a:	4b3c      	ldr	r3, [pc, #240]	@ (800186c <HAL_RCC_OscConfig+0x620>)
 800177c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800177e:	220f      	movs	r2, #15
 8001780:	4393      	bics	r3, r2
 8001782:	0019      	movs	r1, r3
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001788:	4b38      	ldr	r3, [pc, #224]	@ (800186c <HAL_RCC_OscConfig+0x620>)
 800178a:	430a      	orrs	r2, r1
 800178c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800178e:	4b37      	ldr	r3, [pc, #220]	@ (800186c <HAL_RCC_OscConfig+0x620>)
 8001790:	685b      	ldr	r3, [r3, #4]
 8001792:	4a3a      	ldr	r2, [pc, #232]	@ (800187c <HAL_RCC_OscConfig+0x630>)
 8001794:	4013      	ands	r3, r2
 8001796:	0019      	movs	r1, r3
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017a0:	431a      	orrs	r2, r3
 80017a2:	4b32      	ldr	r3, [pc, #200]	@ (800186c <HAL_RCC_OscConfig+0x620>)
 80017a4:	430a      	orrs	r2, r1
 80017a6:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80017a8:	4b30      	ldr	r3, [pc, #192]	@ (800186c <HAL_RCC_OscConfig+0x620>)
 80017aa:	681a      	ldr	r2, [r3, #0]
 80017ac:	4b2f      	ldr	r3, [pc, #188]	@ (800186c <HAL_RCC_OscConfig+0x620>)
 80017ae:	2180      	movs	r1, #128	@ 0x80
 80017b0:	0449      	lsls	r1, r1, #17
 80017b2:	430a      	orrs	r2, r1
 80017b4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017b6:	f7ff fa77 	bl	8000ca8 <HAL_GetTick>
 80017ba:	0003      	movs	r3, r0
 80017bc:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80017be:	e008      	b.n	80017d2 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017c0:	f7ff fa72 	bl	8000ca8 <HAL_GetTick>
 80017c4:	0002      	movs	r2, r0
 80017c6:	69bb      	ldr	r3, [r7, #24]
 80017c8:	1ad3      	subs	r3, r2, r3
 80017ca:	2b02      	cmp	r3, #2
 80017cc:	d901      	bls.n	80017d2 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 80017ce:	2303      	movs	r3, #3
 80017d0:	e047      	b.n	8001862 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80017d2:	4b26      	ldr	r3, [pc, #152]	@ (800186c <HAL_RCC_OscConfig+0x620>)
 80017d4:	681a      	ldr	r2, [r3, #0]
 80017d6:	2380      	movs	r3, #128	@ 0x80
 80017d8:	049b      	lsls	r3, r3, #18
 80017da:	4013      	ands	r3, r2
 80017dc:	d0f0      	beq.n	80017c0 <HAL_RCC_OscConfig+0x574>
 80017de:	e03f      	b.n	8001860 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017e0:	4b22      	ldr	r3, [pc, #136]	@ (800186c <HAL_RCC_OscConfig+0x620>)
 80017e2:	681a      	ldr	r2, [r3, #0]
 80017e4:	4b21      	ldr	r3, [pc, #132]	@ (800186c <HAL_RCC_OscConfig+0x620>)
 80017e6:	4924      	ldr	r1, [pc, #144]	@ (8001878 <HAL_RCC_OscConfig+0x62c>)
 80017e8:	400a      	ands	r2, r1
 80017ea:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017ec:	f7ff fa5c 	bl	8000ca8 <HAL_GetTick>
 80017f0:	0003      	movs	r3, r0
 80017f2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80017f4:	e008      	b.n	8001808 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017f6:	f7ff fa57 	bl	8000ca8 <HAL_GetTick>
 80017fa:	0002      	movs	r2, r0
 80017fc:	69bb      	ldr	r3, [r7, #24]
 80017fe:	1ad3      	subs	r3, r2, r3
 8001800:	2b02      	cmp	r3, #2
 8001802:	d901      	bls.n	8001808 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8001804:	2303      	movs	r3, #3
 8001806:	e02c      	b.n	8001862 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001808:	4b18      	ldr	r3, [pc, #96]	@ (800186c <HAL_RCC_OscConfig+0x620>)
 800180a:	681a      	ldr	r2, [r3, #0]
 800180c:	2380      	movs	r3, #128	@ 0x80
 800180e:	049b      	lsls	r3, r3, #18
 8001810:	4013      	ands	r3, r2
 8001812:	d1f0      	bne.n	80017f6 <HAL_RCC_OscConfig+0x5aa>
 8001814:	e024      	b.n	8001860 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	6a1b      	ldr	r3, [r3, #32]
 800181a:	2b01      	cmp	r3, #1
 800181c:	d101      	bne.n	8001822 <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 800181e:	2301      	movs	r3, #1
 8001820:	e01f      	b.n	8001862 <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8001822:	4b12      	ldr	r3, [pc, #72]	@ (800186c <HAL_RCC_OscConfig+0x620>)
 8001824:	685b      	ldr	r3, [r3, #4]
 8001826:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8001828:	4b10      	ldr	r3, [pc, #64]	@ (800186c <HAL_RCC_OscConfig+0x620>)
 800182a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800182c:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800182e:	697a      	ldr	r2, [r7, #20]
 8001830:	2380      	movs	r3, #128	@ 0x80
 8001832:	025b      	lsls	r3, r3, #9
 8001834:	401a      	ands	r2, r3
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800183a:	429a      	cmp	r2, r3
 800183c:	d10e      	bne.n	800185c <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800183e:	693b      	ldr	r3, [r7, #16]
 8001840:	220f      	movs	r2, #15
 8001842:	401a      	ands	r2, r3
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001848:	429a      	cmp	r2, r3
 800184a:	d107      	bne.n	800185c <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 800184c:	697a      	ldr	r2, [r7, #20]
 800184e:	23f0      	movs	r3, #240	@ 0xf0
 8001850:	039b      	lsls	r3, r3, #14
 8001852:	401a      	ands	r2, r3
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001858:	429a      	cmp	r2, r3
 800185a:	d001      	beq.n	8001860 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 800185c:	2301      	movs	r3, #1
 800185e:	e000      	b.n	8001862 <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8001860:	2300      	movs	r3, #0
}
 8001862:	0018      	movs	r0, r3
 8001864:	46bd      	mov	sp, r7
 8001866:	b008      	add	sp, #32
 8001868:	bd80      	pop	{r7, pc}
 800186a:	46c0      	nop			@ (mov r8, r8)
 800186c:	40021000 	.word	0x40021000
 8001870:	00001388 	.word	0x00001388
 8001874:	efffffff 	.word	0xefffffff
 8001878:	feffffff 	.word	0xfeffffff
 800187c:	ffc2ffff 	.word	0xffc2ffff

08001880 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b084      	sub	sp, #16
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
 8001888:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	2b00      	cmp	r3, #0
 800188e:	d101      	bne.n	8001894 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001890:	2301      	movs	r3, #1
 8001892:	e0b3      	b.n	80019fc <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001894:	4b5b      	ldr	r3, [pc, #364]	@ (8001a04 <HAL_RCC_ClockConfig+0x184>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	2201      	movs	r2, #1
 800189a:	4013      	ands	r3, r2
 800189c:	683a      	ldr	r2, [r7, #0]
 800189e:	429a      	cmp	r2, r3
 80018a0:	d911      	bls.n	80018c6 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018a2:	4b58      	ldr	r3, [pc, #352]	@ (8001a04 <HAL_RCC_ClockConfig+0x184>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	2201      	movs	r2, #1
 80018a8:	4393      	bics	r3, r2
 80018aa:	0019      	movs	r1, r3
 80018ac:	4b55      	ldr	r3, [pc, #340]	@ (8001a04 <HAL_RCC_ClockConfig+0x184>)
 80018ae:	683a      	ldr	r2, [r7, #0]
 80018b0:	430a      	orrs	r2, r1
 80018b2:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80018b4:	4b53      	ldr	r3, [pc, #332]	@ (8001a04 <HAL_RCC_ClockConfig+0x184>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	2201      	movs	r2, #1
 80018ba:	4013      	ands	r3, r2
 80018bc:	683a      	ldr	r2, [r7, #0]
 80018be:	429a      	cmp	r2, r3
 80018c0:	d001      	beq.n	80018c6 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80018c2:	2301      	movs	r3, #1
 80018c4:	e09a      	b.n	80019fc <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	2202      	movs	r2, #2
 80018cc:	4013      	ands	r3, r2
 80018ce:	d015      	beq.n	80018fc <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	2204      	movs	r2, #4
 80018d6:	4013      	ands	r3, r2
 80018d8:	d006      	beq.n	80018e8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80018da:	4b4b      	ldr	r3, [pc, #300]	@ (8001a08 <HAL_RCC_ClockConfig+0x188>)
 80018dc:	685a      	ldr	r2, [r3, #4]
 80018de:	4b4a      	ldr	r3, [pc, #296]	@ (8001a08 <HAL_RCC_ClockConfig+0x188>)
 80018e0:	21e0      	movs	r1, #224	@ 0xe0
 80018e2:	00c9      	lsls	r1, r1, #3
 80018e4:	430a      	orrs	r2, r1
 80018e6:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80018e8:	4b47      	ldr	r3, [pc, #284]	@ (8001a08 <HAL_RCC_ClockConfig+0x188>)
 80018ea:	685b      	ldr	r3, [r3, #4]
 80018ec:	22f0      	movs	r2, #240	@ 0xf0
 80018ee:	4393      	bics	r3, r2
 80018f0:	0019      	movs	r1, r3
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	689a      	ldr	r2, [r3, #8]
 80018f6:	4b44      	ldr	r3, [pc, #272]	@ (8001a08 <HAL_RCC_ClockConfig+0x188>)
 80018f8:	430a      	orrs	r2, r1
 80018fa:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	2201      	movs	r2, #1
 8001902:	4013      	ands	r3, r2
 8001904:	d040      	beq.n	8001988 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	685b      	ldr	r3, [r3, #4]
 800190a:	2b01      	cmp	r3, #1
 800190c:	d107      	bne.n	800191e <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800190e:	4b3e      	ldr	r3, [pc, #248]	@ (8001a08 <HAL_RCC_ClockConfig+0x188>)
 8001910:	681a      	ldr	r2, [r3, #0]
 8001912:	2380      	movs	r3, #128	@ 0x80
 8001914:	029b      	lsls	r3, r3, #10
 8001916:	4013      	ands	r3, r2
 8001918:	d114      	bne.n	8001944 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800191a:	2301      	movs	r3, #1
 800191c:	e06e      	b.n	80019fc <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	685b      	ldr	r3, [r3, #4]
 8001922:	2b02      	cmp	r3, #2
 8001924:	d107      	bne.n	8001936 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001926:	4b38      	ldr	r3, [pc, #224]	@ (8001a08 <HAL_RCC_ClockConfig+0x188>)
 8001928:	681a      	ldr	r2, [r3, #0]
 800192a:	2380      	movs	r3, #128	@ 0x80
 800192c:	049b      	lsls	r3, r3, #18
 800192e:	4013      	ands	r3, r2
 8001930:	d108      	bne.n	8001944 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001932:	2301      	movs	r3, #1
 8001934:	e062      	b.n	80019fc <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001936:	4b34      	ldr	r3, [pc, #208]	@ (8001a08 <HAL_RCC_ClockConfig+0x188>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	2202      	movs	r2, #2
 800193c:	4013      	ands	r3, r2
 800193e:	d101      	bne.n	8001944 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001940:	2301      	movs	r3, #1
 8001942:	e05b      	b.n	80019fc <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001944:	4b30      	ldr	r3, [pc, #192]	@ (8001a08 <HAL_RCC_ClockConfig+0x188>)
 8001946:	685b      	ldr	r3, [r3, #4]
 8001948:	2203      	movs	r2, #3
 800194a:	4393      	bics	r3, r2
 800194c:	0019      	movs	r1, r3
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	685a      	ldr	r2, [r3, #4]
 8001952:	4b2d      	ldr	r3, [pc, #180]	@ (8001a08 <HAL_RCC_ClockConfig+0x188>)
 8001954:	430a      	orrs	r2, r1
 8001956:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001958:	f7ff f9a6 	bl	8000ca8 <HAL_GetTick>
 800195c:	0003      	movs	r3, r0
 800195e:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001960:	e009      	b.n	8001976 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001962:	f7ff f9a1 	bl	8000ca8 <HAL_GetTick>
 8001966:	0002      	movs	r2, r0
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	1ad3      	subs	r3, r2, r3
 800196c:	4a27      	ldr	r2, [pc, #156]	@ (8001a0c <HAL_RCC_ClockConfig+0x18c>)
 800196e:	4293      	cmp	r3, r2
 8001970:	d901      	bls.n	8001976 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8001972:	2303      	movs	r3, #3
 8001974:	e042      	b.n	80019fc <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001976:	4b24      	ldr	r3, [pc, #144]	@ (8001a08 <HAL_RCC_ClockConfig+0x188>)
 8001978:	685b      	ldr	r3, [r3, #4]
 800197a:	220c      	movs	r2, #12
 800197c:	401a      	ands	r2, r3
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	685b      	ldr	r3, [r3, #4]
 8001982:	009b      	lsls	r3, r3, #2
 8001984:	429a      	cmp	r2, r3
 8001986:	d1ec      	bne.n	8001962 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001988:	4b1e      	ldr	r3, [pc, #120]	@ (8001a04 <HAL_RCC_ClockConfig+0x184>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	2201      	movs	r2, #1
 800198e:	4013      	ands	r3, r2
 8001990:	683a      	ldr	r2, [r7, #0]
 8001992:	429a      	cmp	r2, r3
 8001994:	d211      	bcs.n	80019ba <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001996:	4b1b      	ldr	r3, [pc, #108]	@ (8001a04 <HAL_RCC_ClockConfig+0x184>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	2201      	movs	r2, #1
 800199c:	4393      	bics	r3, r2
 800199e:	0019      	movs	r1, r3
 80019a0:	4b18      	ldr	r3, [pc, #96]	@ (8001a04 <HAL_RCC_ClockConfig+0x184>)
 80019a2:	683a      	ldr	r2, [r7, #0]
 80019a4:	430a      	orrs	r2, r1
 80019a6:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80019a8:	4b16      	ldr	r3, [pc, #88]	@ (8001a04 <HAL_RCC_ClockConfig+0x184>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	2201      	movs	r2, #1
 80019ae:	4013      	ands	r3, r2
 80019b0:	683a      	ldr	r2, [r7, #0]
 80019b2:	429a      	cmp	r2, r3
 80019b4:	d001      	beq.n	80019ba <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 80019b6:	2301      	movs	r3, #1
 80019b8:	e020      	b.n	80019fc <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	2204      	movs	r2, #4
 80019c0:	4013      	ands	r3, r2
 80019c2:	d009      	beq.n	80019d8 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80019c4:	4b10      	ldr	r3, [pc, #64]	@ (8001a08 <HAL_RCC_ClockConfig+0x188>)
 80019c6:	685b      	ldr	r3, [r3, #4]
 80019c8:	4a11      	ldr	r2, [pc, #68]	@ (8001a10 <HAL_RCC_ClockConfig+0x190>)
 80019ca:	4013      	ands	r3, r2
 80019cc:	0019      	movs	r1, r3
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	68da      	ldr	r2, [r3, #12]
 80019d2:	4b0d      	ldr	r3, [pc, #52]	@ (8001a08 <HAL_RCC_ClockConfig+0x188>)
 80019d4:	430a      	orrs	r2, r1
 80019d6:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80019d8:	f000 f820 	bl	8001a1c <HAL_RCC_GetSysClockFreq>
 80019dc:	0001      	movs	r1, r0
 80019de:	4b0a      	ldr	r3, [pc, #40]	@ (8001a08 <HAL_RCC_ClockConfig+0x188>)
 80019e0:	685b      	ldr	r3, [r3, #4]
 80019e2:	091b      	lsrs	r3, r3, #4
 80019e4:	220f      	movs	r2, #15
 80019e6:	4013      	ands	r3, r2
 80019e8:	4a0a      	ldr	r2, [pc, #40]	@ (8001a14 <HAL_RCC_ClockConfig+0x194>)
 80019ea:	5cd3      	ldrb	r3, [r2, r3]
 80019ec:	000a      	movs	r2, r1
 80019ee:	40da      	lsrs	r2, r3
 80019f0:	4b09      	ldr	r3, [pc, #36]	@ (8001a18 <HAL_RCC_ClockConfig+0x198>)
 80019f2:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80019f4:	2003      	movs	r0, #3
 80019f6:	f7ff f911 	bl	8000c1c <HAL_InitTick>
  
  return HAL_OK;
 80019fa:	2300      	movs	r3, #0
}
 80019fc:	0018      	movs	r0, r3
 80019fe:	46bd      	mov	sp, r7
 8001a00:	b004      	add	sp, #16
 8001a02:	bd80      	pop	{r7, pc}
 8001a04:	40022000 	.word	0x40022000
 8001a08:	40021000 	.word	0x40021000
 8001a0c:	00001388 	.word	0x00001388
 8001a10:	fffff8ff 	.word	0xfffff8ff
 8001a14:	08001d48 	.word	0x08001d48
 8001a18:	20000000 	.word	0x20000000

08001a1c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b086      	sub	sp, #24
 8001a20:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001a22:	2300      	movs	r3, #0
 8001a24:	60fb      	str	r3, [r7, #12]
 8001a26:	2300      	movs	r3, #0
 8001a28:	60bb      	str	r3, [r7, #8]
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	617b      	str	r3, [r7, #20]
 8001a2e:	2300      	movs	r3, #0
 8001a30:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001a32:	2300      	movs	r3, #0
 8001a34:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8001a36:	4b20      	ldr	r3, [pc, #128]	@ (8001ab8 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001a38:	685b      	ldr	r3, [r3, #4]
 8001a3a:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	220c      	movs	r2, #12
 8001a40:	4013      	ands	r3, r2
 8001a42:	2b04      	cmp	r3, #4
 8001a44:	d002      	beq.n	8001a4c <HAL_RCC_GetSysClockFreq+0x30>
 8001a46:	2b08      	cmp	r3, #8
 8001a48:	d003      	beq.n	8001a52 <HAL_RCC_GetSysClockFreq+0x36>
 8001a4a:	e02c      	b.n	8001aa6 <HAL_RCC_GetSysClockFreq+0x8a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001a4c:	4b1b      	ldr	r3, [pc, #108]	@ (8001abc <HAL_RCC_GetSysClockFreq+0xa0>)
 8001a4e:	613b      	str	r3, [r7, #16]
      break;
 8001a50:	e02c      	b.n	8001aac <HAL_RCC_GetSysClockFreq+0x90>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	0c9b      	lsrs	r3, r3, #18
 8001a56:	220f      	movs	r2, #15
 8001a58:	4013      	ands	r3, r2
 8001a5a:	4a19      	ldr	r2, [pc, #100]	@ (8001ac0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001a5c:	5cd3      	ldrb	r3, [r2, r3]
 8001a5e:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001a60:	4b15      	ldr	r3, [pc, #84]	@ (8001ab8 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001a62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a64:	220f      	movs	r2, #15
 8001a66:	4013      	ands	r3, r2
 8001a68:	4a16      	ldr	r2, [pc, #88]	@ (8001ac4 <HAL_RCC_GetSysClockFreq+0xa8>)
 8001a6a:	5cd3      	ldrb	r3, [r2, r3]
 8001a6c:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001a6e:	68fa      	ldr	r2, [r7, #12]
 8001a70:	2380      	movs	r3, #128	@ 0x80
 8001a72:	025b      	lsls	r3, r3, #9
 8001a74:	4013      	ands	r3, r2
 8001a76:	d009      	beq.n	8001a8c <HAL_RCC_GetSysClockFreq+0x70>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001a78:	68b9      	ldr	r1, [r7, #8]
 8001a7a:	4810      	ldr	r0, [pc, #64]	@ (8001abc <HAL_RCC_GetSysClockFreq+0xa0>)
 8001a7c:	f7fe fb44 	bl	8000108 <__udivsi3>
 8001a80:	0003      	movs	r3, r0
 8001a82:	001a      	movs	r2, r3
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	4353      	muls	r3, r2
 8001a88:	617b      	str	r3, [r7, #20]
 8001a8a:	e009      	b.n	8001aa0 <HAL_RCC_GetSysClockFreq+0x84>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8001a8c:	6879      	ldr	r1, [r7, #4]
 8001a8e:	000a      	movs	r2, r1
 8001a90:	0152      	lsls	r2, r2, #5
 8001a92:	1a52      	subs	r2, r2, r1
 8001a94:	0193      	lsls	r3, r2, #6
 8001a96:	1a9b      	subs	r3, r3, r2
 8001a98:	00db      	lsls	r3, r3, #3
 8001a9a:	185b      	adds	r3, r3, r1
 8001a9c:	021b      	lsls	r3, r3, #8
 8001a9e:	617b      	str	r3, [r7, #20]
#endif
      }
      sysclockfreq = pllclk;
 8001aa0:	697b      	ldr	r3, [r7, #20]
 8001aa2:	613b      	str	r3, [r7, #16]
      break;
 8001aa4:	e002      	b.n	8001aac <HAL_RCC_GetSysClockFreq+0x90>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001aa6:	4b05      	ldr	r3, [pc, #20]	@ (8001abc <HAL_RCC_GetSysClockFreq+0xa0>)
 8001aa8:	613b      	str	r3, [r7, #16]
      break;
 8001aaa:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001aac:	693b      	ldr	r3, [r7, #16]
}
 8001aae:	0018      	movs	r0, r3
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	b006      	add	sp, #24
 8001ab4:	bd80      	pop	{r7, pc}
 8001ab6:	46c0      	nop			@ (mov r8, r8)
 8001ab8:	40021000 	.word	0x40021000
 8001abc:	007a1200 	.word	0x007a1200
 8001ac0:	08001d58 	.word	0x08001d58
 8001ac4:	08001d68 	.word	0x08001d68

08001ac8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b082      	sub	sp, #8
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d101      	bne.n	8001ada <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001ad6:	2301      	movs	r3, #1
 8001ad8:	e042      	b.n	8001b60 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	223d      	movs	r2, #61	@ 0x3d
 8001ade:	5c9b      	ldrb	r3, [r3, r2]
 8001ae0:	b2db      	uxtb	r3, r3
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d107      	bne.n	8001af6 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	223c      	movs	r2, #60	@ 0x3c
 8001aea:	2100      	movs	r1, #0
 8001aec:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	0018      	movs	r0, r3
 8001af2:	f7ff f807 	bl	8000b04 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	223d      	movs	r2, #61	@ 0x3d
 8001afa:	2102      	movs	r1, #2
 8001afc:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681a      	ldr	r2, [r3, #0]
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	3304      	adds	r3, #4
 8001b06:	0019      	movs	r1, r3
 8001b08:	0010      	movs	r0, r2
 8001b0a:	f000 f86b 	bl	8001be4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	2246      	movs	r2, #70	@ 0x46
 8001b12:	2101      	movs	r1, #1
 8001b14:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	223e      	movs	r2, #62	@ 0x3e
 8001b1a:	2101      	movs	r1, #1
 8001b1c:	5499      	strb	r1, [r3, r2]
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	223f      	movs	r2, #63	@ 0x3f
 8001b22:	2101      	movs	r1, #1
 8001b24:	5499      	strb	r1, [r3, r2]
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	2240      	movs	r2, #64	@ 0x40
 8001b2a:	2101      	movs	r1, #1
 8001b2c:	5499      	strb	r1, [r3, r2]
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	2241      	movs	r2, #65	@ 0x41
 8001b32:	2101      	movs	r1, #1
 8001b34:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	2242      	movs	r2, #66	@ 0x42
 8001b3a:	2101      	movs	r1, #1
 8001b3c:	5499      	strb	r1, [r3, r2]
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	2243      	movs	r2, #67	@ 0x43
 8001b42:	2101      	movs	r1, #1
 8001b44:	5499      	strb	r1, [r3, r2]
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	2244      	movs	r2, #68	@ 0x44
 8001b4a:	2101      	movs	r1, #1
 8001b4c:	5499      	strb	r1, [r3, r2]
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	2245      	movs	r2, #69	@ 0x45
 8001b52:	2101      	movs	r1, #1
 8001b54:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	223d      	movs	r2, #61	@ 0x3d
 8001b5a:	2101      	movs	r1, #1
 8001b5c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001b5e:	2300      	movs	r3, #0
}
 8001b60:	0018      	movs	r0, r3
 8001b62:	46bd      	mov	sp, r7
 8001b64:	b002      	add	sp, #8
 8001b66:	bd80      	pop	{r7, pc}

08001b68 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b084      	sub	sp, #16
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	223d      	movs	r2, #61	@ 0x3d
 8001b74:	5c9b      	ldrb	r3, [r3, r2]
 8001b76:	b2db      	uxtb	r3, r3
 8001b78:	2b01      	cmp	r3, #1
 8001b7a:	d001      	beq.n	8001b80 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8001b7c:	2301      	movs	r3, #1
 8001b7e:	e028      	b.n	8001bd2 <HAL_TIM_Base_Start+0x6a>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	223d      	movs	r2, #61	@ 0x3d
 8001b84:	2102      	movs	r1, #2
 8001b86:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	4a13      	ldr	r2, [pc, #76]	@ (8001bdc <HAL_TIM_Base_Start+0x74>)
 8001b8e:	4293      	cmp	r3, r2
 8001b90:	d004      	beq.n	8001b9c <HAL_TIM_Base_Start+0x34>
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	4a12      	ldr	r2, [pc, #72]	@ (8001be0 <HAL_TIM_Base_Start+0x78>)
 8001b98:	4293      	cmp	r3, r2
 8001b9a:	d111      	bne.n	8001bc0 <HAL_TIM_Base_Start+0x58>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	689b      	ldr	r3, [r3, #8]
 8001ba2:	2207      	movs	r2, #7
 8001ba4:	4013      	ands	r3, r2
 8001ba6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	2b06      	cmp	r3, #6
 8001bac:	d010      	beq.n	8001bd0 <HAL_TIM_Base_Start+0x68>
    {
      __HAL_TIM_ENABLE(htim);
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	681a      	ldr	r2, [r3, #0]
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	2101      	movs	r1, #1
 8001bba:	430a      	orrs	r2, r1
 8001bbc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001bbe:	e007      	b.n	8001bd0 <HAL_TIM_Base_Start+0x68>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	681a      	ldr	r2, [r3, #0]
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	2101      	movs	r1, #1
 8001bcc:	430a      	orrs	r2, r1
 8001bce:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001bd0:	2300      	movs	r3, #0
}
 8001bd2:	0018      	movs	r0, r3
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	b004      	add	sp, #16
 8001bd8:	bd80      	pop	{r7, pc}
 8001bda:	46c0      	nop			@ (mov r8, r8)
 8001bdc:	40012c00 	.word	0x40012c00
 8001be0:	40000400 	.word	0x40000400

08001be4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b084      	sub	sp, #16
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
 8001bec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	4a32      	ldr	r2, [pc, #200]	@ (8001cc0 <TIM_Base_SetConfig+0xdc>)
 8001bf8:	4293      	cmp	r3, r2
 8001bfa:	d003      	beq.n	8001c04 <TIM_Base_SetConfig+0x20>
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	4a31      	ldr	r2, [pc, #196]	@ (8001cc4 <TIM_Base_SetConfig+0xe0>)
 8001c00:	4293      	cmp	r3, r2
 8001c02:	d108      	bne.n	8001c16 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	2270      	movs	r2, #112	@ 0x70
 8001c08:	4393      	bics	r3, r2
 8001c0a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	685b      	ldr	r3, [r3, #4]
 8001c10:	68fa      	ldr	r2, [r7, #12]
 8001c12:	4313      	orrs	r3, r2
 8001c14:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	4a29      	ldr	r2, [pc, #164]	@ (8001cc0 <TIM_Base_SetConfig+0xdc>)
 8001c1a:	4293      	cmp	r3, r2
 8001c1c:	d00f      	beq.n	8001c3e <TIM_Base_SetConfig+0x5a>
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	4a28      	ldr	r2, [pc, #160]	@ (8001cc4 <TIM_Base_SetConfig+0xe0>)
 8001c22:	4293      	cmp	r3, r2
 8001c24:	d00b      	beq.n	8001c3e <TIM_Base_SetConfig+0x5a>
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	4a27      	ldr	r2, [pc, #156]	@ (8001cc8 <TIM_Base_SetConfig+0xe4>)
 8001c2a:	4293      	cmp	r3, r2
 8001c2c:	d007      	beq.n	8001c3e <TIM_Base_SetConfig+0x5a>
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	4a26      	ldr	r2, [pc, #152]	@ (8001ccc <TIM_Base_SetConfig+0xe8>)
 8001c32:	4293      	cmp	r3, r2
 8001c34:	d003      	beq.n	8001c3e <TIM_Base_SetConfig+0x5a>
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	4a25      	ldr	r2, [pc, #148]	@ (8001cd0 <TIM_Base_SetConfig+0xec>)
 8001c3a:	4293      	cmp	r3, r2
 8001c3c:	d108      	bne.n	8001c50 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	4a24      	ldr	r2, [pc, #144]	@ (8001cd4 <TIM_Base_SetConfig+0xf0>)
 8001c42:	4013      	ands	r3, r2
 8001c44:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001c46:	683b      	ldr	r3, [r7, #0]
 8001c48:	68db      	ldr	r3, [r3, #12]
 8001c4a:	68fa      	ldr	r2, [r7, #12]
 8001c4c:	4313      	orrs	r3, r2
 8001c4e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	2280      	movs	r2, #128	@ 0x80
 8001c54:	4393      	bics	r3, r2
 8001c56:	001a      	movs	r2, r3
 8001c58:	683b      	ldr	r3, [r7, #0]
 8001c5a:	695b      	ldr	r3, [r3, #20]
 8001c5c:	4313      	orrs	r3, r2
 8001c5e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	68fa      	ldr	r2, [r7, #12]
 8001c64:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001c66:	683b      	ldr	r3, [r7, #0]
 8001c68:	689a      	ldr	r2, [r3, #8]
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001c6e:	683b      	ldr	r3, [r7, #0]
 8001c70:	681a      	ldr	r2, [r3, #0]
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	4a11      	ldr	r2, [pc, #68]	@ (8001cc0 <TIM_Base_SetConfig+0xdc>)
 8001c7a:	4293      	cmp	r3, r2
 8001c7c:	d007      	beq.n	8001c8e <TIM_Base_SetConfig+0xaa>
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	4a12      	ldr	r2, [pc, #72]	@ (8001ccc <TIM_Base_SetConfig+0xe8>)
 8001c82:	4293      	cmp	r3, r2
 8001c84:	d003      	beq.n	8001c8e <TIM_Base_SetConfig+0xaa>
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	4a11      	ldr	r2, [pc, #68]	@ (8001cd0 <TIM_Base_SetConfig+0xec>)
 8001c8a:	4293      	cmp	r3, r2
 8001c8c:	d103      	bne.n	8001c96 <TIM_Base_SetConfig+0xb2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001c8e:	683b      	ldr	r3, [r7, #0]
 8001c90:	691a      	ldr	r2, [r3, #16]
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	2201      	movs	r2, #1
 8001c9a:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	691b      	ldr	r3, [r3, #16]
 8001ca0:	2201      	movs	r2, #1
 8001ca2:	4013      	ands	r3, r2
 8001ca4:	2b01      	cmp	r3, #1
 8001ca6:	d106      	bne.n	8001cb6 <TIM_Base_SetConfig+0xd2>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	691b      	ldr	r3, [r3, #16]
 8001cac:	2201      	movs	r2, #1
 8001cae:	4393      	bics	r3, r2
 8001cb0:	001a      	movs	r2, r3
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	611a      	str	r2, [r3, #16]
  }
}
 8001cb6:	46c0      	nop			@ (mov r8, r8)
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	b004      	add	sp, #16
 8001cbc:	bd80      	pop	{r7, pc}
 8001cbe:	46c0      	nop			@ (mov r8, r8)
 8001cc0:	40012c00 	.word	0x40012c00
 8001cc4:	40000400 	.word	0x40000400
 8001cc8:	40002000 	.word	0x40002000
 8001ccc:	40014400 	.word	0x40014400
 8001cd0:	40014800 	.word	0x40014800
 8001cd4:	fffffcff 	.word	0xfffffcff

08001cd8 <memset>:
 8001cd8:	0003      	movs	r3, r0
 8001cda:	1882      	adds	r2, r0, r2
 8001cdc:	4293      	cmp	r3, r2
 8001cde:	d100      	bne.n	8001ce2 <memset+0xa>
 8001ce0:	4770      	bx	lr
 8001ce2:	7019      	strb	r1, [r3, #0]
 8001ce4:	3301      	adds	r3, #1
 8001ce6:	e7f9      	b.n	8001cdc <memset+0x4>

08001ce8 <__libc_init_array>:
 8001ce8:	b570      	push	{r4, r5, r6, lr}
 8001cea:	2600      	movs	r6, #0
 8001cec:	4c0c      	ldr	r4, [pc, #48]	@ (8001d20 <__libc_init_array+0x38>)
 8001cee:	4d0d      	ldr	r5, [pc, #52]	@ (8001d24 <__libc_init_array+0x3c>)
 8001cf0:	1b64      	subs	r4, r4, r5
 8001cf2:	10a4      	asrs	r4, r4, #2
 8001cf4:	42a6      	cmp	r6, r4
 8001cf6:	d109      	bne.n	8001d0c <__libc_init_array+0x24>
 8001cf8:	2600      	movs	r6, #0
 8001cfa:	f000 f819 	bl	8001d30 <_init>
 8001cfe:	4c0a      	ldr	r4, [pc, #40]	@ (8001d28 <__libc_init_array+0x40>)
 8001d00:	4d0a      	ldr	r5, [pc, #40]	@ (8001d2c <__libc_init_array+0x44>)
 8001d02:	1b64      	subs	r4, r4, r5
 8001d04:	10a4      	asrs	r4, r4, #2
 8001d06:	42a6      	cmp	r6, r4
 8001d08:	d105      	bne.n	8001d16 <__libc_init_array+0x2e>
 8001d0a:	bd70      	pop	{r4, r5, r6, pc}
 8001d0c:	00b3      	lsls	r3, r6, #2
 8001d0e:	58eb      	ldr	r3, [r5, r3]
 8001d10:	4798      	blx	r3
 8001d12:	3601      	adds	r6, #1
 8001d14:	e7ee      	b.n	8001cf4 <__libc_init_array+0xc>
 8001d16:	00b3      	lsls	r3, r6, #2
 8001d18:	58eb      	ldr	r3, [r5, r3]
 8001d1a:	4798      	blx	r3
 8001d1c:	3601      	adds	r6, #1
 8001d1e:	e7f2      	b.n	8001d06 <__libc_init_array+0x1e>
 8001d20:	08001d78 	.word	0x08001d78
 8001d24:	08001d78 	.word	0x08001d78
 8001d28:	08001d7c 	.word	0x08001d7c
 8001d2c:	08001d78 	.word	0x08001d78

08001d30 <_init>:
 8001d30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d32:	46c0      	nop			@ (mov r8, r8)
 8001d34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001d36:	bc08      	pop	{r3}
 8001d38:	469e      	mov	lr, r3
 8001d3a:	4770      	bx	lr

08001d3c <_fini>:
 8001d3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d3e:	46c0      	nop			@ (mov r8, r8)
 8001d40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001d42:	bc08      	pop	{r3}
 8001d44:	469e      	mov	lr, r3
 8001d46:	4770      	bx	lr
